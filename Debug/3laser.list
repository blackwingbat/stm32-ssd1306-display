
3laser.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005258  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005684  080053f8  080053f8  000153f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa7c  0800aa7c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  0800aa7c  0800aa7c  0001aa7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aa84  0800aa84  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa84  0800aa84  0001aa84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aa88  0800aa88  0001aa88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0800aa8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005c8  2000005c  0800aae8  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000624  0800aae8  00020624  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008131  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000196a  00000000  00000000  00028200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000850  00000000  00000000  00029b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000647  00000000  00000000  0002a3c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000160e6  00000000  00000000  0002aa07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b4e8  00000000  00000000  00040aed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00085ace  00000000  00000000  0004bfd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002910  00000000  00000000  000d1aa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000d43b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080053e0 	.word	0x080053e0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	080053e0 	.word	0x080053e0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b970 	b.w	8000d64 <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9e08      	ldr	r6, [sp, #32]
 8000aa2:	460d      	mov	r5, r1
 8000aa4:	4604      	mov	r4, r0
 8000aa6:	460f      	mov	r7, r1
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d14a      	bne.n	8000b42 <__udivmoddi4+0xa6>
 8000aac:	428a      	cmp	r2, r1
 8000aae:	4694      	mov	ip, r2
 8000ab0:	d965      	bls.n	8000b7e <__udivmoddi4+0xe2>
 8000ab2:	fab2 f382 	clz	r3, r2
 8000ab6:	b143      	cbz	r3, 8000aca <__udivmoddi4+0x2e>
 8000ab8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000abc:	f1c3 0220 	rsb	r2, r3, #32
 8000ac0:	409f      	lsls	r7, r3
 8000ac2:	fa20 f202 	lsr.w	r2, r0, r2
 8000ac6:	4317      	orrs	r7, r2
 8000ac8:	409c      	lsls	r4, r3
 8000aca:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000ace:	fa1f f58c 	uxth.w	r5, ip
 8000ad2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ad6:	0c22      	lsrs	r2, r4, #16
 8000ad8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000adc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ae0:	fb01 f005 	mul.w	r0, r1, r5
 8000ae4:	4290      	cmp	r0, r2
 8000ae6:	d90a      	bls.n	8000afe <__udivmoddi4+0x62>
 8000ae8:	eb1c 0202 	adds.w	r2, ip, r2
 8000aec:	f101 37ff 	add.w	r7, r1, #4294967295
 8000af0:	f080 811c 	bcs.w	8000d2c <__udivmoddi4+0x290>
 8000af4:	4290      	cmp	r0, r2
 8000af6:	f240 8119 	bls.w	8000d2c <__udivmoddi4+0x290>
 8000afa:	3902      	subs	r1, #2
 8000afc:	4462      	add	r2, ip
 8000afe:	1a12      	subs	r2, r2, r0
 8000b00:	b2a4      	uxth	r4, r4
 8000b02:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b06:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b0a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b0e:	fb00 f505 	mul.w	r5, r0, r5
 8000b12:	42a5      	cmp	r5, r4
 8000b14:	d90a      	bls.n	8000b2c <__udivmoddi4+0x90>
 8000b16:	eb1c 0404 	adds.w	r4, ip, r4
 8000b1a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b1e:	f080 8107 	bcs.w	8000d30 <__udivmoddi4+0x294>
 8000b22:	42a5      	cmp	r5, r4
 8000b24:	f240 8104 	bls.w	8000d30 <__udivmoddi4+0x294>
 8000b28:	4464      	add	r4, ip
 8000b2a:	3802      	subs	r0, #2
 8000b2c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b30:	1b64      	subs	r4, r4, r5
 8000b32:	2100      	movs	r1, #0
 8000b34:	b11e      	cbz	r6, 8000b3e <__udivmoddi4+0xa2>
 8000b36:	40dc      	lsrs	r4, r3
 8000b38:	2300      	movs	r3, #0
 8000b3a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b42:	428b      	cmp	r3, r1
 8000b44:	d908      	bls.n	8000b58 <__udivmoddi4+0xbc>
 8000b46:	2e00      	cmp	r6, #0
 8000b48:	f000 80ed 	beq.w	8000d26 <__udivmoddi4+0x28a>
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b52:	4608      	mov	r0, r1
 8000b54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b58:	fab3 f183 	clz	r1, r3
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	d149      	bne.n	8000bf4 <__udivmoddi4+0x158>
 8000b60:	42ab      	cmp	r3, r5
 8000b62:	d302      	bcc.n	8000b6a <__udivmoddi4+0xce>
 8000b64:	4282      	cmp	r2, r0
 8000b66:	f200 80f8 	bhi.w	8000d5a <__udivmoddi4+0x2be>
 8000b6a:	1a84      	subs	r4, r0, r2
 8000b6c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b70:	2001      	movs	r0, #1
 8000b72:	4617      	mov	r7, r2
 8000b74:	2e00      	cmp	r6, #0
 8000b76:	d0e2      	beq.n	8000b3e <__udivmoddi4+0xa2>
 8000b78:	e9c6 4700 	strd	r4, r7, [r6]
 8000b7c:	e7df      	b.n	8000b3e <__udivmoddi4+0xa2>
 8000b7e:	b902      	cbnz	r2, 8000b82 <__udivmoddi4+0xe6>
 8000b80:	deff      	udf	#255	; 0xff
 8000b82:	fab2 f382 	clz	r3, r2
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	f040 8090 	bne.w	8000cac <__udivmoddi4+0x210>
 8000b8c:	1a8a      	subs	r2, r1, r2
 8000b8e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b92:	fa1f fe8c 	uxth.w	lr, ip
 8000b96:	2101      	movs	r1, #1
 8000b98:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b9c:	fb07 2015 	mls	r0, r7, r5, r2
 8000ba0:	0c22      	lsrs	r2, r4, #16
 8000ba2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ba6:	fb0e f005 	mul.w	r0, lr, r5
 8000baa:	4290      	cmp	r0, r2
 8000bac:	d908      	bls.n	8000bc0 <__udivmoddi4+0x124>
 8000bae:	eb1c 0202 	adds.w	r2, ip, r2
 8000bb2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000bb6:	d202      	bcs.n	8000bbe <__udivmoddi4+0x122>
 8000bb8:	4290      	cmp	r0, r2
 8000bba:	f200 80cb 	bhi.w	8000d54 <__udivmoddi4+0x2b8>
 8000bbe:	4645      	mov	r5, r8
 8000bc0:	1a12      	subs	r2, r2, r0
 8000bc2:	b2a4      	uxth	r4, r4
 8000bc4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bc8:	fb07 2210 	mls	r2, r7, r0, r2
 8000bcc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bd0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bd4:	45a6      	cmp	lr, r4
 8000bd6:	d908      	bls.n	8000bea <__udivmoddi4+0x14e>
 8000bd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bdc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000be0:	d202      	bcs.n	8000be8 <__udivmoddi4+0x14c>
 8000be2:	45a6      	cmp	lr, r4
 8000be4:	f200 80bb 	bhi.w	8000d5e <__udivmoddi4+0x2c2>
 8000be8:	4610      	mov	r0, r2
 8000bea:	eba4 040e 	sub.w	r4, r4, lr
 8000bee:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000bf2:	e79f      	b.n	8000b34 <__udivmoddi4+0x98>
 8000bf4:	f1c1 0720 	rsb	r7, r1, #32
 8000bf8:	408b      	lsls	r3, r1
 8000bfa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bfe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c02:	fa05 f401 	lsl.w	r4, r5, r1
 8000c06:	fa20 f307 	lsr.w	r3, r0, r7
 8000c0a:	40fd      	lsrs	r5, r7
 8000c0c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c10:	4323      	orrs	r3, r4
 8000c12:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c16:	fa1f fe8c 	uxth.w	lr, ip
 8000c1a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c1e:	0c1c      	lsrs	r4, r3, #16
 8000c20:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c24:	fb08 f50e 	mul.w	r5, r8, lr
 8000c28:	42a5      	cmp	r5, r4
 8000c2a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c2e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c32:	d90b      	bls.n	8000c4c <__udivmoddi4+0x1b0>
 8000c34:	eb1c 0404 	adds.w	r4, ip, r4
 8000c38:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c3c:	f080 8088 	bcs.w	8000d50 <__udivmoddi4+0x2b4>
 8000c40:	42a5      	cmp	r5, r4
 8000c42:	f240 8085 	bls.w	8000d50 <__udivmoddi4+0x2b4>
 8000c46:	f1a8 0802 	sub.w	r8, r8, #2
 8000c4a:	4464      	add	r4, ip
 8000c4c:	1b64      	subs	r4, r4, r5
 8000c4e:	b29d      	uxth	r5, r3
 8000c50:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c54:	fb09 4413 	mls	r4, r9, r3, r4
 8000c58:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c5c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c60:	45a6      	cmp	lr, r4
 8000c62:	d908      	bls.n	8000c76 <__udivmoddi4+0x1da>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c6c:	d26c      	bcs.n	8000d48 <__udivmoddi4+0x2ac>
 8000c6e:	45a6      	cmp	lr, r4
 8000c70:	d96a      	bls.n	8000d48 <__udivmoddi4+0x2ac>
 8000c72:	3b02      	subs	r3, #2
 8000c74:	4464      	add	r4, ip
 8000c76:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c7a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c7e:	eba4 040e 	sub.w	r4, r4, lr
 8000c82:	42ac      	cmp	r4, r5
 8000c84:	46c8      	mov	r8, r9
 8000c86:	46ae      	mov	lr, r5
 8000c88:	d356      	bcc.n	8000d38 <__udivmoddi4+0x29c>
 8000c8a:	d053      	beq.n	8000d34 <__udivmoddi4+0x298>
 8000c8c:	b156      	cbz	r6, 8000ca4 <__udivmoddi4+0x208>
 8000c8e:	ebb0 0208 	subs.w	r2, r0, r8
 8000c92:	eb64 040e 	sbc.w	r4, r4, lr
 8000c96:	fa04 f707 	lsl.w	r7, r4, r7
 8000c9a:	40ca      	lsrs	r2, r1
 8000c9c:	40cc      	lsrs	r4, r1
 8000c9e:	4317      	orrs	r7, r2
 8000ca0:	e9c6 7400 	strd	r7, r4, [r6]
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cac:	f1c3 0120 	rsb	r1, r3, #32
 8000cb0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cb4:	fa20 f201 	lsr.w	r2, r0, r1
 8000cb8:	fa25 f101 	lsr.w	r1, r5, r1
 8000cbc:	409d      	lsls	r5, r3
 8000cbe:	432a      	orrs	r2, r5
 8000cc0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cc4:	fa1f fe8c 	uxth.w	lr, ip
 8000cc8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ccc:	fb07 1510 	mls	r5, r7, r0, r1
 8000cd0:	0c11      	lsrs	r1, r2, #16
 8000cd2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000cd6:	fb00 f50e 	mul.w	r5, r0, lr
 8000cda:	428d      	cmp	r5, r1
 8000cdc:	fa04 f403 	lsl.w	r4, r4, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x258>
 8000ce2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ce6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cea:	d22f      	bcs.n	8000d4c <__udivmoddi4+0x2b0>
 8000cec:	428d      	cmp	r5, r1
 8000cee:	d92d      	bls.n	8000d4c <__udivmoddi4+0x2b0>
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	4461      	add	r1, ip
 8000cf4:	1b49      	subs	r1, r1, r5
 8000cf6:	b292      	uxth	r2, r2
 8000cf8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000cfc:	fb07 1115 	mls	r1, r7, r5, r1
 8000d00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d04:	fb05 f10e 	mul.w	r1, r5, lr
 8000d08:	4291      	cmp	r1, r2
 8000d0a:	d908      	bls.n	8000d1e <__udivmoddi4+0x282>
 8000d0c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d10:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d14:	d216      	bcs.n	8000d44 <__udivmoddi4+0x2a8>
 8000d16:	4291      	cmp	r1, r2
 8000d18:	d914      	bls.n	8000d44 <__udivmoddi4+0x2a8>
 8000d1a:	3d02      	subs	r5, #2
 8000d1c:	4462      	add	r2, ip
 8000d1e:	1a52      	subs	r2, r2, r1
 8000d20:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d24:	e738      	b.n	8000b98 <__udivmoddi4+0xfc>
 8000d26:	4631      	mov	r1, r6
 8000d28:	4630      	mov	r0, r6
 8000d2a:	e708      	b.n	8000b3e <__udivmoddi4+0xa2>
 8000d2c:	4639      	mov	r1, r7
 8000d2e:	e6e6      	b.n	8000afe <__udivmoddi4+0x62>
 8000d30:	4610      	mov	r0, r2
 8000d32:	e6fb      	b.n	8000b2c <__udivmoddi4+0x90>
 8000d34:	4548      	cmp	r0, r9
 8000d36:	d2a9      	bcs.n	8000c8c <__udivmoddi4+0x1f0>
 8000d38:	ebb9 0802 	subs.w	r8, r9, r2
 8000d3c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d40:	3b01      	subs	r3, #1
 8000d42:	e7a3      	b.n	8000c8c <__udivmoddi4+0x1f0>
 8000d44:	4645      	mov	r5, r8
 8000d46:	e7ea      	b.n	8000d1e <__udivmoddi4+0x282>
 8000d48:	462b      	mov	r3, r5
 8000d4a:	e794      	b.n	8000c76 <__udivmoddi4+0x1da>
 8000d4c:	4640      	mov	r0, r8
 8000d4e:	e7d1      	b.n	8000cf4 <__udivmoddi4+0x258>
 8000d50:	46d0      	mov	r8, sl
 8000d52:	e77b      	b.n	8000c4c <__udivmoddi4+0x1b0>
 8000d54:	3d02      	subs	r5, #2
 8000d56:	4462      	add	r2, ip
 8000d58:	e732      	b.n	8000bc0 <__udivmoddi4+0x124>
 8000d5a:	4608      	mov	r0, r1
 8000d5c:	e70a      	b.n	8000b74 <__udivmoddi4+0xd8>
 8000d5e:	4464      	add	r4, ip
 8000d60:	3802      	subs	r0, #2
 8000d62:	e742      	b.n	8000bea <__udivmoddi4+0x14e>

08000d64 <__aeabi_idiv0>:
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop

08000d68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d6c:	f001 fd62 	bl	8002834 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d70:	f000 f80a 	bl	8000d88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d74:	f000 f896 	bl	8000ea4 <MX_GPIO_Init>
  MX_I2C3_Init();
 8000d78:	f000 f866 	bl	8000e48 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 8000d7c:	f000 f8f8 	bl	8000f70 <ssd1306_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ssd1306_TestAll();
 8000d80:	f001 fbce 	bl	8002520 <ssd1306_TestAll>
 8000d84:	e7fc      	b.n	8000d80 <main+0x18>
	...

08000d88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b094      	sub	sp, #80	; 0x50
 8000d8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d8e:	f107 0320 	add.w	r3, r7, #32
 8000d92:	2230      	movs	r2, #48	; 0x30
 8000d94:	2100      	movs	r1, #0
 8000d96:	4618      	mov	r0, r3
 8000d98:	f003 f93a 	bl	8004010 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d9c:	f107 030c 	add.w	r3, r7, #12
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
 8000da8:	60da      	str	r2, [r3, #12]
 8000daa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dac:	2300      	movs	r3, #0
 8000dae:	60bb      	str	r3, [r7, #8]
 8000db0:	4b23      	ldr	r3, [pc, #140]	; (8000e40 <SystemClock_Config+0xb8>)
 8000db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db4:	4a22      	ldr	r2, [pc, #136]	; (8000e40 <SystemClock_Config+0xb8>)
 8000db6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dba:	6413      	str	r3, [r2, #64]	; 0x40
 8000dbc:	4b20      	ldr	r3, [pc, #128]	; (8000e40 <SystemClock_Config+0xb8>)
 8000dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dc4:	60bb      	str	r3, [r7, #8]
 8000dc6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000dc8:	2300      	movs	r3, #0
 8000dca:	607b      	str	r3, [r7, #4]
 8000dcc:	4b1d      	ldr	r3, [pc, #116]	; (8000e44 <SystemClock_Config+0xbc>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000dd4:	4a1b      	ldr	r2, [pc, #108]	; (8000e44 <SystemClock_Config+0xbc>)
 8000dd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000dda:	6013      	str	r3, [r2, #0]
 8000ddc:	4b19      	ldr	r3, [pc, #100]	; (8000e44 <SystemClock_Config+0xbc>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000de4:	607b      	str	r3, [r7, #4]
 8000de6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000de8:	2302      	movs	r3, #2
 8000dea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dec:	2301      	movs	r3, #1
 8000dee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000df0:	2310      	movs	r3, #16
 8000df2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000df4:	2300      	movs	r3, #0
 8000df6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000df8:	f107 0320 	add.w	r3, r7, #32
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f002 fc75 	bl	80036ec <HAL_RCC_OscConfig>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000e08:	f000 f874 	bl	8000ef4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e0c:	230f      	movs	r3, #15
 8000e0e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e10:	2300      	movs	r3, #0
 8000e12:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e14:	2300      	movs	r3, #0
 8000e16:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e20:	f107 030c 	add.w	r3, r7, #12
 8000e24:	2100      	movs	r1, #0
 8000e26:	4618      	mov	r0, r3
 8000e28:	f002 fed8 	bl	8003bdc <HAL_RCC_ClockConfig>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000e32:	f000 f85f 	bl	8000ef4 <Error_Handler>
  }
}
 8000e36:	bf00      	nop
 8000e38:	3750      	adds	r7, #80	; 0x50
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40023800 	.word	0x40023800
 8000e44:	40007000 	.word	0x40007000

08000e48 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000e4c:	4b12      	ldr	r3, [pc, #72]	; (8000e98 <MX_I2C3_Init+0x50>)
 8000e4e:	4a13      	ldr	r2, [pc, #76]	; (8000e9c <MX_I2C3_Init+0x54>)
 8000e50:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8000e52:	4b11      	ldr	r3, [pc, #68]	; (8000e98 <MX_I2C3_Init+0x50>)
 8000e54:	4a12      	ldr	r2, [pc, #72]	; (8000ea0 <MX_I2C3_Init+0x58>)
 8000e56:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e58:	4b0f      	ldr	r3, [pc, #60]	; (8000e98 <MX_I2C3_Init+0x50>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000e5e:	4b0e      	ldr	r3, [pc, #56]	; (8000e98 <MX_I2C3_Init+0x50>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e64:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <MX_I2C3_Init+0x50>)
 8000e66:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e6a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e6c:	4b0a      	ldr	r3, [pc, #40]	; (8000e98 <MX_I2C3_Init+0x50>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000e72:	4b09      	ldr	r3, [pc, #36]	; (8000e98 <MX_I2C3_Init+0x50>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e78:	4b07      	ldr	r3, [pc, #28]	; (8000e98 <MX_I2C3_Init+0x50>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e7e:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <MX_I2C3_Init+0x50>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000e84:	4804      	ldr	r0, [pc, #16]	; (8000e98 <MX_I2C3_Init+0x50>)
 8000e86:	f001 ffd5 	bl	8002e34 <HAL_I2C_Init>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000e90:	f000 f830 	bl	8000ef4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000e94:	bf00      	nop
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	20000078 	.word	0x20000078
 8000e9c:	40005c00 	.word	0x40005c00
 8000ea0:	00061a80 	.word	0x00061a80

08000ea4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	607b      	str	r3, [r7, #4]
 8000eae:	4b10      	ldr	r3, [pc, #64]	; (8000ef0 <MX_GPIO_Init+0x4c>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	4a0f      	ldr	r2, [pc, #60]	; (8000ef0 <MX_GPIO_Init+0x4c>)
 8000eb4:	f043 0301 	orr.w	r3, r3, #1
 8000eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eba:	4b0d      	ldr	r3, [pc, #52]	; (8000ef0 <MX_GPIO_Init+0x4c>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	f003 0301 	and.w	r3, r3, #1
 8000ec2:	607b      	str	r3, [r7, #4]
 8000ec4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	603b      	str	r3, [r7, #0]
 8000eca:	4b09      	ldr	r3, [pc, #36]	; (8000ef0 <MX_GPIO_Init+0x4c>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	4a08      	ldr	r2, [pc, #32]	; (8000ef0 <MX_GPIO_Init+0x4c>)
 8000ed0:	f043 0302 	orr.w	r3, r3, #2
 8000ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed6:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <MX_GPIO_Init+0x4c>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	f003 0302 	and.w	r3, r3, #2
 8000ede:	603b      	str	r3, [r7, #0]
 8000ee0:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ee2:	bf00      	nop
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	40023800 	.word	0x40023800

08000ef4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ef8:	b672      	cpsid	i
}
 8000efa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000efc:	e7fe      	b.n	8000efc <Error_Handler+0x8>

08000efe <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8000efe:	b480      	push	{r7}
 8000f00:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8000f02:	bf00      	nop
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b086      	sub	sp, #24
 8000f10:	af04      	add	r7, sp, #16
 8000f12:	4603      	mov	r3, r0
 8000f14:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT3, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000f16:	f04f 33ff 	mov.w	r3, #4294967295
 8000f1a:	9302      	str	r3, [sp, #8]
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	9301      	str	r3, [sp, #4]
 8000f20:	1dfb      	adds	r3, r7, #7
 8000f22:	9300      	str	r3, [sp, #0]
 8000f24:	2301      	movs	r3, #1
 8000f26:	2200      	movs	r2, #0
 8000f28:	2178      	movs	r1, #120	; 0x78
 8000f2a:	4803      	ldr	r0, [pc, #12]	; (8000f38 <ssd1306_WriteCommand+0x2c>)
 8000f2c:	f002 f8c6 	bl	80030bc <HAL_I2C_Mem_Write>
}
 8000f30:	bf00      	nop
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20000078 	.word	0x20000078

08000f3c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af04      	add	r7, sp, #16
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT3, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	f04f 32ff 	mov.w	r2, #4294967295
 8000f4e:	9202      	str	r2, [sp, #8]
 8000f50:	9301      	str	r3, [sp, #4]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	9300      	str	r3, [sp, #0]
 8000f56:	2301      	movs	r3, #1
 8000f58:	2240      	movs	r2, #64	; 0x40
 8000f5a:	2178      	movs	r1, #120	; 0x78
 8000f5c:	4803      	ldr	r0, [pc, #12]	; (8000f6c <ssd1306_WriteData+0x30>)
 8000f5e:	f002 f8ad 	bl	80030bc <HAL_I2C_Mem_Write>
}
 8000f62:	bf00      	nop
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000078 	.word	0x20000078

08000f70 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000f74:	f7ff ffc3 	bl	8000efe <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000f78:	2064      	movs	r0, #100	; 0x64
 8000f7a:	f001 fccd 	bl	8002918 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000f7e:	2000      	movs	r0, #0
 8000f80:	f000 ff7a 	bl	8001e78 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000f84:	2020      	movs	r0, #32
 8000f86:	f7ff ffc1 	bl	8000f0c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000f8a:	2000      	movs	r0, #0
 8000f8c:	f7ff ffbe 	bl	8000f0c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000f90:	20b0      	movs	r0, #176	; 0xb0
 8000f92:	f7ff ffbb 	bl	8000f0c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000f96:	20c8      	movs	r0, #200	; 0xc8
 8000f98:	f7ff ffb8 	bl	8000f0c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000f9c:	2000      	movs	r0, #0
 8000f9e:	f7ff ffb5 	bl	8000f0c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000fa2:	2010      	movs	r0, #16
 8000fa4:	f7ff ffb2 	bl	8000f0c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000fa8:	2040      	movs	r0, #64	; 0x40
 8000faa:	f7ff ffaf 	bl	8000f0c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000fae:	20ff      	movs	r0, #255	; 0xff
 8000fb0:	f000 ff4f 	bl	8001e52 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000fb4:	20a1      	movs	r0, #161	; 0xa1
 8000fb6:	f7ff ffa9 	bl	8000f0c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000fba:	20a6      	movs	r0, #166	; 0xa6
 8000fbc:	f7ff ffa6 	bl	8000f0c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000fc0:	20a8      	movs	r0, #168	; 0xa8
 8000fc2:	f7ff ffa3 	bl	8000f0c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8000fc6:	203f      	movs	r0, #63	; 0x3f
 8000fc8:	f7ff ffa0 	bl	8000f0c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000fcc:	20a4      	movs	r0, #164	; 0xa4
 8000fce:	f7ff ff9d 	bl	8000f0c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000fd2:	20d3      	movs	r0, #211	; 0xd3
 8000fd4:	f7ff ff9a 	bl	8000f0c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000fd8:	2000      	movs	r0, #0
 8000fda:	f7ff ff97 	bl	8000f0c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000fde:	20d5      	movs	r0, #213	; 0xd5
 8000fe0:	f7ff ff94 	bl	8000f0c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000fe4:	20f0      	movs	r0, #240	; 0xf0
 8000fe6:	f7ff ff91 	bl	8000f0c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000fea:	20d9      	movs	r0, #217	; 0xd9
 8000fec:	f7ff ff8e 	bl	8000f0c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000ff0:	2022      	movs	r0, #34	; 0x22
 8000ff2:	f7ff ff8b 	bl	8000f0c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000ff6:	20da      	movs	r0, #218	; 0xda
 8000ff8:	f7ff ff88 	bl	8000f0c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8000ffc:	2012      	movs	r0, #18
 8000ffe:	f7ff ff85 	bl	8000f0c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001002:	20db      	movs	r0, #219	; 0xdb
 8001004:	f7ff ff82 	bl	8000f0c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001008:	2020      	movs	r0, #32
 800100a:	f7ff ff7f 	bl	8000f0c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800100e:	208d      	movs	r0, #141	; 0x8d
 8001010:	f7ff ff7c 	bl	8000f0c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001014:	2014      	movs	r0, #20
 8001016:	f7ff ff79 	bl	8000f0c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800101a:	2001      	movs	r0, #1
 800101c:	f000 ff2c 	bl	8001e78 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001020:	2000      	movs	r0, #0
 8001022:	f000 f80f 	bl	8001044 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001026:	f000 f825 	bl	8001074 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800102a:	4b05      	ldr	r3, [pc, #20]	; (8001040 <ssd1306_Init+0xd0>)
 800102c:	2200      	movs	r2, #0
 800102e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001030:	4b03      	ldr	r3, [pc, #12]	; (8001040 <ssd1306_Init+0xd0>)
 8001032:	2200      	movs	r2, #0
 8001034:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001036:	4b02      	ldr	r3, [pc, #8]	; (8001040 <ssd1306_Init+0xd0>)
 8001038:	2201      	movs	r2, #1
 800103a:	711a      	strb	r2, [r3, #4]
}
 800103c:	bf00      	nop
 800103e:	bd80      	pop	{r7, pc}
 8001040:	200004cc 	.word	0x200004cc

08001044 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d101      	bne.n	8001058 <ssd1306_Fill+0x14>
 8001054:	2300      	movs	r3, #0
 8001056:	e000      	b.n	800105a <ssd1306_Fill+0x16>
 8001058:	23ff      	movs	r3, #255	; 0xff
 800105a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800105e:	4619      	mov	r1, r3
 8001060:	4803      	ldr	r0, [pc, #12]	; (8001070 <ssd1306_Fill+0x2c>)
 8001062:	f002 ffd5 	bl	8004010 <memset>
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	200000cc 	.word	0x200000cc

08001074 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800107a:	2300      	movs	r3, #0
 800107c:	71fb      	strb	r3, [r7, #7]
 800107e:	e016      	b.n	80010ae <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	3b50      	subs	r3, #80	; 0x50
 8001084:	b2db      	uxtb	r3, r3
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff ff40 	bl	8000f0c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 800108c:	2000      	movs	r0, #0
 800108e:	f7ff ff3d 	bl	8000f0c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001092:	2010      	movs	r0, #16
 8001094:	f7ff ff3a 	bl	8000f0c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001098:	79fb      	ldrb	r3, [r7, #7]
 800109a:	01db      	lsls	r3, r3, #7
 800109c:	4a08      	ldr	r2, [pc, #32]	; (80010c0 <ssd1306_UpdateScreen+0x4c>)
 800109e:	4413      	add	r3, r2
 80010a0:	2180      	movs	r1, #128	; 0x80
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff ff4a 	bl	8000f3c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80010a8:	79fb      	ldrb	r3, [r7, #7]
 80010aa:	3301      	adds	r3, #1
 80010ac:	71fb      	strb	r3, [r7, #7]
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	2b07      	cmp	r3, #7
 80010b2:	d9e5      	bls.n	8001080 <ssd1306_UpdateScreen+0xc>
    }
}
 80010b4:	bf00      	nop
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	200000cc 	.word	0x200000cc

080010c4 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	71fb      	strb	r3, [r7, #7]
 80010ce:	460b      	mov	r3, r1
 80010d0:	71bb      	strb	r3, [r7, #6]
 80010d2:	4613      	mov	r3, r2
 80010d4:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80010d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	db3d      	blt.n	800115a <ssd1306_DrawPixel+0x96>
 80010de:	79bb      	ldrb	r3, [r7, #6]
 80010e0:	2b3f      	cmp	r3, #63	; 0x3f
 80010e2:	d83a      	bhi.n	800115a <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80010e4:	797b      	ldrb	r3, [r7, #5]
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d11a      	bne.n	8001120 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80010ea:	79fa      	ldrb	r2, [r7, #7]
 80010ec:	79bb      	ldrb	r3, [r7, #6]
 80010ee:	08db      	lsrs	r3, r3, #3
 80010f0:	b2d8      	uxtb	r0, r3
 80010f2:	4603      	mov	r3, r0
 80010f4:	01db      	lsls	r3, r3, #7
 80010f6:	4413      	add	r3, r2
 80010f8:	4a1b      	ldr	r2, [pc, #108]	; (8001168 <ssd1306_DrawPixel+0xa4>)
 80010fa:	5cd3      	ldrb	r3, [r2, r3]
 80010fc:	b25a      	sxtb	r2, r3
 80010fe:	79bb      	ldrb	r3, [r7, #6]
 8001100:	f003 0307 	and.w	r3, r3, #7
 8001104:	2101      	movs	r1, #1
 8001106:	fa01 f303 	lsl.w	r3, r1, r3
 800110a:	b25b      	sxtb	r3, r3
 800110c:	4313      	orrs	r3, r2
 800110e:	b259      	sxtb	r1, r3
 8001110:	79fa      	ldrb	r2, [r7, #7]
 8001112:	4603      	mov	r3, r0
 8001114:	01db      	lsls	r3, r3, #7
 8001116:	4413      	add	r3, r2
 8001118:	b2c9      	uxtb	r1, r1
 800111a:	4a13      	ldr	r2, [pc, #76]	; (8001168 <ssd1306_DrawPixel+0xa4>)
 800111c:	54d1      	strb	r1, [r2, r3]
 800111e:	e01d      	b.n	800115c <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001120:	79fa      	ldrb	r2, [r7, #7]
 8001122:	79bb      	ldrb	r3, [r7, #6]
 8001124:	08db      	lsrs	r3, r3, #3
 8001126:	b2d8      	uxtb	r0, r3
 8001128:	4603      	mov	r3, r0
 800112a:	01db      	lsls	r3, r3, #7
 800112c:	4413      	add	r3, r2
 800112e:	4a0e      	ldr	r2, [pc, #56]	; (8001168 <ssd1306_DrawPixel+0xa4>)
 8001130:	5cd3      	ldrb	r3, [r2, r3]
 8001132:	b25a      	sxtb	r2, r3
 8001134:	79bb      	ldrb	r3, [r7, #6]
 8001136:	f003 0307 	and.w	r3, r3, #7
 800113a:	2101      	movs	r1, #1
 800113c:	fa01 f303 	lsl.w	r3, r1, r3
 8001140:	b25b      	sxtb	r3, r3
 8001142:	43db      	mvns	r3, r3
 8001144:	b25b      	sxtb	r3, r3
 8001146:	4013      	ands	r3, r2
 8001148:	b259      	sxtb	r1, r3
 800114a:	79fa      	ldrb	r2, [r7, #7]
 800114c:	4603      	mov	r3, r0
 800114e:	01db      	lsls	r3, r3, #7
 8001150:	4413      	add	r3, r2
 8001152:	b2c9      	uxtb	r1, r1
 8001154:	4a04      	ldr	r2, [pc, #16]	; (8001168 <ssd1306_DrawPixel+0xa4>)
 8001156:	54d1      	strb	r1, [r2, r3]
 8001158:	e000      	b.n	800115c <ssd1306_DrawPixel+0x98>
        return;
 800115a:	bf00      	nop
    }
}
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	200000cc 	.word	0x200000cc

0800116c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 800116c:	b590      	push	{r4, r7, lr}
 800116e:	b089      	sub	sp, #36	; 0x24
 8001170:	af00      	add	r7, sp, #0
 8001172:	4604      	mov	r4, r0
 8001174:	4638      	mov	r0, r7
 8001176:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800117a:	4623      	mov	r3, r4
 800117c:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800117e:	7bfb      	ldrb	r3, [r7, #15]
 8001180:	2b1f      	cmp	r3, #31
 8001182:	d902      	bls.n	800118a <ssd1306_WriteChar+0x1e>
 8001184:	7bfb      	ldrb	r3, [r7, #15]
 8001186:	2b7e      	cmp	r3, #126	; 0x7e
 8001188:	d901      	bls.n	800118e <ssd1306_WriteChar+0x22>
        return 0;
 800118a:	2300      	movs	r3, #0
 800118c:	e079      	b.n	8001282 <ssd1306_WriteChar+0x116>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 800118e:	4b3f      	ldr	r3, [pc, #252]	; (800128c <ssd1306_WriteChar+0x120>)
 8001190:	881b      	ldrh	r3, [r3, #0]
 8001192:	461a      	mov	r2, r3
 8001194:	783b      	ldrb	r3, [r7, #0]
 8001196:	4413      	add	r3, r2
 8001198:	2b80      	cmp	r3, #128	; 0x80
 800119a:	dc06      	bgt.n	80011aa <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 800119c:	4b3b      	ldr	r3, [pc, #236]	; (800128c <ssd1306_WriteChar+0x120>)
 800119e:	885b      	ldrh	r3, [r3, #2]
 80011a0:	461a      	mov	r2, r3
 80011a2:	787b      	ldrb	r3, [r7, #1]
 80011a4:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 80011a6:	2b40      	cmp	r3, #64	; 0x40
 80011a8:	dd01      	ble.n	80011ae <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 80011aa:	2300      	movs	r3, #0
 80011ac:	e069      	b.n	8001282 <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 80011ae:	2300      	movs	r3, #0
 80011b0:	61fb      	str	r3, [r7, #28]
 80011b2:	e04e      	b.n	8001252 <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 80011b4:	687a      	ldr	r2, [r7, #4]
 80011b6:	7bfb      	ldrb	r3, [r7, #15]
 80011b8:	3b20      	subs	r3, #32
 80011ba:	7879      	ldrb	r1, [r7, #1]
 80011bc:	fb01 f303 	mul.w	r3, r1, r3
 80011c0:	4619      	mov	r1, r3
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	440b      	add	r3, r1
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	4413      	add	r3, r2
 80011ca:	881b      	ldrh	r3, [r3, #0]
 80011cc:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 80011ce:	2300      	movs	r3, #0
 80011d0:	61bb      	str	r3, [r7, #24]
 80011d2:	e036      	b.n	8001242 <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 80011d4:	697a      	ldr	r2, [r7, #20]
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d013      	beq.n	800120c <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80011e4:	4b29      	ldr	r3, [pc, #164]	; (800128c <ssd1306_WriteChar+0x120>)
 80011e6:	881b      	ldrh	r3, [r3, #0]
 80011e8:	b2da      	uxtb	r2, r3
 80011ea:	69bb      	ldr	r3, [r7, #24]
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	4413      	add	r3, r2
 80011f0:	b2d8      	uxtb	r0, r3
 80011f2:	4b26      	ldr	r3, [pc, #152]	; (800128c <ssd1306_WriteChar+0x120>)
 80011f4:	885b      	ldrh	r3, [r3, #2]
 80011f6:	b2da      	uxtb	r2, r3
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	4413      	add	r3, r2
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001204:	4619      	mov	r1, r3
 8001206:	f7ff ff5d 	bl	80010c4 <ssd1306_DrawPixel>
 800120a:	e017      	b.n	800123c <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800120c:	4b1f      	ldr	r3, [pc, #124]	; (800128c <ssd1306_WriteChar+0x120>)
 800120e:	881b      	ldrh	r3, [r3, #0]
 8001210:	b2da      	uxtb	r2, r3
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	b2db      	uxtb	r3, r3
 8001216:	4413      	add	r3, r2
 8001218:	b2d8      	uxtb	r0, r3
 800121a:	4b1c      	ldr	r3, [pc, #112]	; (800128c <ssd1306_WriteChar+0x120>)
 800121c:	885b      	ldrh	r3, [r3, #2]
 800121e:	b2da      	uxtb	r2, r3
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	b2db      	uxtb	r3, r3
 8001224:	4413      	add	r3, r2
 8001226:	b2d9      	uxtb	r1, r3
 8001228:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800122c:	2b00      	cmp	r3, #0
 800122e:	bf0c      	ite	eq
 8001230:	2301      	moveq	r3, #1
 8001232:	2300      	movne	r3, #0
 8001234:	b2db      	uxtb	r3, r3
 8001236:	461a      	mov	r2, r3
 8001238:	f7ff ff44 	bl	80010c4 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	3301      	adds	r3, #1
 8001240:	61bb      	str	r3, [r7, #24]
 8001242:	783b      	ldrb	r3, [r7, #0]
 8001244:	461a      	mov	r2, r3
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	4293      	cmp	r3, r2
 800124a:	d3c3      	bcc.n	80011d4 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	3301      	adds	r3, #1
 8001250:	61fb      	str	r3, [r7, #28]
 8001252:	787b      	ldrb	r3, [r7, #1]
 8001254:	461a      	mov	r2, r3
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	4293      	cmp	r3, r2
 800125a:	d3ab      	bcc.n	80011b4 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 800125c:	4b0b      	ldr	r3, [pc, #44]	; (800128c <ssd1306_WriteChar+0x120>)
 800125e:	881a      	ldrh	r2, [r3, #0]
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d006      	beq.n	8001274 <ssd1306_WriteChar+0x108>
 8001266:	68b9      	ldr	r1, [r7, #8]
 8001268:	7bfb      	ldrb	r3, [r7, #15]
 800126a:	3b20      	subs	r3, #32
 800126c:	440b      	add	r3, r1
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	b29b      	uxth	r3, r3
 8001272:	e001      	b.n	8001278 <ssd1306_WriteChar+0x10c>
 8001274:	783b      	ldrb	r3, [r7, #0]
 8001276:	b29b      	uxth	r3, r3
 8001278:	4413      	add	r3, r2
 800127a:	b29a      	uxth	r2, r3
 800127c:	4b03      	ldr	r3, [pc, #12]	; (800128c <ssd1306_WriteChar+0x120>)
 800127e:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001280:	7bfb      	ldrb	r3, [r7, #15]
}
 8001282:	4618      	mov	r0, r3
 8001284:	3724      	adds	r7, #36	; 0x24
 8001286:	46bd      	mov	sp, r7
 8001288:	bd90      	pop	{r4, r7, pc}
 800128a:	bf00      	nop
 800128c:	200004cc 	.word	0x200004cc

08001290 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af02      	add	r7, sp, #8
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	4638      	mov	r0, r7
 800129a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 800129e:	e013      	b.n	80012c8 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	7818      	ldrb	r0, [r3, #0]
 80012a4:	7e3b      	ldrb	r3, [r7, #24]
 80012a6:	9300      	str	r3, [sp, #0]
 80012a8:	463b      	mov	r3, r7
 80012aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012ac:	f7ff ff5e 	bl	800116c <ssd1306_WriteChar>
 80012b0:	4603      	mov	r3, r0
 80012b2:	461a      	mov	r2, r3
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d002      	beq.n	80012c2 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	e008      	b.n	80012d4 <ssd1306_WriteString+0x44>
        }
        str++;
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	3301      	adds	r3, #1
 80012c6:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d1e7      	bne.n	80012a0 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	781b      	ldrb	r3, [r3, #0]
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3710      	adds	r7, #16
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}

080012dc <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	460a      	mov	r2, r1
 80012e6:	71fb      	strb	r3, [r7, #7]
 80012e8:	4613      	mov	r3, r2
 80012ea:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80012ec:	79fb      	ldrb	r3, [r7, #7]
 80012ee:	b29a      	uxth	r2, r3
 80012f0:	4b05      	ldr	r3, [pc, #20]	; (8001308 <ssd1306_SetCursor+0x2c>)
 80012f2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80012f4:	79bb      	ldrb	r3, [r7, #6]
 80012f6:	b29a      	uxth	r2, r3
 80012f8:	4b03      	ldr	r3, [pc, #12]	; (8001308 <ssd1306_SetCursor+0x2c>)
 80012fa:	805a      	strh	r2, [r3, #2]
}
 80012fc:	bf00      	nop
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr
 8001308:	200004cc 	.word	0x200004cc

0800130c <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 800130c:	b590      	push	{r4, r7, lr}
 800130e:	b089      	sub	sp, #36	; 0x24
 8001310:	af00      	add	r7, sp, #0
 8001312:	4604      	mov	r4, r0
 8001314:	4608      	mov	r0, r1
 8001316:	4611      	mov	r1, r2
 8001318:	461a      	mov	r2, r3
 800131a:	4623      	mov	r3, r4
 800131c:	71fb      	strb	r3, [r7, #7]
 800131e:	4603      	mov	r3, r0
 8001320:	71bb      	strb	r3, [r7, #6]
 8001322:	460b      	mov	r3, r1
 8001324:	717b      	strb	r3, [r7, #5]
 8001326:	4613      	mov	r3, r2
 8001328:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 800132a:	797a      	ldrb	r2, [r7, #5]
 800132c:	79fb      	ldrb	r3, [r7, #7]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	2b00      	cmp	r3, #0
 8001332:	bfb8      	it	lt
 8001334:	425b      	neglt	r3, r3
 8001336:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 8001338:	793a      	ldrb	r2, [r7, #4]
 800133a:	79bb      	ldrb	r3, [r7, #6]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	2b00      	cmp	r3, #0
 8001340:	bfb8      	it	lt
 8001342:	425b      	neglt	r3, r3
 8001344:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 8001346:	79fa      	ldrb	r2, [r7, #7]
 8001348:	797b      	ldrb	r3, [r7, #5]
 800134a:	429a      	cmp	r2, r3
 800134c:	d201      	bcs.n	8001352 <ssd1306_Line+0x46>
 800134e:	2301      	movs	r3, #1
 8001350:	e001      	b.n	8001356 <ssd1306_Line+0x4a>
 8001352:	f04f 33ff 	mov.w	r3, #4294967295
 8001356:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 8001358:	79ba      	ldrb	r2, [r7, #6]
 800135a:	793b      	ldrb	r3, [r7, #4]
 800135c:	429a      	cmp	r2, r3
 800135e:	d201      	bcs.n	8001364 <ssd1306_Line+0x58>
 8001360:	2301      	movs	r3, #1
 8001362:	e001      	b.n	8001368 <ssd1306_Line+0x5c>
 8001364:	f04f 33ff 	mov.w	r3, #4294967295
 8001368:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 8001372:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001376:	7939      	ldrb	r1, [r7, #4]
 8001378:	797b      	ldrb	r3, [r7, #5]
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff fea2 	bl	80010c4 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 8001380:	e024      	b.n	80013cc <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 8001382:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001386:	79b9      	ldrb	r1, [r7, #6]
 8001388:	79fb      	ldrb	r3, [r7, #7]
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff fe9a 	bl	80010c4 <ssd1306_DrawPixel>
        error2 = error * 2;
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	425b      	negs	r3, r3
 800139a:	68ba      	ldr	r2, [r7, #8]
 800139c:	429a      	cmp	r2, r3
 800139e:	dd08      	ble.n	80013b2 <ssd1306_Line+0xa6>
            error -= deltaY;
 80013a0:	69fa      	ldr	r2, [r7, #28]
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	b2da      	uxtb	r2, r3
 80013ac:	79fb      	ldrb	r3, [r7, #7]
 80013ae:	4413      	add	r3, r2
 80013b0:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 80013b2:	68ba      	ldr	r2, [r7, #8]
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	429a      	cmp	r2, r3
 80013b8:	da08      	bge.n	80013cc <ssd1306_Line+0xc0>
            error += deltaX;
 80013ba:	69fa      	ldr	r2, [r7, #28]
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	4413      	add	r3, r2
 80013c0:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	b2da      	uxtb	r2, r3
 80013c6:	79bb      	ldrb	r3, [r7, #6]
 80013c8:	4413      	add	r3, r2
 80013ca:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 80013cc:	79fa      	ldrb	r2, [r7, #7]
 80013ce:	797b      	ldrb	r3, [r7, #5]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d1d6      	bne.n	8001382 <ssd1306_Line+0x76>
 80013d4:	79ba      	ldrb	r2, [r7, #6]
 80013d6:	793b      	ldrb	r3, [r7, #4]
 80013d8:	429a      	cmp	r2, r3
 80013da:	d1d2      	bne.n	8001382 <ssd1306_Line+0x76>
        }
    }
    return;
 80013dc:	bf00      	nop
}
 80013de:	3724      	adds	r7, #36	; 0x24
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd90      	pop	{r4, r7, pc}

080013e4 <ssd1306_Polyline>:

/* Draw polyline */
void ssd1306_Polyline(const SSD1306_VERTEX *par_vertex, uint16_t par_size, SSD1306_COLOR color) {
 80013e4:	b590      	push	{r4, r7, lr}
 80013e6:	b087      	sub	sp, #28
 80013e8:	af02      	add	r7, sp, #8
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	460b      	mov	r3, r1
 80013ee:	807b      	strh	r3, [r7, #2]
 80013f0:	4613      	mov	r3, r2
 80013f2:	707b      	strb	r3, [r7, #1]
    uint16_t i;
    if(par_vertex == NULL) {
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d02a      	beq.n	8001450 <ssd1306_Polyline+0x6c>
        return;
    }

    for(i = 1; i < par_size; i++) {
 80013fa:	2301      	movs	r3, #1
 80013fc:	81fb      	strh	r3, [r7, #14]
 80013fe:	e022      	b.n	8001446 <ssd1306_Polyline+0x62>
        ssd1306_Line(par_vertex[i - 1].x, par_vertex[i - 1].y, par_vertex[i].x, par_vertex[i].y, color);
 8001400:	89fb      	ldrh	r3, [r7, #14]
 8001402:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8001406:	3b01      	subs	r3, #1
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	4413      	add	r3, r2
 800140e:	7818      	ldrb	r0, [r3, #0]
 8001410:	89fb      	ldrh	r3, [r7, #14]
 8001412:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8001416:	3b01      	subs	r3, #1
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	4413      	add	r3, r2
 800141e:	7859      	ldrb	r1, [r3, #1]
 8001420:	89fb      	ldrh	r3, [r7, #14]
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	687a      	ldr	r2, [r7, #4]
 8001426:	4413      	add	r3, r2
 8001428:	781c      	ldrb	r4, [r3, #0]
 800142a:	89fb      	ldrh	r3, [r7, #14]
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	4413      	add	r3, r2
 8001432:	785a      	ldrb	r2, [r3, #1]
 8001434:	787b      	ldrb	r3, [r7, #1]
 8001436:	9300      	str	r3, [sp, #0]
 8001438:	4613      	mov	r3, r2
 800143a:	4622      	mov	r2, r4
 800143c:	f7ff ff66 	bl	800130c <ssd1306_Line>
    for(i = 1; i < par_size; i++) {
 8001440:	89fb      	ldrh	r3, [r7, #14]
 8001442:	3301      	adds	r3, #1
 8001444:	81fb      	strh	r3, [r7, #14]
 8001446:	89fa      	ldrh	r2, [r7, #14]
 8001448:	887b      	ldrh	r3, [r7, #2]
 800144a:	429a      	cmp	r2, r3
 800144c:	d3d8      	bcc.n	8001400 <ssd1306_Polyline+0x1c>
    }

    return;
 800144e:	e000      	b.n	8001452 <ssd1306_Polyline+0x6e>
        return;
 8001450:	bf00      	nop
}
 8001452:	3714      	adds	r7, #20
 8001454:	46bd      	mov	sp, r7
 8001456:	bd90      	pop	{r4, r7, pc}

08001458 <ssd1306_DegToRad>:

/* Convert Degrees to Radians */
static float ssd1306_DegToRad(float par_deg) {
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	ed87 0a01 	vstr	s0, [r7, #4]
    return par_deg * (3.14f / 180.0f);
 8001462:	edd7 7a01 	vldr	s15, [r7, #4]
 8001466:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800147c <ssd1306_DegToRad+0x24>
 800146a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800146e:	eeb0 0a67 	vmov.f32	s0, s15
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	3c8ee7a7 	.word	0x3c8ee7a7

08001480 <ssd1306_NormalizeTo0_360>:

/* Normalize degree to [0;360] */
static uint16_t ssd1306_NormalizeTo0_360(uint16_t par_deg) {
 8001480:	b480      	push	{r7}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	80fb      	strh	r3, [r7, #6]
    uint16_t loc_angle;
    if(par_deg <= 360) {
 800148a:	88fb      	ldrh	r3, [r7, #6]
 800148c:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8001490:	d802      	bhi.n	8001498 <ssd1306_NormalizeTo0_360+0x18>
        loc_angle = par_deg;
 8001492:	88fb      	ldrh	r3, [r7, #6]
 8001494:	81fb      	strh	r3, [r7, #14]
 8001496:	e013      	b.n	80014c0 <ssd1306_NormalizeTo0_360+0x40>
    } else {
        loc_angle = par_deg % 360;
 8001498:	88fb      	ldrh	r3, [r7, #6]
 800149a:	08da      	lsrs	r2, r3, #3
 800149c:	490c      	ldr	r1, [pc, #48]	; (80014d0 <ssd1306_NormalizeTo0_360+0x50>)
 800149e:	fba1 1202 	umull	r1, r2, r1, r2
 80014a2:	0892      	lsrs	r2, r2, #2
 80014a4:	f44f 71b4 	mov.w	r1, #360	; 0x168
 80014a8:	fb01 f202 	mul.w	r2, r1, r2
 80014ac:	1a9b      	subs	r3, r3, r2
 80014ae:	81fb      	strh	r3, [r7, #14]
        loc_angle = (loc_angle ? loc_angle : 360);
 80014b0:	89fb      	ldrh	r3, [r7, #14]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <ssd1306_NormalizeTo0_360+0x3a>
 80014b6:	89fb      	ldrh	r3, [r7, #14]
 80014b8:	e001      	b.n	80014be <ssd1306_NormalizeTo0_360+0x3e>
 80014ba:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80014be:	81fb      	strh	r3, [r7, #14]
    }
    return loc_angle;
 80014c0:	89fb      	ldrh	r3, [r7, #14]
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3714      	adds	r7, #20
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	16c16c17 	.word	0x16c16c17

080014d4 <ssd1306_DrawArc>:
/*
 * DrawArc. Draw angle is beginning from 4 quart of trigonometric circle (3pi/2)
 * start_angle in degree
 * sweep in degree
 */
void ssd1306_DrawArc(uint8_t x, uint8_t y, uint8_t radius, uint16_t start_angle, uint16_t sweep, SSD1306_COLOR color) {
 80014d4:	b590      	push	{r4, r7, lr}
 80014d6:	b08d      	sub	sp, #52	; 0x34
 80014d8:	af02      	add	r7, sp, #8
 80014da:	4604      	mov	r4, r0
 80014dc:	4608      	mov	r0, r1
 80014de:	4611      	mov	r1, r2
 80014e0:	461a      	mov	r2, r3
 80014e2:	4623      	mov	r3, r4
 80014e4:	73fb      	strb	r3, [r7, #15]
 80014e6:	4603      	mov	r3, r0
 80014e8:	73bb      	strb	r3, [r7, #14]
 80014ea:	460b      	mov	r3, r1
 80014ec:	737b      	strb	r3, [r7, #13]
 80014ee:	4613      	mov	r3, r2
 80014f0:	817b      	strh	r3, [r7, #10]
    uint8_t yp1,yp2;
    uint32_t count;
    uint32_t loc_sweep;
    float rad;
    
    loc_sweep = ssd1306_NormalizeTo0_360(sweep);
 80014f2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff ffc3 	bl	8001480 <ssd1306_NormalizeTo0_360>
 80014fa:	4603      	mov	r3, r0
 80014fc:	61fb      	str	r3, [r7, #28]
    
    count = (ssd1306_NormalizeTo0_360(start_angle) * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 80014fe:	897b      	ldrh	r3, [r7, #10]
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff ffbd 	bl	8001480 <ssd1306_NormalizeTo0_360>
 8001506:	4603      	mov	r3, r0
 8001508:	461a      	mov	r2, r3
 800150a:	4b63      	ldr	r3, [pc, #396]	; (8001698 <ssd1306_DrawArc+0x1c4>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	fb02 f303 	mul.w	r3, r2, r3
 8001512:	4a62      	ldr	r2, [pc, #392]	; (800169c <ssd1306_DrawArc+0x1c8>)
 8001514:	fb82 1203 	smull	r1, r2, r2, r3
 8001518:	441a      	add	r2, r3
 800151a:	1212      	asrs	r2, r2, #8
 800151c:	17db      	asrs	r3, r3, #31
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	627b      	str	r3, [r7, #36]	; 0x24
    approx_segments = (loc_sweep * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 8001522:	4b5d      	ldr	r3, [pc, #372]	; (8001698 <ssd1306_DrawArc+0x1c4>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	461a      	mov	r2, r3
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	fb02 f303 	mul.w	r3, r2, r3
 800152e:	08db      	lsrs	r3, r3, #3
 8001530:	4a5b      	ldr	r2, [pc, #364]	; (80016a0 <ssd1306_DrawArc+0x1cc>)
 8001532:	fba2 2303 	umull	r2, r3, r2, r3
 8001536:	089b      	lsrs	r3, r3, #2
 8001538:	61bb      	str	r3, [r7, #24]
    approx_degree = loc_sweep / (float)approx_segments;
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	ee07 3a90 	vmov	s15, r3
 8001540:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	ee07 3a90 	vmov	s15, r3
 800154a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800154e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001552:	edc7 7a05 	vstr	s15, [r7, #20]
    while(count < approx_segments)
 8001556:	e096      	b.n	8001686 <ssd1306_DrawArc+0x1b2>
    {
        rad = ssd1306_DegToRad(count*approx_degree);
 8001558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155a:	ee07 3a90 	vmov	s15, r3
 800155e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001562:	edd7 7a05 	vldr	s15, [r7, #20]
 8001566:	ee67 7a27 	vmul.f32	s15, s14, s15
 800156a:	eeb0 0a67 	vmov.f32	s0, s15
 800156e:	f7ff ff73 	bl	8001458 <ssd1306_DegToRad>
 8001572:	ed87 0a08 	vstr	s0, [r7, #32]
        xp1 = x + (int8_t)(sinf(rad)*radius);
 8001576:	ed97 0a08 	vldr	s0, [r7, #32]
 800157a:	f003 f9f7 	bl	800496c <sinf>
 800157e:	eeb0 7a40 	vmov.f32	s14, s0
 8001582:	7b7b      	ldrb	r3, [r7, #13]
 8001584:	ee07 3a90 	vmov	s15, r3
 8001588:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800158c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001590:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001594:	edc7 7a01 	vstr	s15, [r7, #4]
 8001598:	793b      	ldrb	r3, [r7, #4]
 800159a:	b25b      	sxtb	r3, r3
 800159c:	b2da      	uxtb	r2, r3
 800159e:	7bfb      	ldrb	r3, [r7, #15]
 80015a0:	4413      	add	r3, r2
 80015a2:	74fb      	strb	r3, [r7, #19]
        yp1 = y + (int8_t)(cosf(rad)*radius);    
 80015a4:	ed97 0a08 	vldr	s0, [r7, #32]
 80015a8:	f003 f99c 	bl	80048e4 <cosf>
 80015ac:	eeb0 7a40 	vmov.f32	s14, s0
 80015b0:	7b7b      	ldrb	r3, [r7, #13]
 80015b2:	ee07 3a90 	vmov	s15, r3
 80015b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015c2:	edc7 7a01 	vstr	s15, [r7, #4]
 80015c6:	793b      	ldrb	r3, [r7, #4]
 80015c8:	b25b      	sxtb	r3, r3
 80015ca:	b2da      	uxtb	r2, r3
 80015cc:	7bbb      	ldrb	r3, [r7, #14]
 80015ce:	4413      	add	r3, r2
 80015d0:	74bb      	strb	r3, [r7, #18]
        count++;
 80015d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d4:	3301      	adds	r3, #1
 80015d6:	627b      	str	r3, [r7, #36]	; 0x24
        if(count != approx_segments) {
 80015d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d00f      	beq.n	8001600 <ssd1306_DrawArc+0x12c>
            rad = ssd1306_DegToRad(count*approx_degree);
 80015e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e2:	ee07 3a90 	vmov	s15, r3
 80015e6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80015ea:	edd7 7a05 	vldr	s15, [r7, #20]
 80015ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015f2:	eeb0 0a67 	vmov.f32	s0, s15
 80015f6:	f7ff ff2f 	bl	8001458 <ssd1306_DegToRad>
 80015fa:	ed87 0a08 	vstr	s0, [r7, #32]
 80015fe:	e00a      	b.n	8001616 <ssd1306_DrawArc+0x142>
        } else {
            rad = ssd1306_DegToRad(loc_sweep);
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	ee07 3a90 	vmov	s15, r3
 8001606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800160a:	eeb0 0a67 	vmov.f32	s0, s15
 800160e:	f7ff ff23 	bl	8001458 <ssd1306_DegToRad>
 8001612:	ed87 0a08 	vstr	s0, [r7, #32]
        }
        xp2 = x + (int8_t)(sinf(rad)*radius);
 8001616:	ed97 0a08 	vldr	s0, [r7, #32]
 800161a:	f003 f9a7 	bl	800496c <sinf>
 800161e:	eeb0 7a40 	vmov.f32	s14, s0
 8001622:	7b7b      	ldrb	r3, [r7, #13]
 8001624:	ee07 3a90 	vmov	s15, r3
 8001628:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800162c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001630:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001634:	edc7 7a01 	vstr	s15, [r7, #4]
 8001638:	793b      	ldrb	r3, [r7, #4]
 800163a:	b25b      	sxtb	r3, r3
 800163c:	b2da      	uxtb	r2, r3
 800163e:	7bfb      	ldrb	r3, [r7, #15]
 8001640:	4413      	add	r3, r2
 8001642:	747b      	strb	r3, [r7, #17]
        yp2 = y + (int8_t)(cosf(rad)*radius);    
 8001644:	ed97 0a08 	vldr	s0, [r7, #32]
 8001648:	f003 f94c 	bl	80048e4 <cosf>
 800164c:	eeb0 7a40 	vmov.f32	s14, s0
 8001650:	7b7b      	ldrb	r3, [r7, #13]
 8001652:	ee07 3a90 	vmov	s15, r3
 8001656:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800165a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800165e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001662:	edc7 7a01 	vstr	s15, [r7, #4]
 8001666:	793b      	ldrb	r3, [r7, #4]
 8001668:	b25b      	sxtb	r3, r3
 800166a:	b2da      	uxtb	r2, r3
 800166c:	7bbb      	ldrb	r3, [r7, #14]
 800166e:	4413      	add	r3, r2
 8001670:	743b      	strb	r3, [r7, #16]
        ssd1306_Line(xp1,yp1,xp2,yp2,color);
 8001672:	7c3c      	ldrb	r4, [r7, #16]
 8001674:	7c7a      	ldrb	r2, [r7, #17]
 8001676:	7cb9      	ldrb	r1, [r7, #18]
 8001678:	7cf8      	ldrb	r0, [r7, #19]
 800167a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800167e:	9300      	str	r3, [sp, #0]
 8001680:	4623      	mov	r3, r4
 8001682:	f7ff fe43 	bl	800130c <ssd1306_Line>
    while(count < approx_segments)
 8001686:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	429a      	cmp	r2, r3
 800168c:	f4ff af64 	bcc.w	8001558 <ssd1306_DrawArc+0x84>
    }
    
    return;
 8001690:	bf00      	nop
}
 8001692:	372c      	adds	r7, #44	; 0x2c
 8001694:	46bd      	mov	sp, r7
 8001696:	bd90      	pop	{r4, r7, pc}
 8001698:	080054be 	.word	0x080054be
 800169c:	b60b60b7 	.word	0xb60b60b7
 80016a0:	16c16c17 	.word	0x16c16c17

080016a4 <ssd1306_DrawArcWithRadiusLine>:
 * Draw arc with radius line
 * Angle is beginning from 4 quart of trigonometric circle (3pi/2)
 * start_angle: start angle in degree
 * sweep: finish angle in degree
 */
void ssd1306_DrawArcWithRadiusLine(uint8_t x, uint8_t y, uint8_t radius, uint16_t start_angle, uint16_t sweep, SSD1306_COLOR color) {
 80016a4:	b590      	push	{r4, r7, lr}
 80016a6:	b08f      	sub	sp, #60	; 0x3c
 80016a8:	af02      	add	r7, sp, #8
 80016aa:	4604      	mov	r4, r0
 80016ac:	4608      	mov	r0, r1
 80016ae:	4611      	mov	r1, r2
 80016b0:	461a      	mov	r2, r3
 80016b2:	4623      	mov	r3, r4
 80016b4:	73fb      	strb	r3, [r7, #15]
 80016b6:	4603      	mov	r3, r0
 80016b8:	73bb      	strb	r3, [r7, #14]
 80016ba:	460b      	mov	r3, r1
 80016bc:	737b      	strb	r3, [r7, #13]
 80016be:	4613      	mov	r3, r2
 80016c0:	817b      	strh	r3, [r7, #10]
    const uint32_t CIRCLE_APPROXIMATION_SEGMENTS = 36;
 80016c2:	2324      	movs	r3, #36	; 0x24
 80016c4:	623b      	str	r3, [r7, #32]
    float approx_degree;
    uint32_t approx_segments;
    uint8_t xp1;
    uint8_t xp2 = 0;
 80016c6:	2300      	movs	r3, #0
 80016c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint8_t yp1;
    uint8_t yp2 = 0;
 80016cc:	2300      	movs	r3, #0
 80016ce:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    uint32_t count;
    uint32_t loc_sweep;
    float rad;
    
    loc_sweep = ssd1306_NormalizeTo0_360(sweep);
 80016d2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7ff fed2 	bl	8001480 <ssd1306_NormalizeTo0_360>
 80016dc:	4603      	mov	r3, r0
 80016de:	61fb      	str	r3, [r7, #28]
    
    count = (ssd1306_NormalizeTo0_360(start_angle) * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 80016e0:	897b      	ldrh	r3, [r7, #10]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7ff fecc 	bl	8001480 <ssd1306_NormalizeTo0_360>
 80016e8:	4603      	mov	r3, r0
 80016ea:	461a      	mov	r2, r3
 80016ec:	6a3b      	ldr	r3, [r7, #32]
 80016ee:	fb02 f303 	mul.w	r3, r2, r3
 80016f2:	08db      	lsrs	r3, r3, #3
 80016f4:	4a8a      	ldr	r2, [pc, #552]	; (8001920 <ssd1306_DrawArcWithRadiusLine+0x27c>)
 80016f6:	fba2 2303 	umull	r2, r3, r2, r3
 80016fa:	089b      	lsrs	r3, r3, #2
 80016fc:	62bb      	str	r3, [r7, #40]	; 0x28
    approx_segments = (loc_sweep * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	6a3a      	ldr	r2, [r7, #32]
 8001702:	fb02 f303 	mul.w	r3, r2, r3
 8001706:	08db      	lsrs	r3, r3, #3
 8001708:	4a85      	ldr	r2, [pc, #532]	; (8001920 <ssd1306_DrawArcWithRadiusLine+0x27c>)
 800170a:	fba2 2303 	umull	r2, r3, r2, r3
 800170e:	089b      	lsrs	r3, r3, #2
 8001710:	61bb      	str	r3, [r7, #24]
    approx_degree = loc_sweep / (float)approx_segments;
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	ee07 3a90 	vmov	s15, r3
 8001718:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	ee07 3a90 	vmov	s15, r3
 8001722:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001726:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800172a:	edc7 7a05 	vstr	s15, [r7, #20]

    rad = ssd1306_DegToRad(count*approx_degree);
 800172e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001730:	ee07 3a90 	vmov	s15, r3
 8001734:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001738:	edd7 7a05 	vldr	s15, [r7, #20]
 800173c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001740:	eeb0 0a67 	vmov.f32	s0, s15
 8001744:	f7ff fe88 	bl	8001458 <ssd1306_DegToRad>
 8001748:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
    uint8_t first_point_x = x + (int8_t)(sinf(rad)*radius);
 800174c:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8001750:	f003 f90c 	bl	800496c <sinf>
 8001754:	eeb0 7a40 	vmov.f32	s14, s0
 8001758:	7b7b      	ldrb	r3, [r7, #13]
 800175a:	ee07 3a90 	vmov	s15, r3
 800175e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001762:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001766:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800176a:	edc7 7a01 	vstr	s15, [r7, #4]
 800176e:	793b      	ldrb	r3, [r7, #4]
 8001770:	b25b      	sxtb	r3, r3
 8001772:	b2da      	uxtb	r2, r3
 8001774:	7bfb      	ldrb	r3, [r7, #15]
 8001776:	4413      	add	r3, r2
 8001778:	74fb      	strb	r3, [r7, #19]
    uint8_t first_point_y = y + (int8_t)(cosf(rad)*radius);   
 800177a:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800177e:	f003 f8b1 	bl	80048e4 <cosf>
 8001782:	eeb0 7a40 	vmov.f32	s14, s0
 8001786:	7b7b      	ldrb	r3, [r7, #13]
 8001788:	ee07 3a90 	vmov	s15, r3
 800178c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001790:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001794:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001798:	edc7 7a01 	vstr	s15, [r7, #4]
 800179c:	793b      	ldrb	r3, [r7, #4]
 800179e:	b25b      	sxtb	r3, r3
 80017a0:	b2da      	uxtb	r2, r3
 80017a2:	7bbb      	ldrb	r3, [r7, #14]
 80017a4:	4413      	add	r3, r2
 80017a6:	74bb      	strb	r3, [r7, #18]
    while (count < approx_segments) {
 80017a8:	e09a      	b.n	80018e0 <ssd1306_DrawArcWithRadiusLine+0x23c>
        rad = ssd1306_DegToRad(count*approx_degree);
 80017aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017ac:	ee07 3a90 	vmov	s15, r3
 80017b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80017b4:	edd7 7a05 	vldr	s15, [r7, #20]
 80017b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017bc:	eeb0 0a67 	vmov.f32	s0, s15
 80017c0:	f7ff fe4a 	bl	8001458 <ssd1306_DegToRad>
 80017c4:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
        xp1 = x + (int8_t)(sinf(rad)*radius);
 80017c8:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80017cc:	f003 f8ce 	bl	800496c <sinf>
 80017d0:	eeb0 7a40 	vmov.f32	s14, s0
 80017d4:	7b7b      	ldrb	r3, [r7, #13]
 80017d6:	ee07 3a90 	vmov	s15, r3
 80017da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017e6:	edc7 7a01 	vstr	s15, [r7, #4]
 80017ea:	793b      	ldrb	r3, [r7, #4]
 80017ec:	b25b      	sxtb	r3, r3
 80017ee:	b2da      	uxtb	r2, r3
 80017f0:	7bfb      	ldrb	r3, [r7, #15]
 80017f2:	4413      	add	r3, r2
 80017f4:	747b      	strb	r3, [r7, #17]
        yp1 = y + (int8_t)(cosf(rad)*radius);    
 80017f6:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80017fa:	f003 f873 	bl	80048e4 <cosf>
 80017fe:	eeb0 7a40 	vmov.f32	s14, s0
 8001802:	7b7b      	ldrb	r3, [r7, #13]
 8001804:	ee07 3a90 	vmov	s15, r3
 8001808:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800180c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001810:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001814:	edc7 7a01 	vstr	s15, [r7, #4]
 8001818:	793b      	ldrb	r3, [r7, #4]
 800181a:	b25b      	sxtb	r3, r3
 800181c:	b2da      	uxtb	r2, r3
 800181e:	7bbb      	ldrb	r3, [r7, #14]
 8001820:	4413      	add	r3, r2
 8001822:	743b      	strb	r3, [r7, #16]
        count++;
 8001824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001826:	3301      	adds	r3, #1
 8001828:	62bb      	str	r3, [r7, #40]	; 0x28
        if (count != approx_segments) {
 800182a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	429a      	cmp	r2, r3
 8001830:	d00f      	beq.n	8001852 <ssd1306_DrawArcWithRadiusLine+0x1ae>
            rad = ssd1306_DegToRad(count*approx_degree);
 8001832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001834:	ee07 3a90 	vmov	s15, r3
 8001838:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800183c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001840:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001844:	eeb0 0a67 	vmov.f32	s0, s15
 8001848:	f7ff fe06 	bl	8001458 <ssd1306_DegToRad>
 800184c:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8001850:	e00a      	b.n	8001868 <ssd1306_DrawArcWithRadiusLine+0x1c4>
        } else {
            rad = ssd1306_DegToRad(loc_sweep);
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	ee07 3a90 	vmov	s15, r3
 8001858:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800185c:	eeb0 0a67 	vmov.f32	s0, s15
 8001860:	f7ff fdfa 	bl	8001458 <ssd1306_DegToRad>
 8001864:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
        }
        xp2 = x + (int8_t)(sinf(rad)*radius);
 8001868:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800186c:	f003 f87e 	bl	800496c <sinf>
 8001870:	eeb0 7a40 	vmov.f32	s14, s0
 8001874:	7b7b      	ldrb	r3, [r7, #13]
 8001876:	ee07 3a90 	vmov	s15, r3
 800187a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800187e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001882:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001886:	edc7 7a01 	vstr	s15, [r7, #4]
 800188a:	793b      	ldrb	r3, [r7, #4]
 800188c:	b25b      	sxtb	r3, r3
 800188e:	b2da      	uxtb	r2, r3
 8001890:	7bfb      	ldrb	r3, [r7, #15]
 8001892:	4413      	add	r3, r2
 8001894:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        yp2 = y + (int8_t)(cosf(rad)*radius);    
 8001898:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800189c:	f003 f822 	bl	80048e4 <cosf>
 80018a0:	eeb0 7a40 	vmov.f32	s14, s0
 80018a4:	7b7b      	ldrb	r3, [r7, #13]
 80018a6:	ee07 3a90 	vmov	s15, r3
 80018aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018b6:	edc7 7a01 	vstr	s15, [r7, #4]
 80018ba:	793b      	ldrb	r3, [r7, #4]
 80018bc:	b25b      	sxtb	r3, r3
 80018be:	b2da      	uxtb	r2, r3
 80018c0:	7bbb      	ldrb	r3, [r7, #14]
 80018c2:	4413      	add	r3, r2
 80018c4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        ssd1306_Line(xp1,yp1,xp2,yp2,color);
 80018c8:	f897 402e 	ldrb.w	r4, [r7, #46]	; 0x2e
 80018cc:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80018d0:	7c39      	ldrb	r1, [r7, #16]
 80018d2:	7c78      	ldrb	r0, [r7, #17]
 80018d4:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80018d8:	9300      	str	r3, [sp, #0]
 80018da:	4623      	mov	r3, r4
 80018dc:	f7ff fd16 	bl	800130c <ssd1306_Line>
    while (count < approx_segments) {
 80018e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	f4ff af60 	bcc.w	80017aa <ssd1306_DrawArcWithRadiusLine+0x106>
    }
    
    // Radius line
    ssd1306_Line(x,y,first_point_x,first_point_y,color);
 80018ea:	7cbc      	ldrb	r4, [r7, #18]
 80018ec:	7cfa      	ldrb	r2, [r7, #19]
 80018ee:	7bb9      	ldrb	r1, [r7, #14]
 80018f0:	7bf8      	ldrb	r0, [r7, #15]
 80018f2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80018f6:	9300      	str	r3, [sp, #0]
 80018f8:	4623      	mov	r3, r4
 80018fa:	f7ff fd07 	bl	800130c <ssd1306_Line>
    ssd1306_Line(x,y,xp2,yp2,color);
 80018fe:	f897 402e 	ldrb.w	r4, [r7, #46]	; 0x2e
 8001902:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001906:	7bb9      	ldrb	r1, [r7, #14]
 8001908:	7bf8      	ldrb	r0, [r7, #15]
 800190a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800190e:	9300      	str	r3, [sp, #0]
 8001910:	4623      	mov	r3, r4
 8001912:	f7ff fcfb 	bl	800130c <ssd1306_Line>
    return;
 8001916:	bf00      	nop
}
 8001918:	3734      	adds	r7, #52	; 0x34
 800191a:	46bd      	mov	sp, r7
 800191c:	bd90      	pop	{r4, r7, pc}
 800191e:	bf00      	nop
 8001920:	16c16c17 	.word	0x16c16c17

08001924 <ssd1306_DrawCircle>:

/* Draw circle by Bresenhem's algorithm */
void ssd1306_DrawCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 8001924:	b590      	push	{r4, r7, lr}
 8001926:	b087      	sub	sp, #28
 8001928:	af00      	add	r7, sp, #0
 800192a:	4604      	mov	r4, r0
 800192c:	4608      	mov	r0, r1
 800192e:	4611      	mov	r1, r2
 8001930:	461a      	mov	r2, r3
 8001932:	4623      	mov	r3, r4
 8001934:	71fb      	strb	r3, [r7, #7]
 8001936:	4603      	mov	r3, r0
 8001938:	71bb      	strb	r3, [r7, #6]
 800193a:	460b      	mov	r3, r1
 800193c:	717b      	strb	r3, [r7, #5]
 800193e:	4613      	mov	r3, r2
 8001940:	713b      	strb	r3, [r7, #4]
    int32_t x = -par_r;
 8001942:	797b      	ldrb	r3, [r7, #5]
 8001944:	425b      	negs	r3, r3
 8001946:	617b      	str	r3, [r7, #20]
    int32_t y = 0;
 8001948:	2300      	movs	r3, #0
 800194a:	613b      	str	r3, [r7, #16]
    int32_t err = 2 - 2 * par_r;
 800194c:	797b      	ldrb	r3, [r7, #5]
 800194e:	f1c3 0301 	rsb	r3, r3, #1
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	60fb      	str	r3, [r7, #12]
    int32_t e2;

    if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 8001956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195a:	2b00      	cmp	r3, #0
 800195c:	db65      	blt.n	8001a2a <ssd1306_DrawCircle+0x106>
 800195e:	79bb      	ldrb	r3, [r7, #6]
 8001960:	2b3f      	cmp	r3, #63	; 0x3f
 8001962:	d862      	bhi.n	8001a2a <ssd1306_DrawCircle+0x106>
        return;
    }

    do {
        ssd1306_DrawPixel(par_x - x, par_y + y, par_color);
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	b2db      	uxtb	r3, r3
 8001968:	79fa      	ldrb	r2, [r7, #7]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	b2d8      	uxtb	r0, r3
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	b2da      	uxtb	r2, r3
 8001972:	79bb      	ldrb	r3, [r7, #6]
 8001974:	4413      	add	r3, r2
 8001976:	b2db      	uxtb	r3, r3
 8001978:	793a      	ldrb	r2, [r7, #4]
 800197a:	4619      	mov	r1, r3
 800197c:	f7ff fba2 	bl	80010c4 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y + y, par_color);
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	b2da      	uxtb	r2, r3
 8001984:	79fb      	ldrb	r3, [r7, #7]
 8001986:	4413      	add	r3, r2
 8001988:	b2d8      	uxtb	r0, r3
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	b2da      	uxtb	r2, r3
 800198e:	79bb      	ldrb	r3, [r7, #6]
 8001990:	4413      	add	r3, r2
 8001992:	b2db      	uxtb	r3, r3
 8001994:	793a      	ldrb	r2, [r7, #4]
 8001996:	4619      	mov	r1, r3
 8001998:	f7ff fb94 	bl	80010c4 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y - y, par_color);
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	b2da      	uxtb	r2, r3
 80019a0:	79fb      	ldrb	r3, [r7, #7]
 80019a2:	4413      	add	r3, r2
 80019a4:	b2d8      	uxtb	r0, r3
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	79ba      	ldrb	r2, [r7, #6]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	793a      	ldrb	r2, [r7, #4]
 80019b2:	4619      	mov	r1, r3
 80019b4:	f7ff fb86 	bl	80010c4 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x - x, par_y - y, par_color);
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	79fa      	ldrb	r2, [r7, #7]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	b2d8      	uxtb	r0, r3
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	79ba      	ldrb	r2, [r7, #6]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	793a      	ldrb	r2, [r7, #4]
 80019ce:	4619      	mov	r1, r3
 80019d0:	f7ff fb78 	bl	80010c4 <ssd1306_DrawPixel>
        e2 = err;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	60bb      	str	r3, [r7, #8]

        if (e2 <= y) {
 80019d8:	68ba      	ldr	r2, [r7, #8]
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	429a      	cmp	r2, r3
 80019de:	dc13      	bgt.n	8001a08 <ssd1306_DrawCircle+0xe4>
            y++;
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	3301      	adds	r3, #1
 80019e4:	613b      	str	r3, [r7, #16]
            err = err + (y * 2 + 1);
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	3301      	adds	r3, #1
 80019ec:	68fa      	ldr	r2, [r7, #12]
 80019ee:	4413      	add	r3, r2
 80019f0:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) {
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	425b      	negs	r3, r3
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d105      	bne.n	8001a08 <ssd1306_DrawCircle+0xe4>
 80019fc:	68ba      	ldr	r2, [r7, #8]
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	dc01      	bgt.n	8001a08 <ssd1306_DrawCircle+0xe4>
                e2 = 0;
 8001a04:	2300      	movs	r3, #0
 8001a06:	60bb      	str	r3, [r7, #8]
            }
        }

        if (e2 > x) {
 8001a08:	68ba      	ldr	r2, [r7, #8]
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	dd08      	ble.n	8001a22 <ssd1306_DrawCircle+0xfe>
            x++;
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	3301      	adds	r3, #1
 8001a14:	617b      	str	r3, [r7, #20]
            err = err + (x * 2 + 1);
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	68fa      	ldr	r2, [r7, #12]
 8001a1e:	4413      	add	r3, r2
 8001a20:	60fb      	str	r3, [r7, #12]
        }
    } while (x <= 0);
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	dd9d      	ble.n	8001964 <ssd1306_DrawCircle+0x40>

    return;
 8001a28:	e000      	b.n	8001a2c <ssd1306_DrawCircle+0x108>
        return;
 8001a2a:	bf00      	nop
}
 8001a2c:	371c      	adds	r7, #28
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd90      	pop	{r4, r7, pc}

08001a32 <ssd1306_FillCircle>:

/* Draw filled circle. Pixel positions calculated using Bresenham's algorithm */
void ssd1306_FillCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 8001a32:	b590      	push	{r4, r7, lr}
 8001a34:	b089      	sub	sp, #36	; 0x24
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	4604      	mov	r4, r0
 8001a3a:	4608      	mov	r0, r1
 8001a3c:	4611      	mov	r1, r2
 8001a3e:	461a      	mov	r2, r3
 8001a40:	4623      	mov	r3, r4
 8001a42:	71fb      	strb	r3, [r7, #7]
 8001a44:	4603      	mov	r3, r0
 8001a46:	71bb      	strb	r3, [r7, #6]
 8001a48:	460b      	mov	r3, r1
 8001a4a:	717b      	strb	r3, [r7, #5]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	713b      	strb	r3, [r7, #4]
    int32_t x = -par_r;
 8001a50:	797b      	ldrb	r3, [r7, #5]
 8001a52:	425b      	negs	r3, r3
 8001a54:	61fb      	str	r3, [r7, #28]
    int32_t y = 0;
 8001a56:	2300      	movs	r3, #0
 8001a58:	61bb      	str	r3, [r7, #24]
    int32_t err = 2 - 2 * par_r;
 8001a5a:	797b      	ldrb	r3, [r7, #5]
 8001a5c:	f1c3 0301 	rsb	r3, r3, #1
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	617b      	str	r3, [r7, #20]
    int32_t e2;

    if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 8001a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	db51      	blt.n	8001b10 <ssd1306_FillCircle+0xde>
 8001a6c:	79bb      	ldrb	r3, [r7, #6]
 8001a6e:	2b3f      	cmp	r3, #63	; 0x3f
 8001a70:	d84e      	bhi.n	8001b10 <ssd1306_FillCircle+0xde>
        return;
    }

    do {
        for (uint8_t _y = (par_y + y); _y >= (par_y - y); _y--) {
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	b2da      	uxtb	r2, r3
 8001a76:	79bb      	ldrb	r3, [r7, #6]
 8001a78:	4413      	add	r3, r2
 8001a7a:	73fb      	strb	r3, [r7, #15]
 8001a7c:	e017      	b.n	8001aae <ssd1306_FillCircle+0x7c>
            for (uint8_t _x = (par_x - x); _x >= (par_x + x); _x--) {
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	79fa      	ldrb	r2, [r7, #7]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	73bb      	strb	r3, [r7, #14]
 8001a88:	e008      	b.n	8001a9c <ssd1306_FillCircle+0x6a>
                ssd1306_DrawPixel(_x, _y, par_color);
 8001a8a:	793a      	ldrb	r2, [r7, #4]
 8001a8c:	7bf9      	ldrb	r1, [r7, #15]
 8001a8e:	7bbb      	ldrb	r3, [r7, #14]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff fb17 	bl	80010c4 <ssd1306_DrawPixel>
            for (uint8_t _x = (par_x - x); _x >= (par_x + x); _x--) {
 8001a96:	7bbb      	ldrb	r3, [r7, #14]
 8001a98:	3b01      	subs	r3, #1
 8001a9a:	73bb      	strb	r3, [r7, #14]
 8001a9c:	7bba      	ldrb	r2, [r7, #14]
 8001a9e:	79f9      	ldrb	r1, [r7, #7]
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	440b      	add	r3, r1
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	daf0      	bge.n	8001a8a <ssd1306_FillCircle+0x58>
        for (uint8_t _y = (par_y + y); _y >= (par_y - y); _y--) {
 8001aa8:	7bfb      	ldrb	r3, [r7, #15]
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	73fb      	strb	r3, [r7, #15]
 8001aae:	7bfa      	ldrb	r2, [r7, #15]
 8001ab0:	79b9      	ldrb	r1, [r7, #6]
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	1acb      	subs	r3, r1, r3
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	dae1      	bge.n	8001a7e <ssd1306_FillCircle+0x4c>
            }
        }

        e2 = err;
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	613b      	str	r3, [r7, #16]
        if (e2 <= y) {
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	dc13      	bgt.n	8001aee <ssd1306_FillCircle+0xbc>
            y++;
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	61bb      	str	r3, [r7, #24]
            err = err + (y * 2 + 1);
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	697a      	ldr	r2, [r7, #20]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	617b      	str	r3, [r7, #20]
            if (-x == y && e2 <= x) {
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	425b      	negs	r3, r3
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d105      	bne.n	8001aee <ssd1306_FillCircle+0xbc>
 8001ae2:	693a      	ldr	r2, [r7, #16]
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	dc01      	bgt.n	8001aee <ssd1306_FillCircle+0xbc>
                e2 = 0;
 8001aea:	2300      	movs	r3, #0
 8001aec:	613b      	str	r3, [r7, #16]
            }
        }

        if (e2 > x) {
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	429a      	cmp	r2, r3
 8001af4:	dd08      	ble.n	8001b08 <ssd1306_FillCircle+0xd6>
            x++;
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	3301      	adds	r3, #1
 8001afa:	61fb      	str	r3, [r7, #28]
            err = err + (x * 2 + 1);
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	005b      	lsls	r3, r3, #1
 8001b00:	3301      	adds	r3, #1
 8001b02:	697a      	ldr	r2, [r7, #20]
 8001b04:	4413      	add	r3, r2
 8001b06:	617b      	str	r3, [r7, #20]
        }
    } while (x <= 0);
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	ddb1      	ble.n	8001a72 <ssd1306_FillCircle+0x40>

    return;
 8001b0e:	e000      	b.n	8001b12 <ssd1306_FillCircle+0xe0>
        return;
 8001b10:	bf00      	nop
}
 8001b12:	3724      	adds	r7, #36	; 0x24
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd90      	pop	{r4, r7, pc}

08001b18 <ssd1306_DrawRectangle>:

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8001b18:	b590      	push	{r4, r7, lr}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af02      	add	r7, sp, #8
 8001b1e:	4604      	mov	r4, r0
 8001b20:	4608      	mov	r0, r1
 8001b22:	4611      	mov	r1, r2
 8001b24:	461a      	mov	r2, r3
 8001b26:	4623      	mov	r3, r4
 8001b28:	71fb      	strb	r3, [r7, #7]
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	71bb      	strb	r3, [r7, #6]
 8001b2e:	460b      	mov	r3, r1
 8001b30:	717b      	strb	r3, [r7, #5]
 8001b32:	4613      	mov	r3, r2
 8001b34:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 8001b36:	79bc      	ldrb	r4, [r7, #6]
 8001b38:	797a      	ldrb	r2, [r7, #5]
 8001b3a:	79b9      	ldrb	r1, [r7, #6]
 8001b3c:	79f8      	ldrb	r0, [r7, #7]
 8001b3e:	7e3b      	ldrb	r3, [r7, #24]
 8001b40:	9300      	str	r3, [sp, #0]
 8001b42:	4623      	mov	r3, r4
 8001b44:	f7ff fbe2 	bl	800130c <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 8001b48:	793c      	ldrb	r4, [r7, #4]
 8001b4a:	797a      	ldrb	r2, [r7, #5]
 8001b4c:	79b9      	ldrb	r1, [r7, #6]
 8001b4e:	7978      	ldrb	r0, [r7, #5]
 8001b50:	7e3b      	ldrb	r3, [r7, #24]
 8001b52:	9300      	str	r3, [sp, #0]
 8001b54:	4623      	mov	r3, r4
 8001b56:	f7ff fbd9 	bl	800130c <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 8001b5a:	793c      	ldrb	r4, [r7, #4]
 8001b5c:	79fa      	ldrb	r2, [r7, #7]
 8001b5e:	7939      	ldrb	r1, [r7, #4]
 8001b60:	7978      	ldrb	r0, [r7, #5]
 8001b62:	7e3b      	ldrb	r3, [r7, #24]
 8001b64:	9300      	str	r3, [sp, #0]
 8001b66:	4623      	mov	r3, r4
 8001b68:	f7ff fbd0 	bl	800130c <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 8001b6c:	79bc      	ldrb	r4, [r7, #6]
 8001b6e:	79fa      	ldrb	r2, [r7, #7]
 8001b70:	7939      	ldrb	r1, [r7, #4]
 8001b72:	79f8      	ldrb	r0, [r7, #7]
 8001b74:	7e3b      	ldrb	r3, [r7, #24]
 8001b76:	9300      	str	r3, [sp, #0]
 8001b78:	4623      	mov	r3, r4
 8001b7a:	f7ff fbc7 	bl	800130c <ssd1306_Line>

    return;
 8001b7e:	bf00      	nop
}
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd90      	pop	{r4, r7, pc}

08001b86 <ssd1306_FillRectangle>:

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8001b86:	b590      	push	{r4, r7, lr}
 8001b88:	b085      	sub	sp, #20
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	4604      	mov	r4, r0
 8001b8e:	4608      	mov	r0, r1
 8001b90:	4611      	mov	r1, r2
 8001b92:	461a      	mov	r2, r3
 8001b94:	4623      	mov	r3, r4
 8001b96:	71fb      	strb	r3, [r7, #7]
 8001b98:	4603      	mov	r3, r0
 8001b9a:	71bb      	strb	r3, [r7, #6]
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	717b      	strb	r3, [r7, #5]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 8001ba4:	79fa      	ldrb	r2, [r7, #7]
 8001ba6:	797b      	ldrb	r3, [r7, #5]
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	bf28      	it	cs
 8001bac:	4613      	movcs	r3, r2
 8001bae:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 8001bb0:	797a      	ldrb	r2, [r7, #5]
 8001bb2:	79fb      	ldrb	r3, [r7, #7]
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	bf38      	it	cc
 8001bb8:	4613      	movcc	r3, r2
 8001bba:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 8001bbc:	79ba      	ldrb	r2, [r7, #6]
 8001bbe:	793b      	ldrb	r3, [r7, #4]
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	bf28      	it	cs
 8001bc4:	4613      	movcs	r3, r2
 8001bc6:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 8001bc8:	793a      	ldrb	r2, [r7, #4]
 8001bca:	79bb      	ldrb	r3, [r7, #6]
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	bf38      	it	cc
 8001bd0:	4613      	movcc	r3, r2
 8001bd2:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8001bd4:	7afb      	ldrb	r3, [r7, #11]
 8001bd6:	73fb      	strb	r3, [r7, #15]
 8001bd8:	e017      	b.n	8001c0a <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8001bda:	7b7b      	ldrb	r3, [r7, #13]
 8001bdc:	73bb      	strb	r3, [r7, #14]
 8001bde:	e009      	b.n	8001bf4 <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 8001be0:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001be4:	7bf9      	ldrb	r1, [r7, #15]
 8001be6:	7bbb      	ldrb	r3, [r7, #14]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7ff fa6b 	bl	80010c4 <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8001bee:	7bbb      	ldrb	r3, [r7, #14]
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	73bb      	strb	r3, [r7, #14]
 8001bf4:	7bba      	ldrb	r2, [r7, #14]
 8001bf6:	7b3b      	ldrb	r3, [r7, #12]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d803      	bhi.n	8001c04 <ssd1306_FillRectangle+0x7e>
 8001bfc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	daed      	bge.n	8001be0 <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8001c04:	7bfb      	ldrb	r3, [r7, #15]
 8001c06:	3301      	adds	r3, #1
 8001c08:	73fb      	strb	r3, [r7, #15]
 8001c0a:	7bfa      	ldrb	r2, [r7, #15]
 8001c0c:	7abb      	ldrb	r3, [r7, #10]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d803      	bhi.n	8001c1a <ssd1306_FillRectangle+0x94>
 8001c12:	7bfb      	ldrb	r3, [r7, #15]
 8001c14:	2b3f      	cmp	r3, #63	; 0x3f
 8001c16:	d9e0      	bls.n	8001bda <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 8001c18:	bf00      	nop
 8001c1a:	bf00      	nop
}
 8001c1c:	3714      	adds	r7, #20
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd90      	pop	{r4, r7, pc}
	...

08001c24 <ssd1306_InvertRectangle>:

SSD1306_Error_t ssd1306_InvertRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2) {
 8001c24:	b490      	push	{r4, r7}
 8001c26:	b086      	sub	sp, #24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4604      	mov	r4, r0
 8001c2c:	4608      	mov	r0, r1
 8001c2e:	4611      	mov	r1, r2
 8001c30:	461a      	mov	r2, r3
 8001c32:	4623      	mov	r3, r4
 8001c34:	71fb      	strb	r3, [r7, #7]
 8001c36:	4603      	mov	r3, r0
 8001c38:	71bb      	strb	r3, [r7, #6]
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	717b      	strb	r3, [r7, #5]
 8001c3e:	4613      	mov	r3, r2
 8001c40:	713b      	strb	r3, [r7, #4]
  if ((x2 >= SSD1306_WIDTH) || (y2 >= SSD1306_HEIGHT)) {
 8001c42:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	db02      	blt.n	8001c50 <ssd1306_InvertRectangle+0x2c>
 8001c4a:	793b      	ldrb	r3, [r7, #4]
 8001c4c:	2b3f      	cmp	r3, #63	; 0x3f
 8001c4e:	d901      	bls.n	8001c54 <ssd1306_InvertRectangle+0x30>
    return SSD1306_ERR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e09c      	b.n	8001d8e <ssd1306_InvertRectangle+0x16a>
  }
  if ((x1 > x2) || (y1 > y2)) {
 8001c54:	79fa      	ldrb	r2, [r7, #7]
 8001c56:	797b      	ldrb	r3, [r7, #5]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d803      	bhi.n	8001c64 <ssd1306_InvertRectangle+0x40>
 8001c5c:	79ba      	ldrb	r2, [r7, #6]
 8001c5e:	793b      	ldrb	r3, [r7, #4]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d901      	bls.n	8001c68 <ssd1306_InvertRectangle+0x44>
    return SSD1306_ERR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e092      	b.n	8001d8e <ssd1306_InvertRectangle+0x16a>
  }
  uint32_t i;
  if ((y1 / 8) != (y2 / 8)) {
 8001c68:	79bb      	ldrb	r3, [r7, #6]
 8001c6a:	08db      	lsrs	r3, r3, #3
 8001c6c:	b2da      	uxtb	r2, r3
 8001c6e:	793b      	ldrb	r3, [r7, #4]
 8001c70:	08db      	lsrs	r3, r3, #3
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d057      	beq.n	8001d28 <ssd1306_InvertRectangle+0x104>
    /* if rectangle doesn't lie on one 8px row */
    for (uint32_t x = x1; x <= x2; x++) {
 8001c78:	79fb      	ldrb	r3, [r7, #7]
 8001c7a:	613b      	str	r3, [r7, #16]
 8001c7c:	e04f      	b.n	8001d1e <ssd1306_InvertRectangle+0xfa>
      i = x + (y1 / 8) * SSD1306_WIDTH;
 8001c7e:	79bb      	ldrb	r3, [r7, #6]
 8001c80:	08db      	lsrs	r3, r3, #3
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	01db      	lsls	r3, r3, #7
 8001c86:	461a      	mov	r2, r3
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	617b      	str	r3, [r7, #20]
      SSD1306_Buffer[i] ^= 0xFF << (y1 % 8);
 8001c8e:	4a42      	ldr	r2, [pc, #264]	; (8001d98 <ssd1306_InvertRectangle+0x174>)
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	4413      	add	r3, r2
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	b25a      	sxtb	r2, r3
 8001c98:	79bb      	ldrb	r3, [r7, #6]
 8001c9a:	f003 0307 	and.w	r3, r3, #7
 8001c9e:	21ff      	movs	r1, #255	; 0xff
 8001ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca4:	b25b      	sxtb	r3, r3
 8001ca6:	4053      	eors	r3, r2
 8001ca8:	b25b      	sxtb	r3, r3
 8001caa:	b2d9      	uxtb	r1, r3
 8001cac:	4a3a      	ldr	r2, [pc, #232]	; (8001d98 <ssd1306_InvertRectangle+0x174>)
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	460a      	mov	r2, r1
 8001cb4:	701a      	strb	r2, [r3, #0]
      i += SSD1306_WIDTH;
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	3380      	adds	r3, #128	; 0x80
 8001cba:	617b      	str	r3, [r7, #20]
      for (; i < x + (y2 / 8) * SSD1306_WIDTH; i += SSD1306_WIDTH) {
 8001cbc:	e00d      	b.n	8001cda <ssd1306_InvertRectangle+0xb6>
        SSD1306_Buffer[i] ^= 0xFF;
 8001cbe:	4a36      	ldr	r2, [pc, #216]	; (8001d98 <ssd1306_InvertRectangle+0x174>)
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	43db      	mvns	r3, r3
 8001cc8:	b2d9      	uxtb	r1, r3
 8001cca:	4a33      	ldr	r2, [pc, #204]	; (8001d98 <ssd1306_InvertRectangle+0x174>)
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	4413      	add	r3, r2
 8001cd0:	460a      	mov	r2, r1
 8001cd2:	701a      	strb	r2, [r3, #0]
      for (; i < x + (y2 / 8) * SSD1306_WIDTH; i += SSD1306_WIDTH) {
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	3380      	adds	r3, #128	; 0x80
 8001cd8:	617b      	str	r3, [r7, #20]
 8001cda:	793b      	ldrb	r3, [r7, #4]
 8001cdc:	08db      	lsrs	r3, r3, #3
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	01db      	lsls	r3, r3, #7
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	697a      	ldr	r2, [r7, #20]
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d3e7      	bcc.n	8001cbe <ssd1306_InvertRectangle+0x9a>
      }
      SSD1306_Buffer[i] ^= 0xFF >> (7 - (y2 % 8));
 8001cee:	4a2a      	ldr	r2, [pc, #168]	; (8001d98 <ssd1306_InvertRectangle+0x174>)
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	b25a      	sxtb	r2, r3
 8001cf8:	793b      	ldrb	r3, [r7, #4]
 8001cfa:	43db      	mvns	r3, r3
 8001cfc:	f003 0307 	and.w	r3, r3, #7
 8001d00:	21ff      	movs	r1, #255	; 0xff
 8001d02:	fa41 f303 	asr.w	r3, r1, r3
 8001d06:	b25b      	sxtb	r3, r3
 8001d08:	4053      	eors	r3, r2
 8001d0a:	b25b      	sxtb	r3, r3
 8001d0c:	b2d9      	uxtb	r1, r3
 8001d0e:	4a22      	ldr	r2, [pc, #136]	; (8001d98 <ssd1306_InvertRectangle+0x174>)
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	4413      	add	r3, r2
 8001d14:	460a      	mov	r2, r1
 8001d16:	701a      	strb	r2, [r3, #0]
    for (uint32_t x = x1; x <= x2; x++) {
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	613b      	str	r3, [r7, #16]
 8001d1e:	797b      	ldrb	r3, [r7, #5]
 8001d20:	693a      	ldr	r2, [r7, #16]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d9ab      	bls.n	8001c7e <ssd1306_InvertRectangle+0x5a>
 8001d26:	e031      	b.n	8001d8c <ssd1306_InvertRectangle+0x168>
    }
  } else {
    /* if rectangle lies on one 8px row */
    const uint8_t mask = (0xFF << (y1 % 8)) & (0xFF >> (7 - (y2 % 8)));
 8001d28:	79bb      	ldrb	r3, [r7, #6]
 8001d2a:	f003 0307 	and.w	r3, r3, #7
 8001d2e:	22ff      	movs	r2, #255	; 0xff
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	b25a      	sxtb	r2, r3
 8001d36:	793b      	ldrb	r3, [r7, #4]
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	f003 0307 	and.w	r3, r3, #7
 8001d3e:	21ff      	movs	r1, #255	; 0xff
 8001d40:	fa41 f303 	asr.w	r3, r1, r3
 8001d44:	b25b      	sxtb	r3, r3
 8001d46:	4013      	ands	r3, r2
 8001d48:	b25b      	sxtb	r3, r3
 8001d4a:	73fb      	strb	r3, [r7, #15]
    for (i = x1 + (y1 / 8) * SSD1306_WIDTH;
 8001d4c:	79fa      	ldrb	r2, [r7, #7]
 8001d4e:	79bb      	ldrb	r3, [r7, #6]
 8001d50:	08db      	lsrs	r3, r3, #3
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	01db      	lsls	r3, r3, #7
 8001d56:	4413      	add	r3, r2
 8001d58:	617b      	str	r3, [r7, #20]
 8001d5a:	e00e      	b.n	8001d7a <ssd1306_InvertRectangle+0x156>
         i <= (uint32_t)x2 + (y2 / 8) * SSD1306_WIDTH; i++) {
      SSD1306_Buffer[i] ^= mask;
 8001d5c:	4a0e      	ldr	r2, [pc, #56]	; (8001d98 <ssd1306_InvertRectangle+0x174>)
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	4413      	add	r3, r2
 8001d62:	781a      	ldrb	r2, [r3, #0]
 8001d64:	7bfb      	ldrb	r3, [r7, #15]
 8001d66:	4053      	eors	r3, r2
 8001d68:	b2d9      	uxtb	r1, r3
 8001d6a:	4a0b      	ldr	r2, [pc, #44]	; (8001d98 <ssd1306_InvertRectangle+0x174>)
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	4413      	add	r3, r2
 8001d70:	460a      	mov	r2, r1
 8001d72:	701a      	strb	r2, [r3, #0]
         i <= (uint32_t)x2 + (y2 / 8) * SSD1306_WIDTH; i++) {
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	3301      	adds	r3, #1
 8001d78:	617b      	str	r3, [r7, #20]
 8001d7a:	797b      	ldrb	r3, [r7, #5]
 8001d7c:	793a      	ldrb	r2, [r7, #4]
 8001d7e:	08d2      	lsrs	r2, r2, #3
 8001d80:	b2d2      	uxtb	r2, r2
 8001d82:	01d2      	lsls	r2, r2, #7
 8001d84:	4413      	add	r3, r2
 8001d86:	697a      	ldr	r2, [r7, #20]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d9e7      	bls.n	8001d5c <ssd1306_InvertRectangle+0x138>
    }
  }
  return SSD1306_OK;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3718      	adds	r7, #24
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bc90      	pop	{r4, r7}
 8001d96:	4770      	bx	lr
 8001d98:	200000cc 	.word	0x200000cc

08001d9c <ssd1306_DrawBitmap>:

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	603a      	str	r2, [r7, #0]
 8001da4:	461a      	mov	r2, r3
 8001da6:	4603      	mov	r3, r0
 8001da8:	71fb      	strb	r3, [r7, #7]
 8001daa:	460b      	mov	r3, r1
 8001dac:	71bb      	strb	r3, [r7, #6]
 8001dae:	4613      	mov	r3, r2
 8001db0:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8001db2:	797b      	ldrb	r3, [r7, #5]
 8001db4:	3307      	adds	r3, #7
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	da00      	bge.n	8001dbc <ssd1306_DrawBitmap+0x20>
 8001dba:	3307      	adds	r3, #7
 8001dbc:	10db      	asrs	r3, r3, #3
 8001dbe:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	db3e      	blt.n	8001e4a <ssd1306_DrawBitmap+0xae>
 8001dcc:	79bb      	ldrb	r3, [r7, #6]
 8001dce:	2b3f      	cmp	r3, #63	; 0x3f
 8001dd0:	d83b      	bhi.n	8001e4a <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	73bb      	strb	r3, [r7, #14]
 8001dd6:	e033      	b.n	8001e40 <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 8001dd8:	2300      	movs	r3, #0
 8001dda:	737b      	strb	r3, [r7, #13]
 8001ddc:	e026      	b.n	8001e2c <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 8001dde:	7b7b      	ldrb	r3, [r7, #13]
 8001de0:	f003 0307 	and.w	r3, r3, #7
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d003      	beq.n	8001df0 <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 8001de8:	7bfb      	ldrb	r3, [r7, #15]
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	73fb      	strb	r3, [r7, #15]
 8001dee:	e00d      	b.n	8001e0c <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8001df0:	7bbb      	ldrb	r3, [r7, #14]
 8001df2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001df6:	fb02 f303 	mul.w	r3, r2, r3
 8001dfa:	7b7a      	ldrb	r2, [r7, #13]
 8001dfc:	08d2      	lsrs	r2, r2, #3
 8001dfe:	b2d2      	uxtb	r2, r2
 8001e00:	4413      	add	r3, r2
 8001e02:	461a      	mov	r2, r3
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	4413      	add	r3, r2
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 8001e0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	da08      	bge.n	8001e26 <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 8001e14:	79fa      	ldrb	r2, [r7, #7]
 8001e16:	7b7b      	ldrb	r3, [r7, #13]
 8001e18:	4413      	add	r3, r2
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	7f3a      	ldrb	r2, [r7, #28]
 8001e1e:	79b9      	ldrb	r1, [r7, #6]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7ff f94f 	bl	80010c4 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 8001e26:	7b7b      	ldrb	r3, [r7, #13]
 8001e28:	3301      	adds	r3, #1
 8001e2a:	737b      	strb	r3, [r7, #13]
 8001e2c:	7b7a      	ldrb	r2, [r7, #13]
 8001e2e:	797b      	ldrb	r3, [r7, #5]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d3d4      	bcc.n	8001dde <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 8001e34:	7bbb      	ldrb	r3, [r7, #14]
 8001e36:	3301      	adds	r3, #1
 8001e38:	73bb      	strb	r3, [r7, #14]
 8001e3a:	79bb      	ldrb	r3, [r7, #6]
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	71bb      	strb	r3, [r7, #6]
 8001e40:	7bba      	ldrb	r2, [r7, #14]
 8001e42:	7e3b      	ldrb	r3, [r7, #24]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d3c7      	bcc.n	8001dd8 <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 8001e48:	e000      	b.n	8001e4c <ssd1306_DrawBitmap+0xb0>
        return;
 8001e4a:	bf00      	nop
}
 8001e4c:	3710      	adds	r7, #16
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b084      	sub	sp, #16
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	4603      	mov	r3, r0
 8001e5a:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001e5c:	2381      	movs	r3, #129	; 0x81
 8001e5e:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001e60:	7bfb      	ldrb	r3, [r7, #15]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7ff f852 	bl	8000f0c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001e68:	79fb      	ldrb	r3, [r7, #7]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7ff f84e 	bl	8000f0c <ssd1306_WriteCommand>
}
 8001e70:	bf00      	nop
 8001e72:	3710      	adds	r7, #16
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	4603      	mov	r3, r0
 8001e80:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001e82:	79fb      	ldrb	r3, [r7, #7]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d005      	beq.n	8001e94 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001e88:	23af      	movs	r3, #175	; 0xaf
 8001e8a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001e8c:	4b08      	ldr	r3, [pc, #32]	; (8001eb0 <ssd1306_SetDisplayOn+0x38>)
 8001e8e:	2201      	movs	r2, #1
 8001e90:	715a      	strb	r2, [r3, #5]
 8001e92:	e004      	b.n	8001e9e <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001e94:	23ae      	movs	r3, #174	; 0xae
 8001e96:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001e98:	4b05      	ldr	r3, [pc, #20]	; (8001eb0 <ssd1306_SetDisplayOn+0x38>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001e9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff f833 	bl	8000f0c <ssd1306_WriteCommand>
}
 8001ea6:	bf00      	nop
 8001ea8:	3710      	adds	r7, #16
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	200004cc 	.word	0x200004cc

08001eb4 <ssd1306_TestBorder>:
0x00, 0x03, 0xFF, 0x00, 0x00, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00,
0x00, 0x00, 0x3F, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0xF0, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

void ssd1306_TestBorder() {
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
    ssd1306_Fill(Black);
 8001eba:	2000      	movs	r0, #0
 8001ebc:	f7ff f8c2 	bl	8001044 <ssd1306_Fill>
   
    uint8_t x = 0;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	71fb      	strb	r3, [r7, #7]
    uint8_t y = 0;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	71bb      	strb	r3, [r7, #6]
    do {
        ssd1306_DrawPixel(x, y, Black);
 8001ec8:	79b9      	ldrb	r1, [r7, #6]
 8001eca:	79fb      	ldrb	r3, [r7, #7]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7ff f8f8 	bl	80010c4 <ssd1306_DrawPixel>

        if((y == 0) && (x < (SSD1306_WIDTH-1)))
 8001ed4:	79bb      	ldrb	r3, [r7, #6]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d106      	bne.n	8001ee8 <ssd1306_TestBorder+0x34>
 8001eda:	79fb      	ldrb	r3, [r7, #7]
 8001edc:	2b7e      	cmp	r3, #126	; 0x7e
 8001ede:	d803      	bhi.n	8001ee8 <ssd1306_TestBorder+0x34>
            x++;
 8001ee0:	79fb      	ldrb	r3, [r7, #7]
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	71fb      	strb	r3, [r7, #7]
 8001ee6:	e016      	b.n	8001f16 <ssd1306_TestBorder+0x62>
        else if((x == (SSD1306_WIDTH-1)) && (y < (SSD1306_HEIGHT-1)))
 8001ee8:	79fb      	ldrb	r3, [r7, #7]
 8001eea:	2b7f      	cmp	r3, #127	; 0x7f
 8001eec:	d106      	bne.n	8001efc <ssd1306_TestBorder+0x48>
 8001eee:	79bb      	ldrb	r3, [r7, #6]
 8001ef0:	2b3e      	cmp	r3, #62	; 0x3e
 8001ef2:	d803      	bhi.n	8001efc <ssd1306_TestBorder+0x48>
            y++;
 8001ef4:	79bb      	ldrb	r3, [r7, #6]
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	71bb      	strb	r3, [r7, #6]
 8001efa:	e00c      	b.n	8001f16 <ssd1306_TestBorder+0x62>
        else if((y == (SSD1306_HEIGHT-1)) && (x > 0)) 
 8001efc:	79bb      	ldrb	r3, [r7, #6]
 8001efe:	2b3f      	cmp	r3, #63	; 0x3f
 8001f00:	d106      	bne.n	8001f10 <ssd1306_TestBorder+0x5c>
 8001f02:	79fb      	ldrb	r3, [r7, #7]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d003      	beq.n	8001f10 <ssd1306_TestBorder+0x5c>
            x--;
 8001f08:	79fb      	ldrb	r3, [r7, #7]
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	71fb      	strb	r3, [r7, #7]
 8001f0e:	e002      	b.n	8001f16 <ssd1306_TestBorder+0x62>
        else
            y--;
 8001f10:	79bb      	ldrb	r3, [r7, #6]
 8001f12:	3b01      	subs	r3, #1
 8001f14:	71bb      	strb	r3, [r7, #6]

        ssd1306_DrawPixel(x, y, White);
 8001f16:	79b9      	ldrb	r1, [r7, #6]
 8001f18:	79fb      	ldrb	r3, [r7, #7]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff f8d1 	bl	80010c4 <ssd1306_DrawPixel>
        ssd1306_UpdateScreen();
 8001f22:	f7ff f8a7 	bl	8001074 <ssd1306_UpdateScreen>
    
        HAL_Delay(5);
 8001f26:	2005      	movs	r0, #5
 8001f28:	f000 fcf6 	bl	8002918 <HAL_Delay>
    } while(x > 0 || y > 0);
 8001f2c:	79fb      	ldrb	r3, [r7, #7]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d1ca      	bne.n	8001ec8 <ssd1306_TestBorder+0x14>
 8001f32:	79bb      	ldrb	r3, [r7, #6]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d1c7      	bne.n	8001ec8 <ssd1306_TestBorder+0x14>
   
    HAL_Delay(1000);
 8001f38:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f3c:	f000 fcec 	bl	8002918 <HAL_Delay>
}
 8001f40:	bf00      	nop
 8001f42:	3708      	adds	r7, #8
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <ssd1306_TestFonts1>:

void ssd1306_TestFonts1() {
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af02      	add	r7, sp, #8
    uint8_t y = 0;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	71fb      	strb	r3, [r7, #7]
    ssd1306_Fill(Black);
 8001f52:	2000      	movs	r0, #0
 8001f54:	f7ff f876 	bl	8001044 <ssd1306_Fill>

    #ifdef SSD1306_INCLUDE_FONT_16x26
    ssd1306_SetCursor(2, y);
 8001f58:	79fb      	ldrb	r3, [r7, #7]
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	2002      	movs	r0, #2
 8001f5e:	f7ff f9bd 	bl	80012dc <ssd1306_SetCursor>
    ssd1306_WriteString("Font 16x26", Font_16x26, White);
 8001f62:	4b1d      	ldr	r3, [pc, #116]	; (8001fd8 <ssd1306_TestFonts1+0x90>)
 8001f64:	2201      	movs	r2, #1
 8001f66:	9200      	str	r2, [sp, #0]
 8001f68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f6a:	481c      	ldr	r0, [pc, #112]	; (8001fdc <ssd1306_TestFonts1+0x94>)
 8001f6c:	f7ff f990 	bl	8001290 <ssd1306_WriteString>
    y += 26;
 8001f70:	79fb      	ldrb	r3, [r7, #7]
 8001f72:	331a      	adds	r3, #26
 8001f74:	71fb      	strb	r3, [r7, #7]
    #endif

    #ifdef SSD1306_INCLUDE_FONT_11x18
    ssd1306_SetCursor(2, y);
 8001f76:	79fb      	ldrb	r3, [r7, #7]
 8001f78:	4619      	mov	r1, r3
 8001f7a:	2002      	movs	r0, #2
 8001f7c:	f7ff f9ae 	bl	80012dc <ssd1306_SetCursor>
    ssd1306_WriteString("Font 11x18", Font_11x18, White);
 8001f80:	4b17      	ldr	r3, [pc, #92]	; (8001fe0 <ssd1306_TestFonts1+0x98>)
 8001f82:	2201      	movs	r2, #1
 8001f84:	9200      	str	r2, [sp, #0]
 8001f86:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f88:	4816      	ldr	r0, [pc, #88]	; (8001fe4 <ssd1306_TestFonts1+0x9c>)
 8001f8a:	f7ff f981 	bl	8001290 <ssd1306_WriteString>
    y += 18;
 8001f8e:	79fb      	ldrb	r3, [r7, #7]
 8001f90:	3312      	adds	r3, #18
 8001f92:	71fb      	strb	r3, [r7, #7]
    #endif

    #ifdef SSD1306_INCLUDE_FONT_7x10
    ssd1306_SetCursor(2, y);
 8001f94:	79fb      	ldrb	r3, [r7, #7]
 8001f96:	4619      	mov	r1, r3
 8001f98:	2002      	movs	r0, #2
 8001f9a:	f7ff f99f 	bl	80012dc <ssd1306_SetCursor>
    ssd1306_WriteString("Font 7x10", Font_7x10, White);
 8001f9e:	4b12      	ldr	r3, [pc, #72]	; (8001fe8 <ssd1306_TestFonts1+0xa0>)
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	9200      	str	r2, [sp, #0]
 8001fa4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fa6:	4811      	ldr	r0, [pc, #68]	; (8001fec <ssd1306_TestFonts1+0xa4>)
 8001fa8:	f7ff f972 	bl	8001290 <ssd1306_WriteString>
    y += 10;
 8001fac:	79fb      	ldrb	r3, [r7, #7]
 8001fae:	330a      	adds	r3, #10
 8001fb0:	71fb      	strb	r3, [r7, #7]
    #endif

    #ifdef SSD1306_INCLUDE_FONT_6x8
    ssd1306_SetCursor(2, y);
 8001fb2:	79fb      	ldrb	r3, [r7, #7]
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	2002      	movs	r0, #2
 8001fb8:	f7ff f990 	bl	80012dc <ssd1306_SetCursor>
    ssd1306_WriteString("Font 6x8", Font_6x8, White);
 8001fbc:	4b0c      	ldr	r3, [pc, #48]	; (8001ff0 <ssd1306_TestFonts1+0xa8>)
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	9200      	str	r2, [sp, #0]
 8001fc2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fc4:	480b      	ldr	r0, [pc, #44]	; (8001ff4 <ssd1306_TestFonts1+0xac>)
 8001fc6:	f7ff f963 	bl	8001290 <ssd1306_WriteString>
    #endif

    ssd1306_UpdateScreen();
 8001fca:	f7ff f853 	bl	8001074 <ssd1306_UpdateScreen>
}
 8001fce:	bf00      	nop
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	0800a03c 	.word	0x0800a03c
 8001fdc:	080053f8 	.word	0x080053f8
 8001fe0:	0800a030 	.word	0x0800a030
 8001fe4:	08005404 	.word	0x08005404
 8001fe8:	0800a024 	.word	0x0800a024
 8001fec:	08005410 	.word	0x08005410
 8001ff0:	0800a018 	.word	0x0800a018
 8001ff4:	0800541c 	.word	0x0800541c

08001ff8 <ssd1306_TestFonts2>:

/*
 * This test shows how an 128x64 px OLED can replace a 0802 LCD.
 */
void ssd1306_TestFonts2() {
 8001ff8:	b590      	push	{r4, r7, lr}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af02      	add	r7, sp, #8
#ifdef SSD1306_INCLUDE_FONT_16x24
    uint8_t x1, y1, x2, y2;

    ssd1306_Fill(Black);
 8001ffe:	2000      	movs	r0, #0
 8002000:	f7ff f820 	bl	8001044 <ssd1306_Fill>

    ssd1306_SetCursor(0, 4);
 8002004:	2104      	movs	r1, #4
 8002006:	2000      	movs	r0, #0
 8002008:	f7ff f968 	bl	80012dc <ssd1306_SetCursor>
    ssd1306_WriteString("18.092.5", Font_16x24, White);
 800200c:	4b14      	ldr	r3, [pc, #80]	; (8002060 <ssd1306_TestFonts2+0x68>)
 800200e:	2201      	movs	r2, #1
 8002010:	9200      	str	r2, [sp, #0]
 8002012:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002014:	4813      	ldr	r0, [pc, #76]	; (8002064 <ssd1306_TestFonts2+0x6c>)
 8002016:	f7ff f93b 	bl	8001290 <ssd1306_WriteString>
    ssd1306_SetCursor(0, 4+24+8);
 800201a:	2124      	movs	r1, #36	; 0x24
 800201c:	2000      	movs	r0, #0
 800201e:	f7ff f95d 	bl	80012dc <ssd1306_SetCursor>
    ssd1306_WriteString("RIT+1000", Font_16x24, White);
 8002022:	4b0f      	ldr	r3, [pc, #60]	; (8002060 <ssd1306_TestFonts2+0x68>)
 8002024:	2201      	movs	r2, #1
 8002026:	9200      	str	r2, [sp, #0]
 8002028:	cb0e      	ldmia	r3, {r1, r2, r3}
 800202a:	480f      	ldr	r0, [pc, #60]	; (8002068 <ssd1306_TestFonts2+0x70>)
 800202c:	f7ff f930 	bl	8001290 <ssd1306_WriteString>

    // underline
    x1 = 6*16;
 8002030:	2360      	movs	r3, #96	; 0x60
 8002032:	71fb      	strb	r3, [r7, #7]
    y1 = 4+24+8+24;
 8002034:	233c      	movs	r3, #60	; 0x3c
 8002036:	71bb      	strb	r3, [r7, #6]
    x2 = x1+16;
 8002038:	79fb      	ldrb	r3, [r7, #7]
 800203a:	3310      	adds	r3, #16
 800203c:	717b      	strb	r3, [r7, #5]
    y2 = y1+2;
 800203e:	79bb      	ldrb	r3, [r7, #6]
 8002040:	3302      	adds	r3, #2
 8002042:	713b      	strb	r3, [r7, #4]
    ssd1306_FillRectangle(x1, y1, x2, y2, White);
 8002044:	793b      	ldrb	r3, [r7, #4]
 8002046:	797a      	ldrb	r2, [r7, #5]
 8002048:	79b9      	ldrb	r1, [r7, #6]
 800204a:	79f8      	ldrb	r0, [r7, #7]
 800204c:	2401      	movs	r4, #1
 800204e:	9400      	str	r4, [sp, #0]
 8002050:	f7ff fd99 	bl	8001b86 <ssd1306_FillRectangle>

    ssd1306_UpdateScreen();
 8002054:	f7ff f80e 	bl	8001074 <ssd1306_UpdateScreen>
#endif
}
 8002058:	bf00      	nop
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	bd90      	pop	{r4, r7, pc}
 8002060:	0800a048 	.word	0x0800a048
 8002064:	08005428 	.word	0x08005428
 8002068:	08005434 	.word	0x08005434

0800206c <ssd1306_TestFonts3>:

/*
 * Test of proportional (non-monospaced) font.
 */
void ssd1306_TestFonts3() {
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af02      	add	r7, sp, #8
    ssd1306_Fill(Black);
 8002072:	2000      	movs	r0, #0
 8002074:	f7fe ffe6 	bl	8001044 <ssd1306_Fill>
#ifdef SSD1306_INCLUDE_FONT_16x15
    ssd1306_SetCursor(4, 4);
 8002078:	2104      	movs	r1, #4
 800207a:	2004      	movs	r0, #4
 800207c:	f7ff f92e 	bl	80012dc <ssd1306_SetCursor>
    ssd1306_WriteString("Proportional", Font_16x15, White);
 8002080:	4b10      	ldr	r3, [pc, #64]	; (80020c4 <ssd1306_TestFonts3+0x58>)
 8002082:	2201      	movs	r2, #1
 8002084:	9200      	str	r2, [sp, #0]
 8002086:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002088:	480f      	ldr	r0, [pc, #60]	; (80020c8 <ssd1306_TestFonts3+0x5c>)
 800208a:	f7ff f901 	bl	8001290 <ssd1306_WriteString>
    ssd1306_SetCursor(4, 24);
 800208e:	2118      	movs	r1, #24
 8002090:	2004      	movs	r0, #4
 8002092:	f7ff f923 	bl	80012dc <ssd1306_SetCursor>
    ssd1306_WriteString("text... Sweet!", Font_16x15, White);
 8002096:	4b0b      	ldr	r3, [pc, #44]	; (80020c4 <ssd1306_TestFonts3+0x58>)
 8002098:	2201      	movs	r2, #1
 800209a:	9200      	str	r2, [sp, #0]
 800209c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800209e:	480b      	ldr	r0, [pc, #44]	; (80020cc <ssd1306_TestFonts3+0x60>)
 80020a0:	f7ff f8f6 	bl	8001290 <ssd1306_WriteString>
    ssd1306_SetCursor(4, 44);
 80020a4:	212c      	movs	r1, #44	; 0x2c
 80020a6:	2004      	movs	r0, #4
 80020a8:	f7ff f918 	bl	80012dc <ssd1306_SetCursor>
    ssd1306_WriteString("3.1415  04:20", Font_16x15, White);
 80020ac:	4b05      	ldr	r3, [pc, #20]	; (80020c4 <ssd1306_TestFonts3+0x58>)
 80020ae:	2201      	movs	r2, #1
 80020b0:	9200      	str	r2, [sp, #0]
 80020b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020b4:	4806      	ldr	r0, [pc, #24]	; (80020d0 <ssd1306_TestFonts3+0x64>)
 80020b6:	f7ff f8eb 	bl	8001290 <ssd1306_WriteString>
    ssd1306_SetCursor(4, 24);
    ssd1306_WriteString("Font not", Font_11x18, White);
    ssd1306_SetCursor(4, 44);
    ssd1306_WriteString("included!", Font_11x18, White);
#endif
    ssd1306_UpdateScreen();
 80020ba:	f7fe ffdb 	bl	8001074 <ssd1306_UpdateScreen>
}
 80020be:	bf00      	nop
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	0800a054 	.word	0x0800a054
 80020c8:	08005440 	.word	0x08005440
 80020cc:	08005450 	.word	0x08005450
 80020d0:	08005460 	.word	0x08005460

080020d4 <ssd1306_TestFPS>:

void ssd1306_TestFPS() {
 80020d4:	b5b0      	push	{r4, r5, r7, lr}
 80020d6:	b09a      	sub	sp, #104	; 0x68
 80020d8:	af02      	add	r7, sp, #8
    ssd1306_Fill(White);
 80020da:	2001      	movs	r0, #1
 80020dc:	f7fe ffb2 	bl	8001044 <ssd1306_Fill>
   
    uint32_t start = HAL_GetTick();
 80020e0:	f000 fc0e 	bl	8002900 <HAL_GetTick>
 80020e4:	65b8      	str	r0, [r7, #88]	; 0x58
    uint32_t end = start;
 80020e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020e8:	657b      	str	r3, [r7, #84]	; 0x54
    int fps = 0;
 80020ea:	2300      	movs	r3, #0
 80020ec:	65fb      	str	r3, [r7, #92]	; 0x5c
    char message[] = "ABCDEFGHIJK";
 80020ee:	4a45      	ldr	r2, [pc, #276]	; (8002204 <ssd1306_TestFPS+0x130>)
 80020f0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80020f4:	ca07      	ldmia	r2, {r0, r1, r2}
 80020f6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   
    ssd1306_SetCursor(2,0);
 80020fa:	2100      	movs	r1, #0
 80020fc:	2002      	movs	r0, #2
 80020fe:	f7ff f8ed 	bl	80012dc <ssd1306_SetCursor>
    ssd1306_WriteString("Testing...", Font_11x18, Black);
 8002102:	4b41      	ldr	r3, [pc, #260]	; (8002208 <ssd1306_TestFPS+0x134>)
 8002104:	2200      	movs	r2, #0
 8002106:	9200      	str	r2, [sp, #0]
 8002108:	cb0e      	ldmia	r3, {r1, r2, r3}
 800210a:	4840      	ldr	r0, [pc, #256]	; (800220c <ssd1306_TestFPS+0x138>)
 800210c:	f7ff f8c0 	bl	8001290 <ssd1306_WriteString>
    ssd1306_SetCursor(2, 18*2);
 8002110:	2124      	movs	r1, #36	; 0x24
 8002112:	2002      	movs	r0, #2
 8002114:	f7ff f8e2 	bl	80012dc <ssd1306_SetCursor>
    ssd1306_WriteString("0123456789A", Font_11x18, Black);
 8002118:	4b3b      	ldr	r3, [pc, #236]	; (8002208 <ssd1306_TestFPS+0x134>)
 800211a:	2200      	movs	r2, #0
 800211c:	9200      	str	r2, [sp, #0]
 800211e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002120:	483b      	ldr	r0, [pc, #236]	; (8002210 <ssd1306_TestFPS+0x13c>)
 8002122:	f7ff f8b5 	bl	8001290 <ssd1306_WriteString>
   
    do {
        ssd1306_SetCursor(2, 18);
 8002126:	2112      	movs	r1, #18
 8002128:	2002      	movs	r0, #2
 800212a:	f7ff f8d7 	bl	80012dc <ssd1306_SetCursor>
        ssd1306_WriteString(message, Font_11x18, Black);
 800212e:	4b36      	ldr	r3, [pc, #216]	; (8002208 <ssd1306_TestFPS+0x134>)
 8002130:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8002134:	2200      	movs	r2, #0
 8002136:	9200      	str	r2, [sp, #0]
 8002138:	cb0e      	ldmia	r3, {r1, r2, r3}
 800213a:	f7ff f8a9 	bl	8001290 <ssd1306_WriteString>
        ssd1306_UpdateScreen();
 800213e:	f7fe ff99 	bl	8001074 <ssd1306_UpdateScreen>
       
        char ch = message[0];
 8002142:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8002146:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        memmove(message, message+1, sizeof(message)-2);
 800214a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800214e:	3301      	adds	r3, #1
 8002150:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8002154:	220a      	movs	r2, #10
 8002156:	4619      	mov	r1, r3
 8002158:	f001 ff40 	bl	8003fdc <memmove>
        message[sizeof(message)-2] = ch;
 800215c:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8002160:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

        fps++;
 8002164:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002166:	3301      	adds	r3, #1
 8002168:	65fb      	str	r3, [r7, #92]	; 0x5c
        end = HAL_GetTick();
 800216a:	f000 fbc9 	bl	8002900 <HAL_GetTick>
 800216e:	6578      	str	r0, [r7, #84]	; 0x54
    } while((end - start) < 5000);
 8002170:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002172:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	f241 3287 	movw	r2, #4999	; 0x1387
 800217a:	4293      	cmp	r3, r2
 800217c:	d9d3      	bls.n	8002126 <ssd1306_TestFPS+0x52>
   
    HAL_Delay(5000);
 800217e:	f241 3088 	movw	r0, #5000	; 0x1388
 8002182:	f000 fbc9 	bl	8002918 <HAL_Delay>

    char buff[64];
    fps = (float)fps / ((end - start) / 1000.0);
 8002186:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002188:	ee07 3a90 	vmov	s15, r3
 800218c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002190:	ee17 0a90 	vmov	r0, s15
 8002194:	f7fe f9d8 	bl	8000548 <__aeabi_f2d>
 8002198:	4604      	mov	r4, r0
 800219a:	460d      	mov	r5, r1
 800219c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800219e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7fe f9ae 	bl	8000504 <__aeabi_ui2d>
 80021a8:	f04f 0200 	mov.w	r2, #0
 80021ac:	4b19      	ldr	r3, [pc, #100]	; (8002214 <ssd1306_TestFPS+0x140>)
 80021ae:	f7fe fb4d 	bl	800084c <__aeabi_ddiv>
 80021b2:	4602      	mov	r2, r0
 80021b4:	460b      	mov	r3, r1
 80021b6:	4620      	mov	r0, r4
 80021b8:	4629      	mov	r1, r5
 80021ba:	f7fe fb47 	bl	800084c <__aeabi_ddiv>
 80021be:	4602      	mov	r2, r0
 80021c0:	460b      	mov	r3, r1
 80021c2:	4610      	mov	r0, r2
 80021c4:	4619      	mov	r1, r3
 80021c6:	f7fe fc29 	bl	8000a1c <__aeabi_d2iz>
 80021ca:	4603      	mov	r3, r0
 80021cc:	65fb      	str	r3, [r7, #92]	; 0x5c
    snprintf(buff, sizeof(buff), "~%d FPS", fps);
 80021ce:	1d38      	adds	r0, r7, #4
 80021d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021d2:	4a11      	ldr	r2, [pc, #68]	; (8002218 <ssd1306_TestFPS+0x144>)
 80021d4:	2140      	movs	r1, #64	; 0x40
 80021d6:	f001 fecd 	bl	8003f74 <sniprintf>
   
    ssd1306_Fill(White);
 80021da:	2001      	movs	r0, #1
 80021dc:	f7fe ff32 	bl	8001044 <ssd1306_Fill>
    ssd1306_SetCursor(2, 2);
 80021e0:	2102      	movs	r1, #2
 80021e2:	2002      	movs	r0, #2
 80021e4:	f7ff f87a 	bl	80012dc <ssd1306_SetCursor>
    ssd1306_WriteString(buff, Font_11x18, Black);
 80021e8:	4b07      	ldr	r3, [pc, #28]	; (8002208 <ssd1306_TestFPS+0x134>)
 80021ea:	1d38      	adds	r0, r7, #4
 80021ec:	2200      	movs	r2, #0
 80021ee:	9200      	str	r2, [sp, #0]
 80021f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021f2:	f7ff f84d 	bl	8001290 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 80021f6:	f7fe ff3d 	bl	8001074 <ssd1306_UpdateScreen>
}
 80021fa:	bf00      	nop
 80021fc:	3760      	adds	r7, #96	; 0x60
 80021fe:	46bd      	mov	sp, r7
 8002200:	bdb0      	pop	{r4, r5, r7, pc}
 8002202:	bf00      	nop
 8002204:	08005490 	.word	0x08005490
 8002208:	0800a030 	.word	0x0800a030
 800220c:	08005470 	.word	0x08005470
 8002210:	0800547c 	.word	0x0800547c
 8002214:	408f4000 	.word	0x408f4000
 8002218:	08005488 	.word	0x08005488

0800221c <ssd1306_TestLine>:

void ssd1306_TestLine() {
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af02      	add	r7, sp, #8

  ssd1306_Line(1,1,SSD1306_WIDTH - 1,SSD1306_HEIGHT - 1,White);
 8002222:	2301      	movs	r3, #1
 8002224:	9300      	str	r3, [sp, #0]
 8002226:	233f      	movs	r3, #63	; 0x3f
 8002228:	227f      	movs	r2, #127	; 0x7f
 800222a:	2101      	movs	r1, #1
 800222c:	2001      	movs	r0, #1
 800222e:	f7ff f86d 	bl	800130c <ssd1306_Line>
  ssd1306_Line(SSD1306_WIDTH - 1,1,1,SSD1306_HEIGHT - 1,White);
 8002232:	2301      	movs	r3, #1
 8002234:	9300      	str	r3, [sp, #0]
 8002236:	233f      	movs	r3, #63	; 0x3f
 8002238:	2201      	movs	r2, #1
 800223a:	2101      	movs	r1, #1
 800223c:	207f      	movs	r0, #127	; 0x7f
 800223e:	f7ff f865 	bl	800130c <ssd1306_Line>
  ssd1306_UpdateScreen();
 8002242:	f7fe ff17 	bl	8001074 <ssd1306_UpdateScreen>
  return;
 8002246:	bf00      	nop
}
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <ssd1306_TestRectangle>:

void ssd1306_TestRectangle() {
 800224c:	b590      	push	{r4, r7, lr}
 800224e:	b085      	sub	sp, #20
 8002250:	af02      	add	r7, sp, #8
  uint32_t delta;

  for(delta = 0; delta < 5; delta ++) {
 8002252:	2300      	movs	r3, #0
 8002254:	607b      	str	r3, [r7, #4]
 8002256:	e028      	b.n	80022aa <ssd1306_TestRectangle+0x5e>
    ssd1306_DrawRectangle(1 + (5*delta),1 + (5*delta) ,SSD1306_WIDTH-1 - (5*delta),SSD1306_HEIGHT-1 - (5*delta),White);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	b2db      	uxtb	r3, r3
 800225c:	461a      	mov	r2, r3
 800225e:	0092      	lsls	r2, r2, #2
 8002260:	4413      	add	r3, r2
 8002262:	b2db      	uxtb	r3, r3
 8002264:	3301      	adds	r3, #1
 8002266:	b2d8      	uxtb	r0, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	b2db      	uxtb	r3, r3
 800226c:	461a      	mov	r2, r3
 800226e:	0092      	lsls	r2, r2, #2
 8002270:	4413      	add	r3, r2
 8002272:	b2db      	uxtb	r3, r3
 8002274:	3301      	adds	r3, #1
 8002276:	b2d9      	uxtb	r1, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	b2db      	uxtb	r3, r3
 800227c:	461a      	mov	r2, r3
 800227e:	0092      	lsls	r2, r2, #2
 8002280:	4413      	add	r3, r2
 8002282:	b2db      	uxtb	r3, r3
 8002284:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8002288:	b2da      	uxtb	r2, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	b2db      	uxtb	r3, r3
 800228e:	461c      	mov	r4, r3
 8002290:	00a4      	lsls	r4, r4, #2
 8002292:	4423      	add	r3, r4
 8002294:	b2db      	uxtb	r3, r3
 8002296:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800229a:	b2db      	uxtb	r3, r3
 800229c:	2401      	movs	r4, #1
 800229e:	9400      	str	r4, [sp, #0]
 80022a0:	f7ff fc3a 	bl	8001b18 <ssd1306_DrawRectangle>
  for(delta = 0; delta < 5; delta ++) {
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	3301      	adds	r3, #1
 80022a8:	607b      	str	r3, [r7, #4]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2b04      	cmp	r3, #4
 80022ae:	d9d3      	bls.n	8002258 <ssd1306_TestRectangle+0xc>
  }
  ssd1306_UpdateScreen();
 80022b0:	f7fe fee0 	bl	8001074 <ssd1306_UpdateScreen>
  return;
 80022b4:	bf00      	nop
}
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd90      	pop	{r4, r7, pc}

080022bc <ssd1306_TestRectangleFill>:

void ssd1306_TestRectangleFill() {
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af02      	add	r7, sp, #8
  ssd1306_FillRectangle(31, 1, 65, 35, White);
 80022c2:	2301      	movs	r3, #1
 80022c4:	9300      	str	r3, [sp, #0]
 80022c6:	2323      	movs	r3, #35	; 0x23
 80022c8:	2241      	movs	r2, #65	; 0x41
 80022ca:	2101      	movs	r1, #1
 80022cc:	201f      	movs	r0, #31
 80022ce:	f7ff fc5a 	bl	8001b86 <ssd1306_FillRectangle>
  ssd1306_FillRectangle(10, 45, 70, 60, White);
 80022d2:	2301      	movs	r3, #1
 80022d4:	9300      	str	r3, [sp, #0]
 80022d6:	233c      	movs	r3, #60	; 0x3c
 80022d8:	2246      	movs	r2, #70	; 0x46
 80022da:	212d      	movs	r1, #45	; 0x2d
 80022dc:	200a      	movs	r0, #10
 80022de:	f7ff fc52 	bl	8001b86 <ssd1306_FillRectangle>
  ssd1306_FillRectangle(75, 10, 100, 45, White);
 80022e2:	2301      	movs	r3, #1
 80022e4:	9300      	str	r3, [sp, #0]
 80022e6:	232d      	movs	r3, #45	; 0x2d
 80022e8:	2264      	movs	r2, #100	; 0x64
 80022ea:	210a      	movs	r1, #10
 80022ec:	204b      	movs	r0, #75	; 0x4b
 80022ee:	f7ff fc4a 	bl	8001b86 <ssd1306_FillRectangle>
  ssd1306_FillRectangle(55, 30, 80, 55, Black);
 80022f2:	2300      	movs	r3, #0
 80022f4:	9300      	str	r3, [sp, #0]
 80022f6:	2337      	movs	r3, #55	; 0x37
 80022f8:	2250      	movs	r2, #80	; 0x50
 80022fa:	211e      	movs	r1, #30
 80022fc:	2037      	movs	r0, #55	; 0x37
 80022fe:	f7ff fc42 	bl	8001b86 <ssd1306_FillRectangle>
  ssd1306_UpdateScreen();
 8002302:	f7fe feb7 	bl	8001074 <ssd1306_UpdateScreen>
}
 8002306:	bf00      	nop
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}

0800230c <ssd1306_TestRectangleInvert>:

void ssd1306_TestRectangleInvert() {
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af02      	add	r7, sp, #8
#ifdef SSD1306_INCLUDE_FONT_11x18
  ssd1306_SetCursor(2, 0);
 8002312:	2100      	movs	r1, #0
 8002314:	2002      	movs	r0, #2
 8002316:	f7fe ffe1 	bl	80012dc <ssd1306_SetCursor>
  ssd1306_WriteString("Black", Font_11x18, White);
 800231a:	4b27      	ldr	r3, [pc, #156]	; (80023b8 <ssd1306_TestRectangleInvert+0xac>)
 800231c:	2201      	movs	r2, #1
 800231e:	9200      	str	r2, [sp, #0]
 8002320:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002322:	4826      	ldr	r0, [pc, #152]	; (80023bc <ssd1306_TestRectangleInvert+0xb0>)
 8002324:	f7fe ffb4 	bl	8001290 <ssd1306_WriteString>
  ssd1306_SetCursor(2, 20);
 8002328:	2114      	movs	r1, #20
 800232a:	2002      	movs	r0, #2
 800232c:	f7fe ffd6 	bl	80012dc <ssd1306_SetCursor>
  ssd1306_WriteString("on", Font_11x18, White);
 8002330:	4b21      	ldr	r3, [pc, #132]	; (80023b8 <ssd1306_TestRectangleInvert+0xac>)
 8002332:	2201      	movs	r2, #1
 8002334:	9200      	str	r2, [sp, #0]
 8002336:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002338:	4821      	ldr	r0, [pc, #132]	; (80023c0 <ssd1306_TestRectangleInvert+0xb4>)
 800233a:	f7fe ffa9 	bl	8001290 <ssd1306_WriteString>
  ssd1306_SetCursor(2, 40);
 800233e:	2128      	movs	r1, #40	; 0x28
 8002340:	2002      	movs	r0, #2
 8002342:	f7fe ffcb 	bl	80012dc <ssd1306_SetCursor>
  ssd1306_WriteString("White", Font_11x18, White);
 8002346:	4b1c      	ldr	r3, [pc, #112]	; (80023b8 <ssd1306_TestRectangleInvert+0xac>)
 8002348:	2201      	movs	r2, #1
 800234a:	9200      	str	r2, [sp, #0]
 800234c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800234e:	481d      	ldr	r0, [pc, #116]	; (80023c4 <ssd1306_TestRectangleInvert+0xb8>)
 8002350:	f7fe ff9e 	bl	8001290 <ssd1306_WriteString>
  ssd1306_SetCursor(66, 0);
 8002354:	2100      	movs	r1, #0
 8002356:	2042      	movs	r0, #66	; 0x42
 8002358:	f7fe ffc0 	bl	80012dc <ssd1306_SetCursor>
  ssd1306_WriteString("White", Font_11x18, White);
 800235c:	4b16      	ldr	r3, [pc, #88]	; (80023b8 <ssd1306_TestRectangleInvert+0xac>)
 800235e:	2201      	movs	r2, #1
 8002360:	9200      	str	r2, [sp, #0]
 8002362:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002364:	4817      	ldr	r0, [pc, #92]	; (80023c4 <ssd1306_TestRectangleInvert+0xb8>)
 8002366:	f7fe ff93 	bl	8001290 <ssd1306_WriteString>
  ssd1306_SetCursor(66, 20);
 800236a:	2114      	movs	r1, #20
 800236c:	2042      	movs	r0, #66	; 0x42
 800236e:	f7fe ffb5 	bl	80012dc <ssd1306_SetCursor>
  ssd1306_WriteString("on", Font_11x18, White);
 8002372:	4b11      	ldr	r3, [pc, #68]	; (80023b8 <ssd1306_TestRectangleInvert+0xac>)
 8002374:	2201      	movs	r2, #1
 8002376:	9200      	str	r2, [sp, #0]
 8002378:	cb0e      	ldmia	r3, {r1, r2, r3}
 800237a:	4811      	ldr	r0, [pc, #68]	; (80023c0 <ssd1306_TestRectangleInvert+0xb4>)
 800237c:	f7fe ff88 	bl	8001290 <ssd1306_WriteString>
  ssd1306_SetCursor(66, 40);
 8002380:	2128      	movs	r1, #40	; 0x28
 8002382:	2042      	movs	r0, #66	; 0x42
 8002384:	f7fe ffaa 	bl	80012dc <ssd1306_SetCursor>
  ssd1306_WriteString("Black", Font_11x18, White);
 8002388:	4b0b      	ldr	r3, [pc, #44]	; (80023b8 <ssd1306_TestRectangleInvert+0xac>)
 800238a:	2201      	movs	r2, #1
 800238c:	9200      	str	r2, [sp, #0]
 800238e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002390:	480a      	ldr	r0, [pc, #40]	; (80023bc <ssd1306_TestRectangleInvert+0xb0>)
 8002392:	f7fe ff7d 	bl	8001290 <ssd1306_WriteString>
#else
  ssd1306_FillCircle(32, 32, 20, White);
  ssd1306_FillCircle(96, 32, 20, White);
#endif
  ssd1306_InvertRectangle(0,0,63,63);
 8002396:	233f      	movs	r3, #63	; 0x3f
 8002398:	223f      	movs	r2, #63	; 0x3f
 800239a:	2100      	movs	r1, #0
 800239c:	2000      	movs	r0, #0
 800239e:	f7ff fc41 	bl	8001c24 <ssd1306_InvertRectangle>
  /* Test rectangle lies on one 8px page */
  ssd1306_InvertRectangle(2,58,125,60);
 80023a2:	233c      	movs	r3, #60	; 0x3c
 80023a4:	227d      	movs	r2, #125	; 0x7d
 80023a6:	213a      	movs	r1, #58	; 0x3a
 80023a8:	2002      	movs	r0, #2
 80023aa:	f7ff fc3b 	bl	8001c24 <ssd1306_InvertRectangle>
  ssd1306_UpdateScreen();
 80023ae:	f7fe fe61 	bl	8001074 <ssd1306_UpdateScreen>
}
 80023b2:	bf00      	nop
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	0800a030 	.word	0x0800a030
 80023bc:	0800549c 	.word	0x0800549c
 80023c0:	080054a4 	.word	0x080054a4
 80023c4:	080054a8 	.word	0x080054a8

080023c8 <ssd1306_TestCircle>:

void ssd1306_TestCircle() {
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
  uint32_t delta;

  for(delta = 0; delta < 5; delta ++) {
 80023ce:	2300      	movs	r3, #0
 80023d0:	607b      	str	r3, [r7, #4]
 80023d2:	e010      	b.n	80023f6 <ssd1306_TestCircle+0x2e>
    ssd1306_DrawCircle(20*delta+30, 15, 10, White);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	461a      	mov	r2, r3
 80023da:	0092      	lsls	r2, r2, #2
 80023dc:	4413      	add	r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	331e      	adds	r3, #30
 80023e4:	b2d8      	uxtb	r0, r3
 80023e6:	2301      	movs	r3, #1
 80023e8:	220a      	movs	r2, #10
 80023ea:	210f      	movs	r1, #15
 80023ec:	f7ff fa9a 	bl	8001924 <ssd1306_DrawCircle>
  for(delta = 0; delta < 5; delta ++) {
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	3301      	adds	r3, #1
 80023f4:	607b      	str	r3, [r7, #4]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2b04      	cmp	r3, #4
 80023fa:	d9eb      	bls.n	80023d4 <ssd1306_TestCircle+0xc>
  }

  for(delta = 0; delta < 5; delta ++) {
 80023fc:	2300      	movs	r3, #0
 80023fe:	607b      	str	r3, [r7, #4]
 8002400:	e011      	b.n	8002426 <ssd1306_TestCircle+0x5e>
    ssd1306_FillCircle(23*delta+15, 40, 10, White);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	b2db      	uxtb	r3, r3
 8002406:	461a      	mov	r2, r3
 8002408:	0052      	lsls	r2, r2, #1
 800240a:	441a      	add	r2, r3
 800240c:	00d2      	lsls	r2, r2, #3
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	b2db      	uxtb	r3, r3
 8002412:	330f      	adds	r3, #15
 8002414:	b2d8      	uxtb	r0, r3
 8002416:	2301      	movs	r3, #1
 8002418:	220a      	movs	r2, #10
 800241a:	2128      	movs	r1, #40	; 0x28
 800241c:	f7ff fb09 	bl	8001a32 <ssd1306_FillCircle>
  for(delta = 0; delta < 5; delta ++) {
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	3301      	adds	r3, #1
 8002424:	607b      	str	r3, [r7, #4]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2b04      	cmp	r3, #4
 800242a:	d9ea      	bls.n	8002402 <ssd1306_TestCircle+0x3a>
  }

  ssd1306_UpdateScreen();
 800242c:	f7fe fe22 	bl	8001074 <ssd1306_UpdateScreen>
  return;
 8002430:	bf00      	nop
}
 8002432:	3708      	adds	r7, #8
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <ssd1306_TestArc>:

void ssd1306_TestArc() {
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af02      	add	r7, sp, #8
  ssd1306_DrawArc(30, 30, 30, 20, 270, White);
 800243e:	2301      	movs	r3, #1
 8002440:	9301      	str	r3, [sp, #4]
 8002442:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8002446:	9300      	str	r3, [sp, #0]
 8002448:	2314      	movs	r3, #20
 800244a:	221e      	movs	r2, #30
 800244c:	211e      	movs	r1, #30
 800244e:	201e      	movs	r0, #30
 8002450:	f7ff f840 	bl	80014d4 <ssd1306_DrawArc>
  ssd1306_DrawArcWithRadiusLine(80, 55, 10, 30, 270, White);
 8002454:	2301      	movs	r3, #1
 8002456:	9301      	str	r3, [sp, #4]
 8002458:	f44f 7387 	mov.w	r3, #270	; 0x10e
 800245c:	9300      	str	r3, [sp, #0]
 800245e:	231e      	movs	r3, #30
 8002460:	220a      	movs	r2, #10
 8002462:	2137      	movs	r1, #55	; 0x37
 8002464:	2050      	movs	r0, #80	; 0x50
 8002466:	f7ff f91d 	bl	80016a4 <ssd1306_DrawArcWithRadiusLine>
  ssd1306_UpdateScreen();
 800246a:	f7fe fe03 	bl	8001074 <ssd1306_UpdateScreen>
  return;
 800246e:	bf00      	nop
}
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}

08002474 <ssd1306_TestPolyline>:

void ssd1306_TestPolyline() {
 8002474:	b590      	push	{r4, r7, lr}
 8002476:	b085      	sub	sp, #20
 8002478:	af00      	add	r7, sp, #0
  SSD1306_VERTEX loc_vertex[] =
 800247a:	4b08      	ldr	r3, [pc, #32]	; (800249c <ssd1306_TestPolyline+0x28>)
 800247c:	463c      	mov	r4, r7
 800247e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002480:	c407      	stmia	r4!, {r0, r1, r2}
 8002482:	8023      	strh	r3, [r4, #0]
      {45,16},
      {50,10},
      {53,16}
  };

  ssd1306_Polyline(loc_vertex,sizeof(loc_vertex)/sizeof(loc_vertex[0]),White);
 8002484:	463b      	mov	r3, r7
 8002486:	2201      	movs	r2, #1
 8002488:	2107      	movs	r1, #7
 800248a:	4618      	mov	r0, r3
 800248c:	f7fe ffaa 	bl	80013e4 <ssd1306_Polyline>
  ssd1306_UpdateScreen();
 8002490:	f7fe fdf0 	bl	8001074 <ssd1306_UpdateScreen>
  return;
 8002494:	bf00      	nop
}
 8002496:	3714      	adds	r7, #20
 8002498:	46bd      	mov	sp, r7
 800249a:	bd90      	pop	{r4, r7, pc}
 800249c:	080054b0 	.word	0x080054b0

080024a0 <ssd1306_TestDrawBitmap>:

void ssd1306_TestDrawBitmap()
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af02      	add	r7, sp, #8
    ssd1306_Fill(White);
 80024a6:	2001      	movs	r0, #1
 80024a8:	f7fe fdcc 	bl	8001044 <ssd1306_Fill>
    ssd1306_DrawBitmap(0,0,garfield_128x64,128,64,Black);
 80024ac:	2300      	movs	r3, #0
 80024ae:	9301      	str	r3, [sp, #4]
 80024b0:	2340      	movs	r3, #64	; 0x40
 80024b2:	9300      	str	r3, [sp, #0]
 80024b4:	2380      	movs	r3, #128	; 0x80
 80024b6:	4a18      	ldr	r2, [pc, #96]	; (8002518 <ssd1306_TestDrawBitmap+0x78>)
 80024b8:	2100      	movs	r1, #0
 80024ba:	2000      	movs	r0, #0
 80024bc:	f7ff fc6e 	bl	8001d9c <ssd1306_DrawBitmap>
    ssd1306_UpdateScreen();
 80024c0:	f7fe fdd8 	bl	8001074 <ssd1306_UpdateScreen>
    HAL_Delay(3000);
 80024c4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80024c8:	f000 fa26 	bl	8002918 <HAL_Delay>
    ssd1306_Fill(Black);
 80024cc:	2000      	movs	r0, #0
 80024ce:	f7fe fdb9 	bl	8001044 <ssd1306_Fill>
    ssd1306_DrawBitmap(32,0,github_logo_64x64,64,64,White);
 80024d2:	2301      	movs	r3, #1
 80024d4:	9301      	str	r3, [sp, #4]
 80024d6:	2340      	movs	r3, #64	; 0x40
 80024d8:	9300      	str	r3, [sp, #0]
 80024da:	2340      	movs	r3, #64	; 0x40
 80024dc:	4a0f      	ldr	r2, [pc, #60]	; (800251c <ssd1306_TestDrawBitmap+0x7c>)
 80024de:	2100      	movs	r1, #0
 80024e0:	2020      	movs	r0, #32
 80024e2:	f7ff fc5b 	bl	8001d9c <ssd1306_DrawBitmap>
    ssd1306_UpdateScreen();
 80024e6:	f7fe fdc5 	bl	8001074 <ssd1306_UpdateScreen>
    HAL_Delay(3000);
 80024ea:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80024ee:	f000 fa13 	bl	8002918 <HAL_Delay>
    ssd1306_Fill(White);
 80024f2:	2001      	movs	r0, #1
 80024f4:	f7fe fda6 	bl	8001044 <ssd1306_Fill>
    ssd1306_DrawBitmap(32,0,github_logo_64x64,64,64,Black);
 80024f8:	2300      	movs	r3, #0
 80024fa:	9301      	str	r3, [sp, #4]
 80024fc:	2340      	movs	r3, #64	; 0x40
 80024fe:	9300      	str	r3, [sp, #0]
 8002500:	2340      	movs	r3, #64	; 0x40
 8002502:	4a06      	ldr	r2, [pc, #24]	; (800251c <ssd1306_TestDrawBitmap+0x7c>)
 8002504:	2100      	movs	r1, #0
 8002506:	2020      	movs	r0, #32
 8002508:	f7ff fc48 	bl	8001d9c <ssd1306_DrawBitmap>
    ssd1306_UpdateScreen();
 800250c:	f7fe fdb2 	bl	8001074 <ssd1306_UpdateScreen>
}
 8002510:	bf00      	nop
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	0800a060 	.word	0x0800a060
 800251c:	0800a460 	.word	0x0800a460

08002520 <ssd1306_TestAll>:

void ssd1306_TestAll() {
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
    ssd1306_Init();
 8002524:	f7fe fd24 	bl	8000f70 <ssd1306_Init>

    ssd1306_TestFPS();
 8002528:	f7ff fdd4 	bl	80020d4 <ssd1306_TestFPS>
    HAL_Delay(3000);
 800252c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002530:	f000 f9f2 	bl	8002918 <HAL_Delay>
    ssd1306_TestBorder();
 8002534:	f7ff fcbe 	bl	8001eb4 <ssd1306_TestBorder>
    ssd1306_TestFonts1();
 8002538:	f7ff fd06 	bl	8001f48 <ssd1306_TestFonts1>
    HAL_Delay(3000);
 800253c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002540:	f000 f9ea 	bl	8002918 <HAL_Delay>
    ssd1306_TestFonts2();
 8002544:	f7ff fd58 	bl	8001ff8 <ssd1306_TestFonts2>
    HAL_Delay(3000);
 8002548:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800254c:	f000 f9e4 	bl	8002918 <HAL_Delay>
    ssd1306_TestFonts3();
 8002550:	f7ff fd8c 	bl	800206c <ssd1306_TestFonts3>
    HAL_Delay(3000);
 8002554:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002558:	f000 f9de 	bl	8002918 <HAL_Delay>
    ssd1306_Fill(Black);
 800255c:	2000      	movs	r0, #0
 800255e:	f7fe fd71 	bl	8001044 <ssd1306_Fill>
    ssd1306_TestRectangle();
 8002562:	f7ff fe73 	bl	800224c <ssd1306_TestRectangle>
    ssd1306_TestLine();
 8002566:	f7ff fe59 	bl	800221c <ssd1306_TestLine>
    HAL_Delay(3000);
 800256a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800256e:	f000 f9d3 	bl	8002918 <HAL_Delay>
    ssd1306_Fill(Black);
 8002572:	2000      	movs	r0, #0
 8002574:	f7fe fd66 	bl	8001044 <ssd1306_Fill>
    ssd1306_TestRectangleFill();
 8002578:	f7ff fea0 	bl	80022bc <ssd1306_TestRectangleFill>
    HAL_Delay(3000);
 800257c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002580:	f000 f9ca 	bl	8002918 <HAL_Delay>
    ssd1306_Fill(Black);
 8002584:	2000      	movs	r0, #0
 8002586:	f7fe fd5d 	bl	8001044 <ssd1306_Fill>
    ssd1306_TestRectangleInvert();
 800258a:	f7ff febf 	bl	800230c <ssd1306_TestRectangleInvert>
    HAL_Delay(3000);
 800258e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002592:	f000 f9c1 	bl	8002918 <HAL_Delay>
    ssd1306_Fill(Black);
 8002596:	2000      	movs	r0, #0
 8002598:	f7fe fd54 	bl	8001044 <ssd1306_Fill>
    ssd1306_TestPolyline();
 800259c:	f7ff ff6a 	bl	8002474 <ssd1306_TestPolyline>
    HAL_Delay(3000);
 80025a0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80025a4:	f000 f9b8 	bl	8002918 <HAL_Delay>
    ssd1306_Fill(Black);
 80025a8:	2000      	movs	r0, #0
 80025aa:	f7fe fd4b 	bl	8001044 <ssd1306_Fill>
    ssd1306_TestArc();
 80025ae:	f7ff ff43 	bl	8002438 <ssd1306_TestArc>
    HAL_Delay(3000);
 80025b2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80025b6:	f000 f9af 	bl	8002918 <HAL_Delay>
    ssd1306_Fill(Black);
 80025ba:	2000      	movs	r0, #0
 80025bc:	f7fe fd42 	bl	8001044 <ssd1306_Fill>
    ssd1306_TestCircle();
 80025c0:	f7ff ff02 	bl	80023c8 <ssd1306_TestCircle>
    HAL_Delay(3000);
 80025c4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80025c8:	f000 f9a6 	bl	8002918 <HAL_Delay>
    ssd1306_TestDrawBitmap();
 80025cc:	f7ff ff68 	bl	80024a0 <ssd1306_TestDrawBitmap>
    HAL_Delay(3000);
 80025d0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80025d4:	f000 f9a0 	bl	8002918 <HAL_Delay>
}
 80025d8:	bf00      	nop
 80025da:	bd80      	pop	{r7, pc}

080025dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025e2:	2300      	movs	r3, #0
 80025e4:	607b      	str	r3, [r7, #4]
 80025e6:	4b10      	ldr	r3, [pc, #64]	; (8002628 <HAL_MspInit+0x4c>)
 80025e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ea:	4a0f      	ldr	r2, [pc, #60]	; (8002628 <HAL_MspInit+0x4c>)
 80025ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025f0:	6453      	str	r3, [r2, #68]	; 0x44
 80025f2:	4b0d      	ldr	r3, [pc, #52]	; (8002628 <HAL_MspInit+0x4c>)
 80025f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025fa:	607b      	str	r3, [r7, #4]
 80025fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025fe:	2300      	movs	r3, #0
 8002600:	603b      	str	r3, [r7, #0]
 8002602:	4b09      	ldr	r3, [pc, #36]	; (8002628 <HAL_MspInit+0x4c>)
 8002604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002606:	4a08      	ldr	r2, [pc, #32]	; (8002628 <HAL_MspInit+0x4c>)
 8002608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800260c:	6413      	str	r3, [r2, #64]	; 0x40
 800260e:	4b06      	ldr	r3, [pc, #24]	; (8002628 <HAL_MspInit+0x4c>)
 8002610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002616:	603b      	str	r3, [r7, #0]
 8002618:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800261a:	bf00      	nop
 800261c:	370c      	adds	r7, #12
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	40023800 	.word	0x40023800

0800262c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b08a      	sub	sp, #40	; 0x28
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002634:	f107 0314 	add.w	r3, r7, #20
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]
 800263c:	605a      	str	r2, [r3, #4]
 800263e:	609a      	str	r2, [r3, #8]
 8002640:	60da      	str	r2, [r3, #12]
 8002642:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a28      	ldr	r2, [pc, #160]	; (80026ec <HAL_I2C_MspInit+0xc0>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d14a      	bne.n	80026e4 <HAL_I2C_MspInit+0xb8>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800264e:	2300      	movs	r3, #0
 8002650:	613b      	str	r3, [r7, #16]
 8002652:	4b27      	ldr	r3, [pc, #156]	; (80026f0 <HAL_I2C_MspInit+0xc4>)
 8002654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002656:	4a26      	ldr	r2, [pc, #152]	; (80026f0 <HAL_I2C_MspInit+0xc4>)
 8002658:	f043 0301 	orr.w	r3, r3, #1
 800265c:	6313      	str	r3, [r2, #48]	; 0x30
 800265e:	4b24      	ldr	r3, [pc, #144]	; (80026f0 <HAL_I2C_MspInit+0xc4>)
 8002660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	613b      	str	r3, [r7, #16]
 8002668:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800266a:	2300      	movs	r3, #0
 800266c:	60fb      	str	r3, [r7, #12]
 800266e:	4b20      	ldr	r3, [pc, #128]	; (80026f0 <HAL_I2C_MspInit+0xc4>)
 8002670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002672:	4a1f      	ldr	r2, [pc, #124]	; (80026f0 <HAL_I2C_MspInit+0xc4>)
 8002674:	f043 0302 	orr.w	r3, r3, #2
 8002678:	6313      	str	r3, [r2, #48]	; 0x30
 800267a:	4b1d      	ldr	r3, [pc, #116]	; (80026f0 <HAL_I2C_MspInit+0xc4>)
 800267c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	60fb      	str	r3, [r7, #12]
 8002684:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PB4     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002686:	f44f 7380 	mov.w	r3, #256	; 0x100
 800268a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800268c:	2312      	movs	r3, #18
 800268e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002690:	2300      	movs	r3, #0
 8002692:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002694:	2303      	movs	r3, #3
 8002696:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002698:	2304      	movs	r3, #4
 800269a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800269c:	f107 0314 	add.w	r3, r7, #20
 80026a0:	4619      	mov	r1, r3
 80026a2:	4814      	ldr	r0, [pc, #80]	; (80026f4 <HAL_I2C_MspInit+0xc8>)
 80026a4:	f000 fa42 	bl	8002b2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80026a8:	2310      	movs	r3, #16
 80026aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026ac:	2312      	movs	r3, #18
 80026ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b0:	2300      	movs	r3, #0
 80026b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026b4:	2303      	movs	r3, #3
 80026b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 80026b8:	2309      	movs	r3, #9
 80026ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026bc:	f107 0314 	add.w	r3, r7, #20
 80026c0:	4619      	mov	r1, r3
 80026c2:	480d      	ldr	r0, [pc, #52]	; (80026f8 <HAL_I2C_MspInit+0xcc>)
 80026c4:	f000 fa32 	bl	8002b2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80026c8:	2300      	movs	r3, #0
 80026ca:	60bb      	str	r3, [r7, #8]
 80026cc:	4b08      	ldr	r3, [pc, #32]	; (80026f0 <HAL_I2C_MspInit+0xc4>)
 80026ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d0:	4a07      	ldr	r2, [pc, #28]	; (80026f0 <HAL_I2C_MspInit+0xc4>)
 80026d2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80026d6:	6413      	str	r3, [r2, #64]	; 0x40
 80026d8:	4b05      	ldr	r3, [pc, #20]	; (80026f0 <HAL_I2C_MspInit+0xc4>)
 80026da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80026e0:	60bb      	str	r3, [r7, #8]
 80026e2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80026e4:	bf00      	nop
 80026e6:	3728      	adds	r7, #40	; 0x28
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	40005c00 	.word	0x40005c00
 80026f0:	40023800 	.word	0x40023800
 80026f4:	40020000 	.word	0x40020000
 80026f8:	40020400 	.word	0x40020400

080026fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002700:	e7fe      	b.n	8002700 <NMI_Handler+0x4>

08002702 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002702:	b480      	push	{r7}
 8002704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002706:	e7fe      	b.n	8002706 <HardFault_Handler+0x4>

08002708 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800270c:	e7fe      	b.n	800270c <MemManage_Handler+0x4>

0800270e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800270e:	b480      	push	{r7}
 8002710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002712:	e7fe      	b.n	8002712 <BusFault_Handler+0x4>

08002714 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002718:	e7fe      	b.n	8002718 <UsageFault_Handler+0x4>

0800271a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800271a:	b480      	push	{r7}
 800271c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800271e:	bf00      	nop
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800272c:	bf00      	nop
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr

08002736 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002736:	b480      	push	{r7}
 8002738:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800273a:	bf00      	nop
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002748:	f000 f8c6 	bl	80028d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800274c:	bf00      	nop
 800274e:	bd80      	pop	{r7, pc}

08002750 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b086      	sub	sp, #24
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002758:	4a14      	ldr	r2, [pc, #80]	; (80027ac <_sbrk+0x5c>)
 800275a:	4b15      	ldr	r3, [pc, #84]	; (80027b0 <_sbrk+0x60>)
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002764:	4b13      	ldr	r3, [pc, #76]	; (80027b4 <_sbrk+0x64>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d102      	bne.n	8002772 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800276c:	4b11      	ldr	r3, [pc, #68]	; (80027b4 <_sbrk+0x64>)
 800276e:	4a12      	ldr	r2, [pc, #72]	; (80027b8 <_sbrk+0x68>)
 8002770:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002772:	4b10      	ldr	r3, [pc, #64]	; (80027b4 <_sbrk+0x64>)
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4413      	add	r3, r2
 800277a:	693a      	ldr	r2, [r7, #16]
 800277c:	429a      	cmp	r2, r3
 800277e:	d207      	bcs.n	8002790 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002780:	f001 fc4e 	bl	8004020 <__errno>
 8002784:	4603      	mov	r3, r0
 8002786:	220c      	movs	r2, #12
 8002788:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800278a:	f04f 33ff 	mov.w	r3, #4294967295
 800278e:	e009      	b.n	80027a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002790:	4b08      	ldr	r3, [pc, #32]	; (80027b4 <_sbrk+0x64>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002796:	4b07      	ldr	r3, [pc, #28]	; (80027b4 <_sbrk+0x64>)
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4413      	add	r3, r2
 800279e:	4a05      	ldr	r2, [pc, #20]	; (80027b4 <_sbrk+0x64>)
 80027a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027a2:	68fb      	ldr	r3, [r7, #12]
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3718      	adds	r7, #24
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	20010000 	.word	0x20010000
 80027b0:	00000400 	.word	0x00000400
 80027b4:	200004d4 	.word	0x200004d4
 80027b8:	20000628 	.word	0x20000628

080027bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027c0:	4b06      	ldr	r3, [pc, #24]	; (80027dc <SystemInit+0x20>)
 80027c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c6:	4a05      	ldr	r2, [pc, #20]	; (80027dc <SystemInit+0x20>)
 80027c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027d0:	bf00      	nop
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	e000ed00 	.word	0xe000ed00

080027e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80027e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002818 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80027e4:	480d      	ldr	r0, [pc, #52]	; (800281c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80027e6:	490e      	ldr	r1, [pc, #56]	; (8002820 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80027e8:	4a0e      	ldr	r2, [pc, #56]	; (8002824 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80027ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027ec:	e002      	b.n	80027f4 <LoopCopyDataInit>

080027ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027f2:	3304      	adds	r3, #4

080027f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027f8:	d3f9      	bcc.n	80027ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027fa:	4a0b      	ldr	r2, [pc, #44]	; (8002828 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80027fc:	4c0b      	ldr	r4, [pc, #44]	; (800282c <LoopFillZerobss+0x26>)
  movs r3, #0
 80027fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002800:	e001      	b.n	8002806 <LoopFillZerobss>

08002802 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002802:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002804:	3204      	adds	r2, #4

08002806 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002806:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002808:	d3fb      	bcc.n	8002802 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800280a:	f7ff ffd7 	bl	80027bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800280e:	f001 fc0d 	bl	800402c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002812:	f7fe faa9 	bl	8000d68 <main>
  bx  lr    
 8002816:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002818:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800281c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002820:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8002824:	0800aa8c 	.word	0x0800aa8c
  ldr r2, =_sbss
 8002828:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800282c:	20000624 	.word	0x20000624

08002830 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002830:	e7fe      	b.n	8002830 <ADC_IRQHandler>
	...

08002834 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002838:	4b0e      	ldr	r3, [pc, #56]	; (8002874 <HAL_Init+0x40>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a0d      	ldr	r2, [pc, #52]	; (8002874 <HAL_Init+0x40>)
 800283e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002842:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002844:	4b0b      	ldr	r3, [pc, #44]	; (8002874 <HAL_Init+0x40>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a0a      	ldr	r2, [pc, #40]	; (8002874 <HAL_Init+0x40>)
 800284a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800284e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002850:	4b08      	ldr	r3, [pc, #32]	; (8002874 <HAL_Init+0x40>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a07      	ldr	r2, [pc, #28]	; (8002874 <HAL_Init+0x40>)
 8002856:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800285a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800285c:	2003      	movs	r0, #3
 800285e:	f000 f931 	bl	8002ac4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002862:	200f      	movs	r0, #15
 8002864:	f000 f808 	bl	8002878 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002868:	f7ff feb8 	bl	80025dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	40023c00 	.word	0x40023c00

08002878 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002880:	4b12      	ldr	r3, [pc, #72]	; (80028cc <HAL_InitTick+0x54>)
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	4b12      	ldr	r3, [pc, #72]	; (80028d0 <HAL_InitTick+0x58>)
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	4619      	mov	r1, r3
 800288a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800288e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002892:	fbb2 f3f3 	udiv	r3, r2, r3
 8002896:	4618      	mov	r0, r3
 8002898:	f000 f93b 	bl	8002b12 <HAL_SYSTICK_Config>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e00e      	b.n	80028c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2b0f      	cmp	r3, #15
 80028aa:	d80a      	bhi.n	80028c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028ac:	2200      	movs	r2, #0
 80028ae:	6879      	ldr	r1, [r7, #4]
 80028b0:	f04f 30ff 	mov.w	r0, #4294967295
 80028b4:	f000 f911 	bl	8002ada <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028b8:	4a06      	ldr	r2, [pc, #24]	; (80028d4 <HAL_InitTick+0x5c>)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028be:	2300      	movs	r3, #0
 80028c0:	e000      	b.n	80028c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3708      	adds	r7, #8
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	20000000 	.word	0x20000000
 80028d0:	20000008 	.word	0x20000008
 80028d4:	20000004 	.word	0x20000004

080028d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028dc:	4b06      	ldr	r3, [pc, #24]	; (80028f8 <HAL_IncTick+0x20>)
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	461a      	mov	r2, r3
 80028e2:	4b06      	ldr	r3, [pc, #24]	; (80028fc <HAL_IncTick+0x24>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4413      	add	r3, r2
 80028e8:	4a04      	ldr	r2, [pc, #16]	; (80028fc <HAL_IncTick+0x24>)
 80028ea:	6013      	str	r3, [r2, #0]
}
 80028ec:	bf00      	nop
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	20000008 	.word	0x20000008
 80028fc:	200004d8 	.word	0x200004d8

08002900 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  return uwTick;
 8002904:	4b03      	ldr	r3, [pc, #12]	; (8002914 <HAL_GetTick+0x14>)
 8002906:	681b      	ldr	r3, [r3, #0]
}
 8002908:	4618      	mov	r0, r3
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	200004d8 	.word	0x200004d8

08002918 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002920:	f7ff ffee 	bl	8002900 <HAL_GetTick>
 8002924:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002930:	d005      	beq.n	800293e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002932:	4b0a      	ldr	r3, [pc, #40]	; (800295c <HAL_Delay+0x44>)
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	461a      	mov	r2, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	4413      	add	r3, r2
 800293c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800293e:	bf00      	nop
 8002940:	f7ff ffde 	bl	8002900 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	68fa      	ldr	r2, [r7, #12]
 800294c:	429a      	cmp	r2, r3
 800294e:	d8f7      	bhi.n	8002940 <HAL_Delay+0x28>
  {
  }
}
 8002950:	bf00      	nop
 8002952:	bf00      	nop
 8002954:	3710      	adds	r7, #16
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	20000008 	.word	0x20000008

08002960 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002960:	b480      	push	{r7}
 8002962:	b085      	sub	sp, #20
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f003 0307 	and.w	r3, r3, #7
 800296e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002970:	4b0c      	ldr	r3, [pc, #48]	; (80029a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002976:	68ba      	ldr	r2, [r7, #8]
 8002978:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800297c:	4013      	ands	r3, r2
 800297e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002988:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800298c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002990:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002992:	4a04      	ldr	r2, [pc, #16]	; (80029a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	60d3      	str	r3, [r2, #12]
}
 8002998:	bf00      	nop
 800299a:	3714      	adds	r7, #20
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr
 80029a4:	e000ed00 	.word	0xe000ed00

080029a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029ac:	4b04      	ldr	r3, [pc, #16]	; (80029c0 <__NVIC_GetPriorityGrouping+0x18>)
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	0a1b      	lsrs	r3, r3, #8
 80029b2:	f003 0307 	and.w	r3, r3, #7
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr
 80029c0:	e000ed00 	.word	0xe000ed00

080029c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	4603      	mov	r3, r0
 80029cc:	6039      	str	r1, [r7, #0]
 80029ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	db0a      	blt.n	80029ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	b2da      	uxtb	r2, r3
 80029dc:	490c      	ldr	r1, [pc, #48]	; (8002a10 <__NVIC_SetPriority+0x4c>)
 80029de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029e2:	0112      	lsls	r2, r2, #4
 80029e4:	b2d2      	uxtb	r2, r2
 80029e6:	440b      	add	r3, r1
 80029e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029ec:	e00a      	b.n	8002a04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	b2da      	uxtb	r2, r3
 80029f2:	4908      	ldr	r1, [pc, #32]	; (8002a14 <__NVIC_SetPriority+0x50>)
 80029f4:	79fb      	ldrb	r3, [r7, #7]
 80029f6:	f003 030f 	and.w	r3, r3, #15
 80029fa:	3b04      	subs	r3, #4
 80029fc:	0112      	lsls	r2, r2, #4
 80029fe:	b2d2      	uxtb	r2, r2
 8002a00:	440b      	add	r3, r1
 8002a02:	761a      	strb	r2, [r3, #24]
}
 8002a04:	bf00      	nop
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr
 8002a10:	e000e100 	.word	0xe000e100
 8002a14:	e000ed00 	.word	0xe000ed00

08002a18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b089      	sub	sp, #36	; 0x24
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f003 0307 	and.w	r3, r3, #7
 8002a2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	f1c3 0307 	rsb	r3, r3, #7
 8002a32:	2b04      	cmp	r3, #4
 8002a34:	bf28      	it	cs
 8002a36:	2304      	movcs	r3, #4
 8002a38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	3304      	adds	r3, #4
 8002a3e:	2b06      	cmp	r3, #6
 8002a40:	d902      	bls.n	8002a48 <NVIC_EncodePriority+0x30>
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	3b03      	subs	r3, #3
 8002a46:	e000      	b.n	8002a4a <NVIC_EncodePriority+0x32>
 8002a48:	2300      	movs	r3, #0
 8002a4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	fa02 f303 	lsl.w	r3, r2, r3
 8002a56:	43da      	mvns	r2, r3
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	401a      	ands	r2, r3
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a60:	f04f 31ff 	mov.w	r1, #4294967295
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	fa01 f303 	lsl.w	r3, r1, r3
 8002a6a:	43d9      	mvns	r1, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a70:	4313      	orrs	r3, r2
         );
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3724      	adds	r7, #36	; 0x24
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
	...

08002a80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a90:	d301      	bcc.n	8002a96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a92:	2301      	movs	r3, #1
 8002a94:	e00f      	b.n	8002ab6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a96:	4a0a      	ldr	r2, [pc, #40]	; (8002ac0 <SysTick_Config+0x40>)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a9e:	210f      	movs	r1, #15
 8002aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8002aa4:	f7ff ff8e 	bl	80029c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002aa8:	4b05      	ldr	r3, [pc, #20]	; (8002ac0 <SysTick_Config+0x40>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002aae:	4b04      	ldr	r3, [pc, #16]	; (8002ac0 <SysTick_Config+0x40>)
 8002ab0:	2207      	movs	r2, #7
 8002ab2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3708      	adds	r7, #8
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	e000e010 	.word	0xe000e010

08002ac4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f7ff ff47 	bl	8002960 <__NVIC_SetPriorityGrouping>
}
 8002ad2:	bf00      	nop
 8002ad4:	3708      	adds	r7, #8
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}

08002ada <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ada:	b580      	push	{r7, lr}
 8002adc:	b086      	sub	sp, #24
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	60b9      	str	r1, [r7, #8]
 8002ae4:	607a      	str	r2, [r7, #4]
 8002ae6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002aec:	f7ff ff5c 	bl	80029a8 <__NVIC_GetPriorityGrouping>
 8002af0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	68b9      	ldr	r1, [r7, #8]
 8002af6:	6978      	ldr	r0, [r7, #20]
 8002af8:	f7ff ff8e 	bl	8002a18 <NVIC_EncodePriority>
 8002afc:	4602      	mov	r2, r0
 8002afe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b02:	4611      	mov	r1, r2
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7ff ff5d 	bl	80029c4 <__NVIC_SetPriority>
}
 8002b0a:	bf00      	nop
 8002b0c:	3718      	adds	r7, #24
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}

08002b12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b12:	b580      	push	{r7, lr}
 8002b14:	b082      	sub	sp, #8
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f7ff ffb0 	bl	8002a80 <SysTick_Config>
 8002b20:	4603      	mov	r3, r0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3708      	adds	r7, #8
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
	...

08002b2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b089      	sub	sp, #36	; 0x24
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b36:	2300      	movs	r3, #0
 8002b38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b42:	2300      	movs	r3, #0
 8002b44:	61fb      	str	r3, [r7, #28]
 8002b46:	e159      	b.n	8002dfc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b48:	2201      	movs	r2, #1
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	697a      	ldr	r2, [r7, #20]
 8002b58:	4013      	ands	r3, r2
 8002b5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b5c:	693a      	ldr	r2, [r7, #16]
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	f040 8148 	bne.w	8002df6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f003 0303 	and.w	r3, r3, #3
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d005      	beq.n	8002b7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d130      	bne.n	8002be0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	005b      	lsls	r3, r3, #1
 8002b88:	2203      	movs	r2, #3
 8002b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8e:	43db      	mvns	r3, r3
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	4013      	ands	r3, r2
 8002b94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	68da      	ldr	r2, [r3, #12]
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	69ba      	ldr	r2, [r7, #24]
 8002bac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbc:	43db      	mvns	r3, r3
 8002bbe:	69ba      	ldr	r2, [r7, #24]
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	091b      	lsrs	r3, r3, #4
 8002bca:	f003 0201 	and.w	r2, r3, #1
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f003 0303 	and.w	r3, r3, #3
 8002be8:	2b03      	cmp	r3, #3
 8002bea:	d017      	beq.n	8002c1c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	2203      	movs	r2, #3
 8002bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfc:	43db      	mvns	r3, r3
 8002bfe:	69ba      	ldr	r2, [r7, #24]
 8002c00:	4013      	ands	r3, r2
 8002c02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	689a      	ldr	r2, [r3, #8]
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	005b      	lsls	r3, r3, #1
 8002c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c10:	69ba      	ldr	r2, [r7, #24]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f003 0303 	and.w	r3, r3, #3
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d123      	bne.n	8002c70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	08da      	lsrs	r2, r3, #3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	3208      	adds	r2, #8
 8002c30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	f003 0307 	and.w	r3, r3, #7
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	220f      	movs	r2, #15
 8002c40:	fa02 f303 	lsl.w	r3, r2, r3
 8002c44:	43db      	mvns	r3, r3
 8002c46:	69ba      	ldr	r2, [r7, #24]
 8002c48:	4013      	ands	r3, r2
 8002c4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	691a      	ldr	r2, [r3, #16]
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	f003 0307 	and.w	r3, r3, #7
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5c:	69ba      	ldr	r2, [r7, #24]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	08da      	lsrs	r2, r3, #3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	3208      	adds	r2, #8
 8002c6a:	69b9      	ldr	r1, [r7, #24]
 8002c6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	2203      	movs	r2, #3
 8002c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c80:	43db      	mvns	r3, r3
 8002c82:	69ba      	ldr	r2, [r7, #24]
 8002c84:	4013      	ands	r3, r2
 8002c86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f003 0203 	and.w	r2, r3, #3
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	005b      	lsls	r3, r3, #1
 8002c94:	fa02 f303 	lsl.w	r3, r2, r3
 8002c98:	69ba      	ldr	r2, [r7, #24]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	69ba      	ldr	r2, [r7, #24]
 8002ca2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	f000 80a2 	beq.w	8002df6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	60fb      	str	r3, [r7, #12]
 8002cb6:	4b57      	ldr	r3, [pc, #348]	; (8002e14 <HAL_GPIO_Init+0x2e8>)
 8002cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cba:	4a56      	ldr	r2, [pc, #344]	; (8002e14 <HAL_GPIO_Init+0x2e8>)
 8002cbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cc0:	6453      	str	r3, [r2, #68]	; 0x44
 8002cc2:	4b54      	ldr	r3, [pc, #336]	; (8002e14 <HAL_GPIO_Init+0x2e8>)
 8002cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cca:	60fb      	str	r3, [r7, #12]
 8002ccc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cce:	4a52      	ldr	r2, [pc, #328]	; (8002e18 <HAL_GPIO_Init+0x2ec>)
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	089b      	lsrs	r3, r3, #2
 8002cd4:	3302      	adds	r3, #2
 8002cd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	f003 0303 	and.w	r3, r3, #3
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	220f      	movs	r2, #15
 8002ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cea:	43db      	mvns	r3, r3
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	4013      	ands	r3, r2
 8002cf0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a49      	ldr	r2, [pc, #292]	; (8002e1c <HAL_GPIO_Init+0x2f0>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d019      	beq.n	8002d2e <HAL_GPIO_Init+0x202>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a48      	ldr	r2, [pc, #288]	; (8002e20 <HAL_GPIO_Init+0x2f4>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d013      	beq.n	8002d2a <HAL_GPIO_Init+0x1fe>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a47      	ldr	r2, [pc, #284]	; (8002e24 <HAL_GPIO_Init+0x2f8>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d00d      	beq.n	8002d26 <HAL_GPIO_Init+0x1fa>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a46      	ldr	r2, [pc, #280]	; (8002e28 <HAL_GPIO_Init+0x2fc>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d007      	beq.n	8002d22 <HAL_GPIO_Init+0x1f6>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a45      	ldr	r2, [pc, #276]	; (8002e2c <HAL_GPIO_Init+0x300>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d101      	bne.n	8002d1e <HAL_GPIO_Init+0x1f2>
 8002d1a:	2304      	movs	r3, #4
 8002d1c:	e008      	b.n	8002d30 <HAL_GPIO_Init+0x204>
 8002d1e:	2307      	movs	r3, #7
 8002d20:	e006      	b.n	8002d30 <HAL_GPIO_Init+0x204>
 8002d22:	2303      	movs	r3, #3
 8002d24:	e004      	b.n	8002d30 <HAL_GPIO_Init+0x204>
 8002d26:	2302      	movs	r3, #2
 8002d28:	e002      	b.n	8002d30 <HAL_GPIO_Init+0x204>
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e000      	b.n	8002d30 <HAL_GPIO_Init+0x204>
 8002d2e:	2300      	movs	r3, #0
 8002d30:	69fa      	ldr	r2, [r7, #28]
 8002d32:	f002 0203 	and.w	r2, r2, #3
 8002d36:	0092      	lsls	r2, r2, #2
 8002d38:	4093      	lsls	r3, r2
 8002d3a:	69ba      	ldr	r2, [r7, #24]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d40:	4935      	ldr	r1, [pc, #212]	; (8002e18 <HAL_GPIO_Init+0x2ec>)
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	089b      	lsrs	r3, r3, #2
 8002d46:	3302      	adds	r3, #2
 8002d48:	69ba      	ldr	r2, [r7, #24]
 8002d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d4e:	4b38      	ldr	r3, [pc, #224]	; (8002e30 <HAL_GPIO_Init+0x304>)
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	43db      	mvns	r3, r3
 8002d58:	69ba      	ldr	r2, [r7, #24]
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d003      	beq.n	8002d72 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002d6a:	69ba      	ldr	r2, [r7, #24]
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d72:	4a2f      	ldr	r2, [pc, #188]	; (8002e30 <HAL_GPIO_Init+0x304>)
 8002d74:	69bb      	ldr	r3, [r7, #24]
 8002d76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d78:	4b2d      	ldr	r3, [pc, #180]	; (8002e30 <HAL_GPIO_Init+0x304>)
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	43db      	mvns	r3, r3
 8002d82:	69ba      	ldr	r2, [r7, #24]
 8002d84:	4013      	ands	r3, r2
 8002d86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d003      	beq.n	8002d9c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d9c:	4a24      	ldr	r2, [pc, #144]	; (8002e30 <HAL_GPIO_Init+0x304>)
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002da2:	4b23      	ldr	r3, [pc, #140]	; (8002e30 <HAL_GPIO_Init+0x304>)
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	43db      	mvns	r3, r3
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	4013      	ands	r3, r2
 8002db0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d003      	beq.n	8002dc6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002dbe:	69ba      	ldr	r2, [r7, #24]
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002dc6:	4a1a      	ldr	r2, [pc, #104]	; (8002e30 <HAL_GPIO_Init+0x304>)
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002dcc:	4b18      	ldr	r3, [pc, #96]	; (8002e30 <HAL_GPIO_Init+0x304>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	43db      	mvns	r3, r3
 8002dd6:	69ba      	ldr	r2, [r7, #24]
 8002dd8:	4013      	ands	r3, r2
 8002dda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d003      	beq.n	8002df0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002df0:	4a0f      	ldr	r2, [pc, #60]	; (8002e30 <HAL_GPIO_Init+0x304>)
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	3301      	adds	r3, #1
 8002dfa:	61fb      	str	r3, [r7, #28]
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	2b0f      	cmp	r3, #15
 8002e00:	f67f aea2 	bls.w	8002b48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e04:	bf00      	nop
 8002e06:	bf00      	nop
 8002e08:	3724      	adds	r7, #36	; 0x24
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	40023800 	.word	0x40023800
 8002e18:	40013800 	.word	0x40013800
 8002e1c:	40020000 	.word	0x40020000
 8002e20:	40020400 	.word	0x40020400
 8002e24:	40020800 	.word	0x40020800
 8002e28:	40020c00 	.word	0x40020c00
 8002e2c:	40021000 	.word	0x40021000
 8002e30:	40013c00 	.word	0x40013c00

08002e34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e12b      	b.n	800309e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d106      	bne.n	8002e60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f7ff fbe6 	bl	800262c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2224      	movs	r2, #36	; 0x24
 8002e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f022 0201 	bic.w	r2, r2, #1
 8002e76:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e86:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e96:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e98:	f001 f858 	bl	8003f4c <HAL_RCC_GetPCLK1Freq>
 8002e9c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	4a81      	ldr	r2, [pc, #516]	; (80030a8 <HAL_I2C_Init+0x274>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d807      	bhi.n	8002eb8 <HAL_I2C_Init+0x84>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	4a80      	ldr	r2, [pc, #512]	; (80030ac <HAL_I2C_Init+0x278>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	bf94      	ite	ls
 8002eb0:	2301      	movls	r3, #1
 8002eb2:	2300      	movhi	r3, #0
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	e006      	b.n	8002ec6 <HAL_I2C_Init+0x92>
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	4a7d      	ldr	r2, [pc, #500]	; (80030b0 <HAL_I2C_Init+0x27c>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	bf94      	ite	ls
 8002ec0:	2301      	movls	r3, #1
 8002ec2:	2300      	movhi	r3, #0
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d001      	beq.n	8002ece <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e0e7      	b.n	800309e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	4a78      	ldr	r2, [pc, #480]	; (80030b4 <HAL_I2C_Init+0x280>)
 8002ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed6:	0c9b      	lsrs	r3, r3, #18
 8002ed8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	68ba      	ldr	r2, [r7, #8]
 8002eea:	430a      	orrs	r2, r1
 8002eec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	6a1b      	ldr	r3, [r3, #32]
 8002ef4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	4a6a      	ldr	r2, [pc, #424]	; (80030a8 <HAL_I2C_Init+0x274>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d802      	bhi.n	8002f08 <HAL_I2C_Init+0xd4>
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	3301      	adds	r3, #1
 8002f06:	e009      	b.n	8002f1c <HAL_I2C_Init+0xe8>
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f0e:	fb02 f303 	mul.w	r3, r2, r3
 8002f12:	4a69      	ldr	r2, [pc, #420]	; (80030b8 <HAL_I2C_Init+0x284>)
 8002f14:	fba2 2303 	umull	r2, r3, r2, r3
 8002f18:	099b      	lsrs	r3, r3, #6
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	6812      	ldr	r2, [r2, #0]
 8002f20:	430b      	orrs	r3, r1
 8002f22:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	69db      	ldr	r3, [r3, #28]
 8002f2a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002f2e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	495c      	ldr	r1, [pc, #368]	; (80030a8 <HAL_I2C_Init+0x274>)
 8002f38:	428b      	cmp	r3, r1
 8002f3a:	d819      	bhi.n	8002f70 <HAL_I2C_Init+0x13c>
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	1e59      	subs	r1, r3, #1
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	005b      	lsls	r3, r3, #1
 8002f46:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f4a:	1c59      	adds	r1, r3, #1
 8002f4c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002f50:	400b      	ands	r3, r1
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d00a      	beq.n	8002f6c <HAL_I2C_Init+0x138>
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	1e59      	subs	r1, r3, #1
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	005b      	lsls	r3, r3, #1
 8002f60:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f64:	3301      	adds	r3, #1
 8002f66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f6a:	e051      	b.n	8003010 <HAL_I2C_Init+0x1dc>
 8002f6c:	2304      	movs	r3, #4
 8002f6e:	e04f      	b.n	8003010 <HAL_I2C_Init+0x1dc>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d111      	bne.n	8002f9c <HAL_I2C_Init+0x168>
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	1e58      	subs	r0, r3, #1
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6859      	ldr	r1, [r3, #4]
 8002f80:	460b      	mov	r3, r1
 8002f82:	005b      	lsls	r3, r3, #1
 8002f84:	440b      	add	r3, r1
 8002f86:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	bf0c      	ite	eq
 8002f94:	2301      	moveq	r3, #1
 8002f96:	2300      	movne	r3, #0
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	e012      	b.n	8002fc2 <HAL_I2C_Init+0x18e>
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	1e58      	subs	r0, r3, #1
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6859      	ldr	r1, [r3, #4]
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	440b      	add	r3, r1
 8002faa:	0099      	lsls	r1, r3, #2
 8002fac:	440b      	add	r3, r1
 8002fae:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	bf0c      	ite	eq
 8002fbc:	2301      	moveq	r3, #1
 8002fbe:	2300      	movne	r3, #0
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d001      	beq.n	8002fca <HAL_I2C_Init+0x196>
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e022      	b.n	8003010 <HAL_I2C_Init+0x1dc>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d10e      	bne.n	8002ff0 <HAL_I2C_Init+0x1bc>
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	1e58      	subs	r0, r3, #1
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6859      	ldr	r1, [r3, #4]
 8002fda:	460b      	mov	r3, r1
 8002fdc:	005b      	lsls	r3, r3, #1
 8002fde:	440b      	add	r3, r1
 8002fe0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fee:	e00f      	b.n	8003010 <HAL_I2C_Init+0x1dc>
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	1e58      	subs	r0, r3, #1
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6859      	ldr	r1, [r3, #4]
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	440b      	add	r3, r1
 8002ffe:	0099      	lsls	r1, r3, #2
 8003000:	440b      	add	r3, r1
 8003002:	fbb0 f3f3 	udiv	r3, r0, r3
 8003006:	3301      	adds	r3, #1
 8003008:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800300c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003010:	6879      	ldr	r1, [r7, #4]
 8003012:	6809      	ldr	r1, [r1, #0]
 8003014:	4313      	orrs	r3, r2
 8003016:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	69da      	ldr	r2, [r3, #28]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a1b      	ldr	r3, [r3, #32]
 800302a:	431a      	orrs	r2, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	430a      	orrs	r2, r1
 8003032:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800303e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	6911      	ldr	r1, [r2, #16]
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	68d2      	ldr	r2, [r2, #12]
 800304a:	4311      	orrs	r1, r2
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	6812      	ldr	r2, [r2, #0]
 8003050:	430b      	orrs	r3, r1
 8003052:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	695a      	ldr	r2, [r3, #20]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	431a      	orrs	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	430a      	orrs	r2, r1
 800306e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f042 0201 	orr.w	r2, r2, #1
 800307e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2220      	movs	r2, #32
 800308a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3710      	adds	r7, #16
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	000186a0 	.word	0x000186a0
 80030ac:	001e847f 	.word	0x001e847f
 80030b0:	003d08ff 	.word	0x003d08ff
 80030b4:	431bde83 	.word	0x431bde83
 80030b8:	10624dd3 	.word	0x10624dd3

080030bc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b088      	sub	sp, #32
 80030c0:	af02      	add	r7, sp, #8
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	4608      	mov	r0, r1
 80030c6:	4611      	mov	r1, r2
 80030c8:	461a      	mov	r2, r3
 80030ca:	4603      	mov	r3, r0
 80030cc:	817b      	strh	r3, [r7, #10]
 80030ce:	460b      	mov	r3, r1
 80030d0:	813b      	strh	r3, [r7, #8]
 80030d2:	4613      	mov	r3, r2
 80030d4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80030d6:	f7ff fc13 	bl	8002900 <HAL_GetTick>
 80030da:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	2b20      	cmp	r3, #32
 80030e6:	f040 80d9 	bne.w	800329c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	9300      	str	r3, [sp, #0]
 80030ee:	2319      	movs	r3, #25
 80030f0:	2201      	movs	r2, #1
 80030f2:	496d      	ldr	r1, [pc, #436]	; (80032a8 <HAL_I2C_Mem_Write+0x1ec>)
 80030f4:	68f8      	ldr	r0, [r7, #12]
 80030f6:	f000 f971 	bl	80033dc <I2C_WaitOnFlagUntilTimeout>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d001      	beq.n	8003104 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003100:	2302      	movs	r3, #2
 8003102:	e0cc      	b.n	800329e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800310a:	2b01      	cmp	r3, #1
 800310c:	d101      	bne.n	8003112 <HAL_I2C_Mem_Write+0x56>
 800310e:	2302      	movs	r3, #2
 8003110:	e0c5      	b.n	800329e <HAL_I2C_Mem_Write+0x1e2>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2201      	movs	r2, #1
 8003116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0301 	and.w	r3, r3, #1
 8003124:	2b01      	cmp	r3, #1
 8003126:	d007      	beq.n	8003138 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f042 0201 	orr.w	r2, r2, #1
 8003136:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003146:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2221      	movs	r2, #33	; 0x21
 800314c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2240      	movs	r2, #64	; 0x40
 8003154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2200      	movs	r2, #0
 800315c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6a3a      	ldr	r2, [r7, #32]
 8003162:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003168:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800316e:	b29a      	uxth	r2, r3
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	4a4d      	ldr	r2, [pc, #308]	; (80032ac <HAL_I2C_Mem_Write+0x1f0>)
 8003178:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800317a:	88f8      	ldrh	r0, [r7, #6]
 800317c:	893a      	ldrh	r2, [r7, #8]
 800317e:	8979      	ldrh	r1, [r7, #10]
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	9301      	str	r3, [sp, #4]
 8003184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003186:	9300      	str	r3, [sp, #0]
 8003188:	4603      	mov	r3, r0
 800318a:	68f8      	ldr	r0, [r7, #12]
 800318c:	f000 f890 	bl	80032b0 <I2C_RequestMemoryWrite>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d052      	beq.n	800323c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e081      	b.n	800329e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800319a:	697a      	ldr	r2, [r7, #20]
 800319c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800319e:	68f8      	ldr	r0, [r7, #12]
 80031a0:	f000 f9f2 	bl	8003588 <I2C_WaitOnTXEFlagUntilTimeout>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00d      	beq.n	80031c6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ae:	2b04      	cmp	r3, #4
 80031b0:	d107      	bne.n	80031c2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031c0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e06b      	b.n	800329e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ca:	781a      	ldrb	r2, [r3, #0]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d6:	1c5a      	adds	r2, r3, #1
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031e0:	3b01      	subs	r3, #1
 80031e2:	b29a      	uxth	r2, r3
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	3b01      	subs	r3, #1
 80031f0:	b29a      	uxth	r2, r3
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	695b      	ldr	r3, [r3, #20]
 80031fc:	f003 0304 	and.w	r3, r3, #4
 8003200:	2b04      	cmp	r3, #4
 8003202:	d11b      	bne.n	800323c <HAL_I2C_Mem_Write+0x180>
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003208:	2b00      	cmp	r3, #0
 800320a:	d017      	beq.n	800323c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003210:	781a      	ldrb	r2, [r3, #0]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321c:	1c5a      	adds	r2, r3, #1
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003226:	3b01      	subs	r3, #1
 8003228:	b29a      	uxth	r2, r3
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003232:	b29b      	uxth	r3, r3
 8003234:	3b01      	subs	r3, #1
 8003236:	b29a      	uxth	r2, r3
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003240:	2b00      	cmp	r3, #0
 8003242:	d1aa      	bne.n	800319a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003244:	697a      	ldr	r2, [r7, #20]
 8003246:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003248:	68f8      	ldr	r0, [r7, #12]
 800324a:	f000 f9de 	bl	800360a <I2C_WaitOnBTFFlagUntilTimeout>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d00d      	beq.n	8003270 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003258:	2b04      	cmp	r3, #4
 800325a:	d107      	bne.n	800326c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800326a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e016      	b.n	800329e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800327e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2220      	movs	r2, #32
 8003284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2200      	movs	r2, #0
 800328c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003298:	2300      	movs	r3, #0
 800329a:	e000      	b.n	800329e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800329c:	2302      	movs	r3, #2
  }
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3718      	adds	r7, #24
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	00100002 	.word	0x00100002
 80032ac:	ffff0000 	.word	0xffff0000

080032b0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b088      	sub	sp, #32
 80032b4:	af02      	add	r7, sp, #8
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	4608      	mov	r0, r1
 80032ba:	4611      	mov	r1, r2
 80032bc:	461a      	mov	r2, r3
 80032be:	4603      	mov	r3, r0
 80032c0:	817b      	strh	r3, [r7, #10]
 80032c2:	460b      	mov	r3, r1
 80032c4:	813b      	strh	r3, [r7, #8]
 80032c6:	4613      	mov	r3, r2
 80032c8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032d8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032dc:	9300      	str	r3, [sp, #0]
 80032de:	6a3b      	ldr	r3, [r7, #32]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032e6:	68f8      	ldr	r0, [r7, #12]
 80032e8:	f000 f878 	bl	80033dc <I2C_WaitOnFlagUntilTimeout>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d00d      	beq.n	800330e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003300:	d103      	bne.n	800330a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003308:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e05f      	b.n	80033ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800330e:	897b      	ldrh	r3, [r7, #10]
 8003310:	b2db      	uxtb	r3, r3
 8003312:	461a      	mov	r2, r3
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800331c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800331e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003320:	6a3a      	ldr	r2, [r7, #32]
 8003322:	492d      	ldr	r1, [pc, #180]	; (80033d8 <I2C_RequestMemoryWrite+0x128>)
 8003324:	68f8      	ldr	r0, [r7, #12]
 8003326:	f000 f8b0 	bl	800348a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d001      	beq.n	8003334 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e04c      	b.n	80033ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003334:	2300      	movs	r3, #0
 8003336:	617b      	str	r3, [r7, #20]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	695b      	ldr	r3, [r3, #20]
 800333e:	617b      	str	r3, [r7, #20]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	699b      	ldr	r3, [r3, #24]
 8003346:	617b      	str	r3, [r7, #20]
 8003348:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800334a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800334c:	6a39      	ldr	r1, [r7, #32]
 800334e:	68f8      	ldr	r0, [r7, #12]
 8003350:	f000 f91a 	bl	8003588 <I2C_WaitOnTXEFlagUntilTimeout>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d00d      	beq.n	8003376 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335e:	2b04      	cmp	r3, #4
 8003360:	d107      	bne.n	8003372 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003370:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e02b      	b.n	80033ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003376:	88fb      	ldrh	r3, [r7, #6]
 8003378:	2b01      	cmp	r3, #1
 800337a:	d105      	bne.n	8003388 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800337c:	893b      	ldrh	r3, [r7, #8]
 800337e:	b2da      	uxtb	r2, r3
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	611a      	str	r2, [r3, #16]
 8003386:	e021      	b.n	80033cc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003388:	893b      	ldrh	r3, [r7, #8]
 800338a:	0a1b      	lsrs	r3, r3, #8
 800338c:	b29b      	uxth	r3, r3
 800338e:	b2da      	uxtb	r2, r3
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003396:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003398:	6a39      	ldr	r1, [r7, #32]
 800339a:	68f8      	ldr	r0, [r7, #12]
 800339c:	f000 f8f4 	bl	8003588 <I2C_WaitOnTXEFlagUntilTimeout>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d00d      	beq.n	80033c2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033aa:	2b04      	cmp	r3, #4
 80033ac:	d107      	bne.n	80033be <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033bc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e005      	b.n	80033ce <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80033c2:	893b      	ldrh	r3, [r7, #8]
 80033c4:	b2da      	uxtb	r2, r3
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3718      	adds	r7, #24
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	00010002 	.word	0x00010002

080033dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	603b      	str	r3, [r7, #0]
 80033e8:	4613      	mov	r3, r2
 80033ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033ec:	e025      	b.n	800343a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f4:	d021      	beq.n	800343a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033f6:	f7ff fa83 	bl	8002900 <HAL_GetTick>
 80033fa:	4602      	mov	r2, r0
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	683a      	ldr	r2, [r7, #0]
 8003402:	429a      	cmp	r2, r3
 8003404:	d302      	bcc.n	800340c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d116      	bne.n	800343a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2220      	movs	r2, #32
 8003416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003426:	f043 0220 	orr.w	r2, r3, #32
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e023      	b.n	8003482 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	0c1b      	lsrs	r3, r3, #16
 800343e:	b2db      	uxtb	r3, r3
 8003440:	2b01      	cmp	r3, #1
 8003442:	d10d      	bne.n	8003460 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	695b      	ldr	r3, [r3, #20]
 800344a:	43da      	mvns	r2, r3
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	4013      	ands	r3, r2
 8003450:	b29b      	uxth	r3, r3
 8003452:	2b00      	cmp	r3, #0
 8003454:	bf0c      	ite	eq
 8003456:	2301      	moveq	r3, #1
 8003458:	2300      	movne	r3, #0
 800345a:	b2db      	uxtb	r3, r3
 800345c:	461a      	mov	r2, r3
 800345e:	e00c      	b.n	800347a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	699b      	ldr	r3, [r3, #24]
 8003466:	43da      	mvns	r2, r3
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	4013      	ands	r3, r2
 800346c:	b29b      	uxth	r3, r3
 800346e:	2b00      	cmp	r3, #0
 8003470:	bf0c      	ite	eq
 8003472:	2301      	moveq	r3, #1
 8003474:	2300      	movne	r3, #0
 8003476:	b2db      	uxtb	r3, r3
 8003478:	461a      	mov	r2, r3
 800347a:	79fb      	ldrb	r3, [r7, #7]
 800347c:	429a      	cmp	r2, r3
 800347e:	d0b6      	beq.n	80033ee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3710      	adds	r7, #16
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}

0800348a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800348a:	b580      	push	{r7, lr}
 800348c:	b084      	sub	sp, #16
 800348e:	af00      	add	r7, sp, #0
 8003490:	60f8      	str	r0, [r7, #12]
 8003492:	60b9      	str	r1, [r7, #8]
 8003494:	607a      	str	r2, [r7, #4]
 8003496:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003498:	e051      	b.n	800353e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	695b      	ldr	r3, [r3, #20]
 80034a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034a8:	d123      	bne.n	80034f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034b8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80034c2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2200      	movs	r2, #0
 80034c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2220      	movs	r2, #32
 80034ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034de:	f043 0204 	orr.w	r2, r3, #4
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e046      	b.n	8003580 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034f8:	d021      	beq.n	800353e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034fa:	f7ff fa01 	bl	8002900 <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	429a      	cmp	r2, r3
 8003508:	d302      	bcc.n	8003510 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d116      	bne.n	800353e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2200      	movs	r2, #0
 8003514:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2220      	movs	r2, #32
 800351a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2200      	movs	r2, #0
 8003522:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352a:	f043 0220 	orr.w	r2, r3, #32
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2200      	movs	r2, #0
 8003536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e020      	b.n	8003580 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	0c1b      	lsrs	r3, r3, #16
 8003542:	b2db      	uxtb	r3, r3
 8003544:	2b01      	cmp	r3, #1
 8003546:	d10c      	bne.n	8003562 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	695b      	ldr	r3, [r3, #20]
 800354e:	43da      	mvns	r2, r3
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	4013      	ands	r3, r2
 8003554:	b29b      	uxth	r3, r3
 8003556:	2b00      	cmp	r3, #0
 8003558:	bf14      	ite	ne
 800355a:	2301      	movne	r3, #1
 800355c:	2300      	moveq	r3, #0
 800355e:	b2db      	uxtb	r3, r3
 8003560:	e00b      	b.n	800357a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	699b      	ldr	r3, [r3, #24]
 8003568:	43da      	mvns	r2, r3
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	4013      	ands	r3, r2
 800356e:	b29b      	uxth	r3, r3
 8003570:	2b00      	cmp	r3, #0
 8003572:	bf14      	ite	ne
 8003574:	2301      	movne	r3, #1
 8003576:	2300      	moveq	r3, #0
 8003578:	b2db      	uxtb	r3, r3
 800357a:	2b00      	cmp	r3, #0
 800357c:	d18d      	bne.n	800349a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800357e:	2300      	movs	r3, #0
}
 8003580:	4618      	mov	r0, r3
 8003582:	3710      	adds	r7, #16
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003594:	e02d      	b.n	80035f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003596:	68f8      	ldr	r0, [r7, #12]
 8003598:	f000 f878 	bl	800368c <I2C_IsAcknowledgeFailed>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d001      	beq.n	80035a6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e02d      	b.n	8003602 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ac:	d021      	beq.n	80035f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035ae:	f7ff f9a7 	bl	8002900 <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	68ba      	ldr	r2, [r7, #8]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d302      	bcc.n	80035c4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d116      	bne.n	80035f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2200      	movs	r2, #0
 80035c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2220      	movs	r2, #32
 80035ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035de:	f043 0220 	orr.w	r2, r3, #32
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e007      	b.n	8003602 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	695b      	ldr	r3, [r3, #20]
 80035f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035fc:	2b80      	cmp	r3, #128	; 0x80
 80035fe:	d1ca      	bne.n	8003596 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3710      	adds	r7, #16
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}

0800360a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800360a:	b580      	push	{r7, lr}
 800360c:	b084      	sub	sp, #16
 800360e:	af00      	add	r7, sp, #0
 8003610:	60f8      	str	r0, [r7, #12]
 8003612:	60b9      	str	r1, [r7, #8]
 8003614:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003616:	e02d      	b.n	8003674 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003618:	68f8      	ldr	r0, [r7, #12]
 800361a:	f000 f837 	bl	800368c <I2C_IsAcknowledgeFailed>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d001      	beq.n	8003628 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e02d      	b.n	8003684 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800362e:	d021      	beq.n	8003674 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003630:	f7ff f966 	bl	8002900 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	68ba      	ldr	r2, [r7, #8]
 800363c:	429a      	cmp	r2, r3
 800363e:	d302      	bcc.n	8003646 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d116      	bne.n	8003674 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2200      	movs	r2, #0
 800364a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2220      	movs	r2, #32
 8003650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2200      	movs	r2, #0
 8003658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003660:	f043 0220 	orr.w	r2, r3, #32
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e007      	b.n	8003684 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	695b      	ldr	r3, [r3, #20]
 800367a:	f003 0304 	and.w	r3, r3, #4
 800367e:	2b04      	cmp	r3, #4
 8003680:	d1ca      	bne.n	8003618 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	4618      	mov	r0, r3
 8003686:	3710      	adds	r7, #16
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	695b      	ldr	r3, [r3, #20]
 800369a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800369e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036a2:	d11b      	bne.n	80036dc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80036ac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2220      	movs	r2, #32
 80036b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c8:	f043 0204 	orr.w	r2, r3, #4
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e000      	b.n	80036de <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	370c      	adds	r7, #12
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
	...

080036ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b086      	sub	sp, #24
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d101      	bne.n	80036fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e267      	b.n	8003bce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	2b00      	cmp	r3, #0
 8003708:	d075      	beq.n	80037f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800370a:	4b88      	ldr	r3, [pc, #544]	; (800392c <HAL_RCC_OscConfig+0x240>)
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	f003 030c 	and.w	r3, r3, #12
 8003712:	2b04      	cmp	r3, #4
 8003714:	d00c      	beq.n	8003730 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003716:	4b85      	ldr	r3, [pc, #532]	; (800392c <HAL_RCC_OscConfig+0x240>)
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800371e:	2b08      	cmp	r3, #8
 8003720:	d112      	bne.n	8003748 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003722:	4b82      	ldr	r3, [pc, #520]	; (800392c <HAL_RCC_OscConfig+0x240>)
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800372a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800372e:	d10b      	bne.n	8003748 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003730:	4b7e      	ldr	r3, [pc, #504]	; (800392c <HAL_RCC_OscConfig+0x240>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d05b      	beq.n	80037f4 <HAL_RCC_OscConfig+0x108>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d157      	bne.n	80037f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e242      	b.n	8003bce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003750:	d106      	bne.n	8003760 <HAL_RCC_OscConfig+0x74>
 8003752:	4b76      	ldr	r3, [pc, #472]	; (800392c <HAL_RCC_OscConfig+0x240>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a75      	ldr	r2, [pc, #468]	; (800392c <HAL_RCC_OscConfig+0x240>)
 8003758:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800375c:	6013      	str	r3, [r2, #0]
 800375e:	e01d      	b.n	800379c <HAL_RCC_OscConfig+0xb0>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003768:	d10c      	bne.n	8003784 <HAL_RCC_OscConfig+0x98>
 800376a:	4b70      	ldr	r3, [pc, #448]	; (800392c <HAL_RCC_OscConfig+0x240>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a6f      	ldr	r2, [pc, #444]	; (800392c <HAL_RCC_OscConfig+0x240>)
 8003770:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003774:	6013      	str	r3, [r2, #0]
 8003776:	4b6d      	ldr	r3, [pc, #436]	; (800392c <HAL_RCC_OscConfig+0x240>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a6c      	ldr	r2, [pc, #432]	; (800392c <HAL_RCC_OscConfig+0x240>)
 800377c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003780:	6013      	str	r3, [r2, #0]
 8003782:	e00b      	b.n	800379c <HAL_RCC_OscConfig+0xb0>
 8003784:	4b69      	ldr	r3, [pc, #420]	; (800392c <HAL_RCC_OscConfig+0x240>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a68      	ldr	r2, [pc, #416]	; (800392c <HAL_RCC_OscConfig+0x240>)
 800378a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800378e:	6013      	str	r3, [r2, #0]
 8003790:	4b66      	ldr	r3, [pc, #408]	; (800392c <HAL_RCC_OscConfig+0x240>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a65      	ldr	r2, [pc, #404]	; (800392c <HAL_RCC_OscConfig+0x240>)
 8003796:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800379a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d013      	beq.n	80037cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a4:	f7ff f8ac 	bl	8002900 <HAL_GetTick>
 80037a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037aa:	e008      	b.n	80037be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037ac:	f7ff f8a8 	bl	8002900 <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	2b64      	cmp	r3, #100	; 0x64
 80037b8:	d901      	bls.n	80037be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e207      	b.n	8003bce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037be:	4b5b      	ldr	r3, [pc, #364]	; (800392c <HAL_RCC_OscConfig+0x240>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d0f0      	beq.n	80037ac <HAL_RCC_OscConfig+0xc0>
 80037ca:	e014      	b.n	80037f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037cc:	f7ff f898 	bl	8002900 <HAL_GetTick>
 80037d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037d2:	e008      	b.n	80037e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037d4:	f7ff f894 	bl	8002900 <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	2b64      	cmp	r3, #100	; 0x64
 80037e0:	d901      	bls.n	80037e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e1f3      	b.n	8003bce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037e6:	4b51      	ldr	r3, [pc, #324]	; (800392c <HAL_RCC_OscConfig+0x240>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d1f0      	bne.n	80037d4 <HAL_RCC_OscConfig+0xe8>
 80037f2:	e000      	b.n	80037f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0302 	and.w	r3, r3, #2
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d063      	beq.n	80038ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003802:	4b4a      	ldr	r3, [pc, #296]	; (800392c <HAL_RCC_OscConfig+0x240>)
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f003 030c 	and.w	r3, r3, #12
 800380a:	2b00      	cmp	r3, #0
 800380c:	d00b      	beq.n	8003826 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800380e:	4b47      	ldr	r3, [pc, #284]	; (800392c <HAL_RCC_OscConfig+0x240>)
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003816:	2b08      	cmp	r3, #8
 8003818:	d11c      	bne.n	8003854 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800381a:	4b44      	ldr	r3, [pc, #272]	; (800392c <HAL_RCC_OscConfig+0x240>)
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d116      	bne.n	8003854 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003826:	4b41      	ldr	r3, [pc, #260]	; (800392c <HAL_RCC_OscConfig+0x240>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0302 	and.w	r3, r3, #2
 800382e:	2b00      	cmp	r3, #0
 8003830:	d005      	beq.n	800383e <HAL_RCC_OscConfig+0x152>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	2b01      	cmp	r3, #1
 8003838:	d001      	beq.n	800383e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e1c7      	b.n	8003bce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800383e:	4b3b      	ldr	r3, [pc, #236]	; (800392c <HAL_RCC_OscConfig+0x240>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	00db      	lsls	r3, r3, #3
 800384c:	4937      	ldr	r1, [pc, #220]	; (800392c <HAL_RCC_OscConfig+0x240>)
 800384e:	4313      	orrs	r3, r2
 8003850:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003852:	e03a      	b.n	80038ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d020      	beq.n	800389e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800385c:	4b34      	ldr	r3, [pc, #208]	; (8003930 <HAL_RCC_OscConfig+0x244>)
 800385e:	2201      	movs	r2, #1
 8003860:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003862:	f7ff f84d 	bl	8002900 <HAL_GetTick>
 8003866:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003868:	e008      	b.n	800387c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800386a:	f7ff f849 	bl	8002900 <HAL_GetTick>
 800386e:	4602      	mov	r2, r0
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	1ad3      	subs	r3, r2, r3
 8003874:	2b02      	cmp	r3, #2
 8003876:	d901      	bls.n	800387c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003878:	2303      	movs	r3, #3
 800387a:	e1a8      	b.n	8003bce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800387c:	4b2b      	ldr	r3, [pc, #172]	; (800392c <HAL_RCC_OscConfig+0x240>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0302 	and.w	r3, r3, #2
 8003884:	2b00      	cmp	r3, #0
 8003886:	d0f0      	beq.n	800386a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003888:	4b28      	ldr	r3, [pc, #160]	; (800392c <HAL_RCC_OscConfig+0x240>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	00db      	lsls	r3, r3, #3
 8003896:	4925      	ldr	r1, [pc, #148]	; (800392c <HAL_RCC_OscConfig+0x240>)
 8003898:	4313      	orrs	r3, r2
 800389a:	600b      	str	r3, [r1, #0]
 800389c:	e015      	b.n	80038ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800389e:	4b24      	ldr	r3, [pc, #144]	; (8003930 <HAL_RCC_OscConfig+0x244>)
 80038a0:	2200      	movs	r2, #0
 80038a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a4:	f7ff f82c 	bl	8002900 <HAL_GetTick>
 80038a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038aa:	e008      	b.n	80038be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038ac:	f7ff f828 	bl	8002900 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d901      	bls.n	80038be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e187      	b.n	8003bce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038be:	4b1b      	ldr	r3, [pc, #108]	; (800392c <HAL_RCC_OscConfig+0x240>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0302 	and.w	r3, r3, #2
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d1f0      	bne.n	80038ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0308 	and.w	r3, r3, #8
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d036      	beq.n	8003944 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	695b      	ldr	r3, [r3, #20]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d016      	beq.n	800390c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038de:	4b15      	ldr	r3, [pc, #84]	; (8003934 <HAL_RCC_OscConfig+0x248>)
 80038e0:	2201      	movs	r2, #1
 80038e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038e4:	f7ff f80c 	bl	8002900 <HAL_GetTick>
 80038e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038ea:	e008      	b.n	80038fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038ec:	f7ff f808 	bl	8002900 <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e167      	b.n	8003bce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038fe:	4b0b      	ldr	r3, [pc, #44]	; (800392c <HAL_RCC_OscConfig+0x240>)
 8003900:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003902:	f003 0302 	and.w	r3, r3, #2
 8003906:	2b00      	cmp	r3, #0
 8003908:	d0f0      	beq.n	80038ec <HAL_RCC_OscConfig+0x200>
 800390a:	e01b      	b.n	8003944 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800390c:	4b09      	ldr	r3, [pc, #36]	; (8003934 <HAL_RCC_OscConfig+0x248>)
 800390e:	2200      	movs	r2, #0
 8003910:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003912:	f7fe fff5 	bl	8002900 <HAL_GetTick>
 8003916:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003918:	e00e      	b.n	8003938 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800391a:	f7fe fff1 	bl	8002900 <HAL_GetTick>
 800391e:	4602      	mov	r2, r0
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	2b02      	cmp	r3, #2
 8003926:	d907      	bls.n	8003938 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003928:	2303      	movs	r3, #3
 800392a:	e150      	b.n	8003bce <HAL_RCC_OscConfig+0x4e2>
 800392c:	40023800 	.word	0x40023800
 8003930:	42470000 	.word	0x42470000
 8003934:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003938:	4b88      	ldr	r3, [pc, #544]	; (8003b5c <HAL_RCC_OscConfig+0x470>)
 800393a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800393c:	f003 0302 	and.w	r3, r3, #2
 8003940:	2b00      	cmp	r3, #0
 8003942:	d1ea      	bne.n	800391a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0304 	and.w	r3, r3, #4
 800394c:	2b00      	cmp	r3, #0
 800394e:	f000 8097 	beq.w	8003a80 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003952:	2300      	movs	r3, #0
 8003954:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003956:	4b81      	ldr	r3, [pc, #516]	; (8003b5c <HAL_RCC_OscConfig+0x470>)
 8003958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d10f      	bne.n	8003982 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003962:	2300      	movs	r3, #0
 8003964:	60bb      	str	r3, [r7, #8]
 8003966:	4b7d      	ldr	r3, [pc, #500]	; (8003b5c <HAL_RCC_OscConfig+0x470>)
 8003968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396a:	4a7c      	ldr	r2, [pc, #496]	; (8003b5c <HAL_RCC_OscConfig+0x470>)
 800396c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003970:	6413      	str	r3, [r2, #64]	; 0x40
 8003972:	4b7a      	ldr	r3, [pc, #488]	; (8003b5c <HAL_RCC_OscConfig+0x470>)
 8003974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800397a:	60bb      	str	r3, [r7, #8]
 800397c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800397e:	2301      	movs	r3, #1
 8003980:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003982:	4b77      	ldr	r3, [pc, #476]	; (8003b60 <HAL_RCC_OscConfig+0x474>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800398a:	2b00      	cmp	r3, #0
 800398c:	d118      	bne.n	80039c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800398e:	4b74      	ldr	r3, [pc, #464]	; (8003b60 <HAL_RCC_OscConfig+0x474>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a73      	ldr	r2, [pc, #460]	; (8003b60 <HAL_RCC_OscConfig+0x474>)
 8003994:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003998:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800399a:	f7fe ffb1 	bl	8002900 <HAL_GetTick>
 800399e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039a0:	e008      	b.n	80039b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039a2:	f7fe ffad 	bl	8002900 <HAL_GetTick>
 80039a6:	4602      	mov	r2, r0
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	d901      	bls.n	80039b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80039b0:	2303      	movs	r3, #3
 80039b2:	e10c      	b.n	8003bce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039b4:	4b6a      	ldr	r3, [pc, #424]	; (8003b60 <HAL_RCC_OscConfig+0x474>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d0f0      	beq.n	80039a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d106      	bne.n	80039d6 <HAL_RCC_OscConfig+0x2ea>
 80039c8:	4b64      	ldr	r3, [pc, #400]	; (8003b5c <HAL_RCC_OscConfig+0x470>)
 80039ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039cc:	4a63      	ldr	r2, [pc, #396]	; (8003b5c <HAL_RCC_OscConfig+0x470>)
 80039ce:	f043 0301 	orr.w	r3, r3, #1
 80039d2:	6713      	str	r3, [r2, #112]	; 0x70
 80039d4:	e01c      	b.n	8003a10 <HAL_RCC_OscConfig+0x324>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	2b05      	cmp	r3, #5
 80039dc:	d10c      	bne.n	80039f8 <HAL_RCC_OscConfig+0x30c>
 80039de:	4b5f      	ldr	r3, [pc, #380]	; (8003b5c <HAL_RCC_OscConfig+0x470>)
 80039e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039e2:	4a5e      	ldr	r2, [pc, #376]	; (8003b5c <HAL_RCC_OscConfig+0x470>)
 80039e4:	f043 0304 	orr.w	r3, r3, #4
 80039e8:	6713      	str	r3, [r2, #112]	; 0x70
 80039ea:	4b5c      	ldr	r3, [pc, #368]	; (8003b5c <HAL_RCC_OscConfig+0x470>)
 80039ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ee:	4a5b      	ldr	r2, [pc, #364]	; (8003b5c <HAL_RCC_OscConfig+0x470>)
 80039f0:	f043 0301 	orr.w	r3, r3, #1
 80039f4:	6713      	str	r3, [r2, #112]	; 0x70
 80039f6:	e00b      	b.n	8003a10 <HAL_RCC_OscConfig+0x324>
 80039f8:	4b58      	ldr	r3, [pc, #352]	; (8003b5c <HAL_RCC_OscConfig+0x470>)
 80039fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039fc:	4a57      	ldr	r2, [pc, #348]	; (8003b5c <HAL_RCC_OscConfig+0x470>)
 80039fe:	f023 0301 	bic.w	r3, r3, #1
 8003a02:	6713      	str	r3, [r2, #112]	; 0x70
 8003a04:	4b55      	ldr	r3, [pc, #340]	; (8003b5c <HAL_RCC_OscConfig+0x470>)
 8003a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a08:	4a54      	ldr	r2, [pc, #336]	; (8003b5c <HAL_RCC_OscConfig+0x470>)
 8003a0a:	f023 0304 	bic.w	r3, r3, #4
 8003a0e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d015      	beq.n	8003a44 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a18:	f7fe ff72 	bl	8002900 <HAL_GetTick>
 8003a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a1e:	e00a      	b.n	8003a36 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a20:	f7fe ff6e 	bl	8002900 <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d901      	bls.n	8003a36 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e0cb      	b.n	8003bce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a36:	4b49      	ldr	r3, [pc, #292]	; (8003b5c <HAL_RCC_OscConfig+0x470>)
 8003a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a3a:	f003 0302 	and.w	r3, r3, #2
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d0ee      	beq.n	8003a20 <HAL_RCC_OscConfig+0x334>
 8003a42:	e014      	b.n	8003a6e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a44:	f7fe ff5c 	bl	8002900 <HAL_GetTick>
 8003a48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a4a:	e00a      	b.n	8003a62 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a4c:	f7fe ff58 	bl	8002900 <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d901      	bls.n	8003a62 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e0b5      	b.n	8003bce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a62:	4b3e      	ldr	r3, [pc, #248]	; (8003b5c <HAL_RCC_OscConfig+0x470>)
 8003a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a66:	f003 0302 	and.w	r3, r3, #2
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d1ee      	bne.n	8003a4c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a6e:	7dfb      	ldrb	r3, [r7, #23]
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d105      	bne.n	8003a80 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a74:	4b39      	ldr	r3, [pc, #228]	; (8003b5c <HAL_RCC_OscConfig+0x470>)
 8003a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a78:	4a38      	ldr	r2, [pc, #224]	; (8003b5c <HAL_RCC_OscConfig+0x470>)
 8003a7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a7e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	699b      	ldr	r3, [r3, #24]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	f000 80a1 	beq.w	8003bcc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a8a:	4b34      	ldr	r3, [pc, #208]	; (8003b5c <HAL_RCC_OscConfig+0x470>)
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f003 030c 	and.w	r3, r3, #12
 8003a92:	2b08      	cmp	r3, #8
 8003a94:	d05c      	beq.n	8003b50 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	699b      	ldr	r3, [r3, #24]
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d141      	bne.n	8003b22 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a9e:	4b31      	ldr	r3, [pc, #196]	; (8003b64 <HAL_RCC_OscConfig+0x478>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aa4:	f7fe ff2c 	bl	8002900 <HAL_GetTick>
 8003aa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aaa:	e008      	b.n	8003abe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003aac:	f7fe ff28 	bl	8002900 <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d901      	bls.n	8003abe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e087      	b.n	8003bce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003abe:	4b27      	ldr	r3, [pc, #156]	; (8003b5c <HAL_RCC_OscConfig+0x470>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d1f0      	bne.n	8003aac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	69da      	ldr	r2, [r3, #28]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a1b      	ldr	r3, [r3, #32]
 8003ad2:	431a      	orrs	r2, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad8:	019b      	lsls	r3, r3, #6
 8003ada:	431a      	orrs	r2, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae0:	085b      	lsrs	r3, r3, #1
 8003ae2:	3b01      	subs	r3, #1
 8003ae4:	041b      	lsls	r3, r3, #16
 8003ae6:	431a      	orrs	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aec:	061b      	lsls	r3, r3, #24
 8003aee:	491b      	ldr	r1, [pc, #108]	; (8003b5c <HAL_RCC_OscConfig+0x470>)
 8003af0:	4313      	orrs	r3, r2
 8003af2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003af4:	4b1b      	ldr	r3, [pc, #108]	; (8003b64 <HAL_RCC_OscConfig+0x478>)
 8003af6:	2201      	movs	r2, #1
 8003af8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003afa:	f7fe ff01 	bl	8002900 <HAL_GetTick>
 8003afe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b00:	e008      	b.n	8003b14 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b02:	f7fe fefd 	bl	8002900 <HAL_GetTick>
 8003b06:	4602      	mov	r2, r0
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	2b02      	cmp	r3, #2
 8003b0e:	d901      	bls.n	8003b14 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003b10:	2303      	movs	r3, #3
 8003b12:	e05c      	b.n	8003bce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b14:	4b11      	ldr	r3, [pc, #68]	; (8003b5c <HAL_RCC_OscConfig+0x470>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d0f0      	beq.n	8003b02 <HAL_RCC_OscConfig+0x416>
 8003b20:	e054      	b.n	8003bcc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b22:	4b10      	ldr	r3, [pc, #64]	; (8003b64 <HAL_RCC_OscConfig+0x478>)
 8003b24:	2200      	movs	r2, #0
 8003b26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b28:	f7fe feea 	bl	8002900 <HAL_GetTick>
 8003b2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b2e:	e008      	b.n	8003b42 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b30:	f7fe fee6 	bl	8002900 <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d901      	bls.n	8003b42 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e045      	b.n	8003bce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b42:	4b06      	ldr	r3, [pc, #24]	; (8003b5c <HAL_RCC_OscConfig+0x470>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d1f0      	bne.n	8003b30 <HAL_RCC_OscConfig+0x444>
 8003b4e:	e03d      	b.n	8003bcc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	699b      	ldr	r3, [r3, #24]
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d107      	bne.n	8003b68 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e038      	b.n	8003bce <HAL_RCC_OscConfig+0x4e2>
 8003b5c:	40023800 	.word	0x40023800
 8003b60:	40007000 	.word	0x40007000
 8003b64:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b68:	4b1b      	ldr	r3, [pc, #108]	; (8003bd8 <HAL_RCC_OscConfig+0x4ec>)
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	699b      	ldr	r3, [r3, #24]
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d028      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d121      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d11a      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b92:	68fa      	ldr	r2, [r7, #12]
 8003b94:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b98:	4013      	ands	r3, r2
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b9e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d111      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bae:	085b      	lsrs	r3, r3, #1
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d107      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d001      	beq.n	8003bcc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e000      	b.n	8003bce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3718      	adds	r7, #24
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	40023800 	.word	0x40023800

08003bdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d101      	bne.n	8003bf0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e0cc      	b.n	8003d8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003bf0:	4b68      	ldr	r3, [pc, #416]	; (8003d94 <HAL_RCC_ClockConfig+0x1b8>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0307 	and.w	r3, r3, #7
 8003bf8:	683a      	ldr	r2, [r7, #0]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d90c      	bls.n	8003c18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bfe:	4b65      	ldr	r3, [pc, #404]	; (8003d94 <HAL_RCC_ClockConfig+0x1b8>)
 8003c00:	683a      	ldr	r2, [r7, #0]
 8003c02:	b2d2      	uxtb	r2, r2
 8003c04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c06:	4b63      	ldr	r3, [pc, #396]	; (8003d94 <HAL_RCC_ClockConfig+0x1b8>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0307 	and.w	r3, r3, #7
 8003c0e:	683a      	ldr	r2, [r7, #0]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d001      	beq.n	8003c18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e0b8      	b.n	8003d8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0302 	and.w	r3, r3, #2
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d020      	beq.n	8003c66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0304 	and.w	r3, r3, #4
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d005      	beq.n	8003c3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c30:	4b59      	ldr	r3, [pc, #356]	; (8003d98 <HAL_RCC_ClockConfig+0x1bc>)
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	4a58      	ldr	r2, [pc, #352]	; (8003d98 <HAL_RCC_ClockConfig+0x1bc>)
 8003c36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0308 	and.w	r3, r3, #8
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d005      	beq.n	8003c54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c48:	4b53      	ldr	r3, [pc, #332]	; (8003d98 <HAL_RCC_ClockConfig+0x1bc>)
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	4a52      	ldr	r2, [pc, #328]	; (8003d98 <HAL_RCC_ClockConfig+0x1bc>)
 8003c4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c54:	4b50      	ldr	r3, [pc, #320]	; (8003d98 <HAL_RCC_ClockConfig+0x1bc>)
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	494d      	ldr	r1, [pc, #308]	; (8003d98 <HAL_RCC_ClockConfig+0x1bc>)
 8003c62:	4313      	orrs	r3, r2
 8003c64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0301 	and.w	r3, r3, #1
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d044      	beq.n	8003cfc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d107      	bne.n	8003c8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c7a:	4b47      	ldr	r3, [pc, #284]	; (8003d98 <HAL_RCC_ClockConfig+0x1bc>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d119      	bne.n	8003cba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e07f      	b.n	8003d8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d003      	beq.n	8003c9a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c96:	2b03      	cmp	r3, #3
 8003c98:	d107      	bne.n	8003caa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c9a:	4b3f      	ldr	r3, [pc, #252]	; (8003d98 <HAL_RCC_ClockConfig+0x1bc>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d109      	bne.n	8003cba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e06f      	b.n	8003d8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003caa:	4b3b      	ldr	r3, [pc, #236]	; (8003d98 <HAL_RCC_ClockConfig+0x1bc>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0302 	and.w	r3, r3, #2
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d101      	bne.n	8003cba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e067      	b.n	8003d8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cba:	4b37      	ldr	r3, [pc, #220]	; (8003d98 <HAL_RCC_ClockConfig+0x1bc>)
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	f023 0203 	bic.w	r2, r3, #3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	4934      	ldr	r1, [pc, #208]	; (8003d98 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ccc:	f7fe fe18 	bl	8002900 <HAL_GetTick>
 8003cd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cd2:	e00a      	b.n	8003cea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cd4:	f7fe fe14 	bl	8002900 <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d901      	bls.n	8003cea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e04f      	b.n	8003d8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cea:	4b2b      	ldr	r3, [pc, #172]	; (8003d98 <HAL_RCC_ClockConfig+0x1bc>)
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	f003 020c 	and.w	r2, r3, #12
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d1eb      	bne.n	8003cd4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003cfc:	4b25      	ldr	r3, [pc, #148]	; (8003d94 <HAL_RCC_ClockConfig+0x1b8>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0307 	and.w	r3, r3, #7
 8003d04:	683a      	ldr	r2, [r7, #0]
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d20c      	bcs.n	8003d24 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d0a:	4b22      	ldr	r3, [pc, #136]	; (8003d94 <HAL_RCC_ClockConfig+0x1b8>)
 8003d0c:	683a      	ldr	r2, [r7, #0]
 8003d0e:	b2d2      	uxtb	r2, r2
 8003d10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d12:	4b20      	ldr	r3, [pc, #128]	; (8003d94 <HAL_RCC_ClockConfig+0x1b8>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0307 	and.w	r3, r3, #7
 8003d1a:	683a      	ldr	r2, [r7, #0]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d001      	beq.n	8003d24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e032      	b.n	8003d8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0304 	and.w	r3, r3, #4
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d008      	beq.n	8003d42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d30:	4b19      	ldr	r3, [pc, #100]	; (8003d98 <HAL_RCC_ClockConfig+0x1bc>)
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	4916      	ldr	r1, [pc, #88]	; (8003d98 <HAL_RCC_ClockConfig+0x1bc>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0308 	and.w	r3, r3, #8
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d009      	beq.n	8003d62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d4e:	4b12      	ldr	r3, [pc, #72]	; (8003d98 <HAL_RCC_ClockConfig+0x1bc>)
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	00db      	lsls	r3, r3, #3
 8003d5c:	490e      	ldr	r1, [pc, #56]	; (8003d98 <HAL_RCC_ClockConfig+0x1bc>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d62:	f000 f821 	bl	8003da8 <HAL_RCC_GetSysClockFreq>
 8003d66:	4602      	mov	r2, r0
 8003d68:	4b0b      	ldr	r3, [pc, #44]	; (8003d98 <HAL_RCC_ClockConfig+0x1bc>)
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	091b      	lsrs	r3, r3, #4
 8003d6e:	f003 030f 	and.w	r3, r3, #15
 8003d72:	490a      	ldr	r1, [pc, #40]	; (8003d9c <HAL_RCC_ClockConfig+0x1c0>)
 8003d74:	5ccb      	ldrb	r3, [r1, r3]
 8003d76:	fa22 f303 	lsr.w	r3, r2, r3
 8003d7a:	4a09      	ldr	r2, [pc, #36]	; (8003da0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d7e:	4b09      	ldr	r3, [pc, #36]	; (8003da4 <HAL_RCC_ClockConfig+0x1c8>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7fe fd78 	bl	8002878 <HAL_InitTick>

  return HAL_OK;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3710      	adds	r7, #16
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	40023c00 	.word	0x40023c00
 8003d98:	40023800 	.word	0x40023800
 8003d9c:	0800a660 	.word	0x0800a660
 8003da0:	20000000 	.word	0x20000000
 8003da4:	20000004 	.word	0x20000004

08003da8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003da8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003dac:	b090      	sub	sp, #64	; 0x40
 8003dae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003db0:	2300      	movs	r3, #0
 8003db2:	637b      	str	r3, [r7, #52]	; 0x34
 8003db4:	2300      	movs	r3, #0
 8003db6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003db8:	2300      	movs	r3, #0
 8003dba:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003dc0:	4b59      	ldr	r3, [pc, #356]	; (8003f28 <HAL_RCC_GetSysClockFreq+0x180>)
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	f003 030c 	and.w	r3, r3, #12
 8003dc8:	2b08      	cmp	r3, #8
 8003dca:	d00d      	beq.n	8003de8 <HAL_RCC_GetSysClockFreq+0x40>
 8003dcc:	2b08      	cmp	r3, #8
 8003dce:	f200 80a1 	bhi.w	8003f14 <HAL_RCC_GetSysClockFreq+0x16c>
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d002      	beq.n	8003ddc <HAL_RCC_GetSysClockFreq+0x34>
 8003dd6:	2b04      	cmp	r3, #4
 8003dd8:	d003      	beq.n	8003de2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003dda:	e09b      	b.n	8003f14 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ddc:	4b53      	ldr	r3, [pc, #332]	; (8003f2c <HAL_RCC_GetSysClockFreq+0x184>)
 8003dde:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003de0:	e09b      	b.n	8003f1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003de2:	4b53      	ldr	r3, [pc, #332]	; (8003f30 <HAL_RCC_GetSysClockFreq+0x188>)
 8003de4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003de6:	e098      	b.n	8003f1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003de8:	4b4f      	ldr	r3, [pc, #316]	; (8003f28 <HAL_RCC_GetSysClockFreq+0x180>)
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003df0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003df2:	4b4d      	ldr	r3, [pc, #308]	; (8003f28 <HAL_RCC_GetSysClockFreq+0x180>)
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d028      	beq.n	8003e50 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dfe:	4b4a      	ldr	r3, [pc, #296]	; (8003f28 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	099b      	lsrs	r3, r3, #6
 8003e04:	2200      	movs	r2, #0
 8003e06:	623b      	str	r3, [r7, #32]
 8003e08:	627a      	str	r2, [r7, #36]	; 0x24
 8003e0a:	6a3b      	ldr	r3, [r7, #32]
 8003e0c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003e10:	2100      	movs	r1, #0
 8003e12:	4b47      	ldr	r3, [pc, #284]	; (8003f30 <HAL_RCC_GetSysClockFreq+0x188>)
 8003e14:	fb03 f201 	mul.w	r2, r3, r1
 8003e18:	2300      	movs	r3, #0
 8003e1a:	fb00 f303 	mul.w	r3, r0, r3
 8003e1e:	4413      	add	r3, r2
 8003e20:	4a43      	ldr	r2, [pc, #268]	; (8003f30 <HAL_RCC_GetSysClockFreq+0x188>)
 8003e22:	fba0 1202 	umull	r1, r2, r0, r2
 8003e26:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e28:	460a      	mov	r2, r1
 8003e2a:	62ba      	str	r2, [r7, #40]	; 0x28
 8003e2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e2e:	4413      	add	r3, r2
 8003e30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e34:	2200      	movs	r2, #0
 8003e36:	61bb      	str	r3, [r7, #24]
 8003e38:	61fa      	str	r2, [r7, #28]
 8003e3a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e3e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003e42:	f7fc fe13 	bl	8000a6c <__aeabi_uldivmod>
 8003e46:	4602      	mov	r2, r0
 8003e48:	460b      	mov	r3, r1
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e4e:	e053      	b.n	8003ef8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e50:	4b35      	ldr	r3, [pc, #212]	; (8003f28 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	099b      	lsrs	r3, r3, #6
 8003e56:	2200      	movs	r2, #0
 8003e58:	613b      	str	r3, [r7, #16]
 8003e5a:	617a      	str	r2, [r7, #20]
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003e62:	f04f 0b00 	mov.w	fp, #0
 8003e66:	4652      	mov	r2, sl
 8003e68:	465b      	mov	r3, fp
 8003e6a:	f04f 0000 	mov.w	r0, #0
 8003e6e:	f04f 0100 	mov.w	r1, #0
 8003e72:	0159      	lsls	r1, r3, #5
 8003e74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e78:	0150      	lsls	r0, r2, #5
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	460b      	mov	r3, r1
 8003e7e:	ebb2 080a 	subs.w	r8, r2, sl
 8003e82:	eb63 090b 	sbc.w	r9, r3, fp
 8003e86:	f04f 0200 	mov.w	r2, #0
 8003e8a:	f04f 0300 	mov.w	r3, #0
 8003e8e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003e92:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003e96:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003e9a:	ebb2 0408 	subs.w	r4, r2, r8
 8003e9e:	eb63 0509 	sbc.w	r5, r3, r9
 8003ea2:	f04f 0200 	mov.w	r2, #0
 8003ea6:	f04f 0300 	mov.w	r3, #0
 8003eaa:	00eb      	lsls	r3, r5, #3
 8003eac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003eb0:	00e2      	lsls	r2, r4, #3
 8003eb2:	4614      	mov	r4, r2
 8003eb4:	461d      	mov	r5, r3
 8003eb6:	eb14 030a 	adds.w	r3, r4, sl
 8003eba:	603b      	str	r3, [r7, #0]
 8003ebc:	eb45 030b 	adc.w	r3, r5, fp
 8003ec0:	607b      	str	r3, [r7, #4]
 8003ec2:	f04f 0200 	mov.w	r2, #0
 8003ec6:	f04f 0300 	mov.w	r3, #0
 8003eca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ece:	4629      	mov	r1, r5
 8003ed0:	028b      	lsls	r3, r1, #10
 8003ed2:	4621      	mov	r1, r4
 8003ed4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ed8:	4621      	mov	r1, r4
 8003eda:	028a      	lsls	r2, r1, #10
 8003edc:	4610      	mov	r0, r2
 8003ede:	4619      	mov	r1, r3
 8003ee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	60bb      	str	r3, [r7, #8]
 8003ee6:	60fa      	str	r2, [r7, #12]
 8003ee8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003eec:	f7fc fdbe 	bl	8000a6c <__aeabi_uldivmod>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	460b      	mov	r3, r1
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ef8:	4b0b      	ldr	r3, [pc, #44]	; (8003f28 <HAL_RCC_GetSysClockFreq+0x180>)
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	0c1b      	lsrs	r3, r3, #16
 8003efe:	f003 0303 	and.w	r3, r3, #3
 8003f02:	3301      	adds	r3, #1
 8003f04:	005b      	lsls	r3, r3, #1
 8003f06:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003f08:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f10:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003f12:	e002      	b.n	8003f1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f14:	4b05      	ldr	r3, [pc, #20]	; (8003f2c <HAL_RCC_GetSysClockFreq+0x184>)
 8003f16:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003f18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3740      	adds	r7, #64	; 0x40
 8003f20:	46bd      	mov	sp, r7
 8003f22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f26:	bf00      	nop
 8003f28:	40023800 	.word	0x40023800
 8003f2c:	00f42400 	.word	0x00f42400
 8003f30:	017d7840 	.word	0x017d7840

08003f34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f34:	b480      	push	{r7}
 8003f36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f38:	4b03      	ldr	r3, [pc, #12]	; (8003f48 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr
 8003f46:	bf00      	nop
 8003f48:	20000000 	.word	0x20000000

08003f4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003f50:	f7ff fff0 	bl	8003f34 <HAL_RCC_GetHCLKFreq>
 8003f54:	4602      	mov	r2, r0
 8003f56:	4b05      	ldr	r3, [pc, #20]	; (8003f6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	0a9b      	lsrs	r3, r3, #10
 8003f5c:	f003 0307 	and.w	r3, r3, #7
 8003f60:	4903      	ldr	r1, [pc, #12]	; (8003f70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f62:	5ccb      	ldrb	r3, [r1, r3]
 8003f64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	40023800 	.word	0x40023800
 8003f70:	0800a670 	.word	0x0800a670

08003f74 <sniprintf>:
 8003f74:	b40c      	push	{r2, r3}
 8003f76:	b530      	push	{r4, r5, lr}
 8003f78:	4b17      	ldr	r3, [pc, #92]	; (8003fd8 <sniprintf+0x64>)
 8003f7a:	1e0c      	subs	r4, r1, #0
 8003f7c:	681d      	ldr	r5, [r3, #0]
 8003f7e:	b09d      	sub	sp, #116	; 0x74
 8003f80:	da08      	bge.n	8003f94 <sniprintf+0x20>
 8003f82:	238b      	movs	r3, #139	; 0x8b
 8003f84:	602b      	str	r3, [r5, #0]
 8003f86:	f04f 30ff 	mov.w	r0, #4294967295
 8003f8a:	b01d      	add	sp, #116	; 0x74
 8003f8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003f90:	b002      	add	sp, #8
 8003f92:	4770      	bx	lr
 8003f94:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003f98:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003f9c:	bf14      	ite	ne
 8003f9e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003fa2:	4623      	moveq	r3, r4
 8003fa4:	9304      	str	r3, [sp, #16]
 8003fa6:	9307      	str	r3, [sp, #28]
 8003fa8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003fac:	9002      	str	r0, [sp, #8]
 8003fae:	9006      	str	r0, [sp, #24]
 8003fb0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003fb4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003fb6:	ab21      	add	r3, sp, #132	; 0x84
 8003fb8:	a902      	add	r1, sp, #8
 8003fba:	4628      	mov	r0, r5
 8003fbc:	9301      	str	r3, [sp, #4]
 8003fbe:	f000 f9bb 	bl	8004338 <_svfiprintf_r>
 8003fc2:	1c43      	adds	r3, r0, #1
 8003fc4:	bfbc      	itt	lt
 8003fc6:	238b      	movlt	r3, #139	; 0x8b
 8003fc8:	602b      	strlt	r3, [r5, #0]
 8003fca:	2c00      	cmp	r4, #0
 8003fcc:	d0dd      	beq.n	8003f8a <sniprintf+0x16>
 8003fce:	9b02      	ldr	r3, [sp, #8]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	701a      	strb	r2, [r3, #0]
 8003fd4:	e7d9      	b.n	8003f8a <sniprintf+0x16>
 8003fd6:	bf00      	nop
 8003fd8:	20000058 	.word	0x20000058

08003fdc <memmove>:
 8003fdc:	4288      	cmp	r0, r1
 8003fde:	b510      	push	{r4, lr}
 8003fe0:	eb01 0402 	add.w	r4, r1, r2
 8003fe4:	d902      	bls.n	8003fec <memmove+0x10>
 8003fe6:	4284      	cmp	r4, r0
 8003fe8:	4623      	mov	r3, r4
 8003fea:	d807      	bhi.n	8003ffc <memmove+0x20>
 8003fec:	1e43      	subs	r3, r0, #1
 8003fee:	42a1      	cmp	r1, r4
 8003ff0:	d008      	beq.n	8004004 <memmove+0x28>
 8003ff2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003ff6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003ffa:	e7f8      	b.n	8003fee <memmove+0x12>
 8003ffc:	4402      	add	r2, r0
 8003ffe:	4601      	mov	r1, r0
 8004000:	428a      	cmp	r2, r1
 8004002:	d100      	bne.n	8004006 <memmove+0x2a>
 8004004:	bd10      	pop	{r4, pc}
 8004006:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800400a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800400e:	e7f7      	b.n	8004000 <memmove+0x24>

08004010 <memset>:
 8004010:	4402      	add	r2, r0
 8004012:	4603      	mov	r3, r0
 8004014:	4293      	cmp	r3, r2
 8004016:	d100      	bne.n	800401a <memset+0xa>
 8004018:	4770      	bx	lr
 800401a:	f803 1b01 	strb.w	r1, [r3], #1
 800401e:	e7f9      	b.n	8004014 <memset+0x4>

08004020 <__errno>:
 8004020:	4b01      	ldr	r3, [pc, #4]	; (8004028 <__errno+0x8>)
 8004022:	6818      	ldr	r0, [r3, #0]
 8004024:	4770      	bx	lr
 8004026:	bf00      	nop
 8004028:	20000058 	.word	0x20000058

0800402c <__libc_init_array>:
 800402c:	b570      	push	{r4, r5, r6, lr}
 800402e:	4d0d      	ldr	r5, [pc, #52]	; (8004064 <__libc_init_array+0x38>)
 8004030:	4c0d      	ldr	r4, [pc, #52]	; (8004068 <__libc_init_array+0x3c>)
 8004032:	1b64      	subs	r4, r4, r5
 8004034:	10a4      	asrs	r4, r4, #2
 8004036:	2600      	movs	r6, #0
 8004038:	42a6      	cmp	r6, r4
 800403a:	d109      	bne.n	8004050 <__libc_init_array+0x24>
 800403c:	4d0b      	ldr	r5, [pc, #44]	; (800406c <__libc_init_array+0x40>)
 800403e:	4c0c      	ldr	r4, [pc, #48]	; (8004070 <__libc_init_array+0x44>)
 8004040:	f001 f9ce 	bl	80053e0 <_init>
 8004044:	1b64      	subs	r4, r4, r5
 8004046:	10a4      	asrs	r4, r4, #2
 8004048:	2600      	movs	r6, #0
 800404a:	42a6      	cmp	r6, r4
 800404c:	d105      	bne.n	800405a <__libc_init_array+0x2e>
 800404e:	bd70      	pop	{r4, r5, r6, pc}
 8004050:	f855 3b04 	ldr.w	r3, [r5], #4
 8004054:	4798      	blx	r3
 8004056:	3601      	adds	r6, #1
 8004058:	e7ee      	b.n	8004038 <__libc_init_array+0xc>
 800405a:	f855 3b04 	ldr.w	r3, [r5], #4
 800405e:	4798      	blx	r3
 8004060:	3601      	adds	r6, #1
 8004062:	e7f2      	b.n	800404a <__libc_init_array+0x1e>
 8004064:	0800aa84 	.word	0x0800aa84
 8004068:	0800aa84 	.word	0x0800aa84
 800406c:	0800aa84 	.word	0x0800aa84
 8004070:	0800aa88 	.word	0x0800aa88

08004074 <__retarget_lock_acquire_recursive>:
 8004074:	4770      	bx	lr

08004076 <__retarget_lock_release_recursive>:
 8004076:	4770      	bx	lr

08004078 <memcpy>:
 8004078:	440a      	add	r2, r1
 800407a:	4291      	cmp	r1, r2
 800407c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004080:	d100      	bne.n	8004084 <memcpy+0xc>
 8004082:	4770      	bx	lr
 8004084:	b510      	push	{r4, lr}
 8004086:	f811 4b01 	ldrb.w	r4, [r1], #1
 800408a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800408e:	4291      	cmp	r1, r2
 8004090:	d1f9      	bne.n	8004086 <memcpy+0xe>
 8004092:	bd10      	pop	{r4, pc}

08004094 <_free_r>:
 8004094:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004096:	2900      	cmp	r1, #0
 8004098:	d044      	beq.n	8004124 <_free_r+0x90>
 800409a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800409e:	9001      	str	r0, [sp, #4]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	f1a1 0404 	sub.w	r4, r1, #4
 80040a6:	bfb8      	it	lt
 80040a8:	18e4      	addlt	r4, r4, r3
 80040aa:	f000 f8df 	bl	800426c <__malloc_lock>
 80040ae:	4a1e      	ldr	r2, [pc, #120]	; (8004128 <_free_r+0x94>)
 80040b0:	9801      	ldr	r0, [sp, #4]
 80040b2:	6813      	ldr	r3, [r2, #0]
 80040b4:	b933      	cbnz	r3, 80040c4 <_free_r+0x30>
 80040b6:	6063      	str	r3, [r4, #4]
 80040b8:	6014      	str	r4, [r2, #0]
 80040ba:	b003      	add	sp, #12
 80040bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80040c0:	f000 b8da 	b.w	8004278 <__malloc_unlock>
 80040c4:	42a3      	cmp	r3, r4
 80040c6:	d908      	bls.n	80040da <_free_r+0x46>
 80040c8:	6825      	ldr	r5, [r4, #0]
 80040ca:	1961      	adds	r1, r4, r5
 80040cc:	428b      	cmp	r3, r1
 80040ce:	bf01      	itttt	eq
 80040d0:	6819      	ldreq	r1, [r3, #0]
 80040d2:	685b      	ldreq	r3, [r3, #4]
 80040d4:	1949      	addeq	r1, r1, r5
 80040d6:	6021      	streq	r1, [r4, #0]
 80040d8:	e7ed      	b.n	80040b6 <_free_r+0x22>
 80040da:	461a      	mov	r2, r3
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	b10b      	cbz	r3, 80040e4 <_free_r+0x50>
 80040e0:	42a3      	cmp	r3, r4
 80040e2:	d9fa      	bls.n	80040da <_free_r+0x46>
 80040e4:	6811      	ldr	r1, [r2, #0]
 80040e6:	1855      	adds	r5, r2, r1
 80040e8:	42a5      	cmp	r5, r4
 80040ea:	d10b      	bne.n	8004104 <_free_r+0x70>
 80040ec:	6824      	ldr	r4, [r4, #0]
 80040ee:	4421      	add	r1, r4
 80040f0:	1854      	adds	r4, r2, r1
 80040f2:	42a3      	cmp	r3, r4
 80040f4:	6011      	str	r1, [r2, #0]
 80040f6:	d1e0      	bne.n	80040ba <_free_r+0x26>
 80040f8:	681c      	ldr	r4, [r3, #0]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	6053      	str	r3, [r2, #4]
 80040fe:	440c      	add	r4, r1
 8004100:	6014      	str	r4, [r2, #0]
 8004102:	e7da      	b.n	80040ba <_free_r+0x26>
 8004104:	d902      	bls.n	800410c <_free_r+0x78>
 8004106:	230c      	movs	r3, #12
 8004108:	6003      	str	r3, [r0, #0]
 800410a:	e7d6      	b.n	80040ba <_free_r+0x26>
 800410c:	6825      	ldr	r5, [r4, #0]
 800410e:	1961      	adds	r1, r4, r5
 8004110:	428b      	cmp	r3, r1
 8004112:	bf04      	itt	eq
 8004114:	6819      	ldreq	r1, [r3, #0]
 8004116:	685b      	ldreq	r3, [r3, #4]
 8004118:	6063      	str	r3, [r4, #4]
 800411a:	bf04      	itt	eq
 800411c:	1949      	addeq	r1, r1, r5
 800411e:	6021      	streq	r1, [r4, #0]
 8004120:	6054      	str	r4, [r2, #4]
 8004122:	e7ca      	b.n	80040ba <_free_r+0x26>
 8004124:	b003      	add	sp, #12
 8004126:	bd30      	pop	{r4, r5, pc}
 8004128:	2000061c 	.word	0x2000061c

0800412c <sbrk_aligned>:
 800412c:	b570      	push	{r4, r5, r6, lr}
 800412e:	4e0e      	ldr	r6, [pc, #56]	; (8004168 <sbrk_aligned+0x3c>)
 8004130:	460c      	mov	r4, r1
 8004132:	6831      	ldr	r1, [r6, #0]
 8004134:	4605      	mov	r5, r0
 8004136:	b911      	cbnz	r1, 800413e <sbrk_aligned+0x12>
 8004138:	f000 fb8c 	bl	8004854 <_sbrk_r>
 800413c:	6030      	str	r0, [r6, #0]
 800413e:	4621      	mov	r1, r4
 8004140:	4628      	mov	r0, r5
 8004142:	f000 fb87 	bl	8004854 <_sbrk_r>
 8004146:	1c43      	adds	r3, r0, #1
 8004148:	d00a      	beq.n	8004160 <sbrk_aligned+0x34>
 800414a:	1cc4      	adds	r4, r0, #3
 800414c:	f024 0403 	bic.w	r4, r4, #3
 8004150:	42a0      	cmp	r0, r4
 8004152:	d007      	beq.n	8004164 <sbrk_aligned+0x38>
 8004154:	1a21      	subs	r1, r4, r0
 8004156:	4628      	mov	r0, r5
 8004158:	f000 fb7c 	bl	8004854 <_sbrk_r>
 800415c:	3001      	adds	r0, #1
 800415e:	d101      	bne.n	8004164 <sbrk_aligned+0x38>
 8004160:	f04f 34ff 	mov.w	r4, #4294967295
 8004164:	4620      	mov	r0, r4
 8004166:	bd70      	pop	{r4, r5, r6, pc}
 8004168:	20000620 	.word	0x20000620

0800416c <_malloc_r>:
 800416c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004170:	1ccd      	adds	r5, r1, #3
 8004172:	f025 0503 	bic.w	r5, r5, #3
 8004176:	3508      	adds	r5, #8
 8004178:	2d0c      	cmp	r5, #12
 800417a:	bf38      	it	cc
 800417c:	250c      	movcc	r5, #12
 800417e:	2d00      	cmp	r5, #0
 8004180:	4607      	mov	r7, r0
 8004182:	db01      	blt.n	8004188 <_malloc_r+0x1c>
 8004184:	42a9      	cmp	r1, r5
 8004186:	d905      	bls.n	8004194 <_malloc_r+0x28>
 8004188:	230c      	movs	r3, #12
 800418a:	603b      	str	r3, [r7, #0]
 800418c:	2600      	movs	r6, #0
 800418e:	4630      	mov	r0, r6
 8004190:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004194:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004268 <_malloc_r+0xfc>
 8004198:	f000 f868 	bl	800426c <__malloc_lock>
 800419c:	f8d8 3000 	ldr.w	r3, [r8]
 80041a0:	461c      	mov	r4, r3
 80041a2:	bb5c      	cbnz	r4, 80041fc <_malloc_r+0x90>
 80041a4:	4629      	mov	r1, r5
 80041a6:	4638      	mov	r0, r7
 80041a8:	f7ff ffc0 	bl	800412c <sbrk_aligned>
 80041ac:	1c43      	adds	r3, r0, #1
 80041ae:	4604      	mov	r4, r0
 80041b0:	d155      	bne.n	800425e <_malloc_r+0xf2>
 80041b2:	f8d8 4000 	ldr.w	r4, [r8]
 80041b6:	4626      	mov	r6, r4
 80041b8:	2e00      	cmp	r6, #0
 80041ba:	d145      	bne.n	8004248 <_malloc_r+0xdc>
 80041bc:	2c00      	cmp	r4, #0
 80041be:	d048      	beq.n	8004252 <_malloc_r+0xe6>
 80041c0:	6823      	ldr	r3, [r4, #0]
 80041c2:	4631      	mov	r1, r6
 80041c4:	4638      	mov	r0, r7
 80041c6:	eb04 0903 	add.w	r9, r4, r3
 80041ca:	f000 fb43 	bl	8004854 <_sbrk_r>
 80041ce:	4581      	cmp	r9, r0
 80041d0:	d13f      	bne.n	8004252 <_malloc_r+0xe6>
 80041d2:	6821      	ldr	r1, [r4, #0]
 80041d4:	1a6d      	subs	r5, r5, r1
 80041d6:	4629      	mov	r1, r5
 80041d8:	4638      	mov	r0, r7
 80041da:	f7ff ffa7 	bl	800412c <sbrk_aligned>
 80041de:	3001      	adds	r0, #1
 80041e0:	d037      	beq.n	8004252 <_malloc_r+0xe6>
 80041e2:	6823      	ldr	r3, [r4, #0]
 80041e4:	442b      	add	r3, r5
 80041e6:	6023      	str	r3, [r4, #0]
 80041e8:	f8d8 3000 	ldr.w	r3, [r8]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d038      	beq.n	8004262 <_malloc_r+0xf6>
 80041f0:	685a      	ldr	r2, [r3, #4]
 80041f2:	42a2      	cmp	r2, r4
 80041f4:	d12b      	bne.n	800424e <_malloc_r+0xe2>
 80041f6:	2200      	movs	r2, #0
 80041f8:	605a      	str	r2, [r3, #4]
 80041fa:	e00f      	b.n	800421c <_malloc_r+0xb0>
 80041fc:	6822      	ldr	r2, [r4, #0]
 80041fe:	1b52      	subs	r2, r2, r5
 8004200:	d41f      	bmi.n	8004242 <_malloc_r+0xd6>
 8004202:	2a0b      	cmp	r2, #11
 8004204:	d917      	bls.n	8004236 <_malloc_r+0xca>
 8004206:	1961      	adds	r1, r4, r5
 8004208:	42a3      	cmp	r3, r4
 800420a:	6025      	str	r5, [r4, #0]
 800420c:	bf18      	it	ne
 800420e:	6059      	strne	r1, [r3, #4]
 8004210:	6863      	ldr	r3, [r4, #4]
 8004212:	bf08      	it	eq
 8004214:	f8c8 1000 	streq.w	r1, [r8]
 8004218:	5162      	str	r2, [r4, r5]
 800421a:	604b      	str	r3, [r1, #4]
 800421c:	4638      	mov	r0, r7
 800421e:	f104 060b 	add.w	r6, r4, #11
 8004222:	f000 f829 	bl	8004278 <__malloc_unlock>
 8004226:	f026 0607 	bic.w	r6, r6, #7
 800422a:	1d23      	adds	r3, r4, #4
 800422c:	1af2      	subs	r2, r6, r3
 800422e:	d0ae      	beq.n	800418e <_malloc_r+0x22>
 8004230:	1b9b      	subs	r3, r3, r6
 8004232:	50a3      	str	r3, [r4, r2]
 8004234:	e7ab      	b.n	800418e <_malloc_r+0x22>
 8004236:	42a3      	cmp	r3, r4
 8004238:	6862      	ldr	r2, [r4, #4]
 800423a:	d1dd      	bne.n	80041f8 <_malloc_r+0x8c>
 800423c:	f8c8 2000 	str.w	r2, [r8]
 8004240:	e7ec      	b.n	800421c <_malloc_r+0xb0>
 8004242:	4623      	mov	r3, r4
 8004244:	6864      	ldr	r4, [r4, #4]
 8004246:	e7ac      	b.n	80041a2 <_malloc_r+0x36>
 8004248:	4634      	mov	r4, r6
 800424a:	6876      	ldr	r6, [r6, #4]
 800424c:	e7b4      	b.n	80041b8 <_malloc_r+0x4c>
 800424e:	4613      	mov	r3, r2
 8004250:	e7cc      	b.n	80041ec <_malloc_r+0x80>
 8004252:	230c      	movs	r3, #12
 8004254:	603b      	str	r3, [r7, #0]
 8004256:	4638      	mov	r0, r7
 8004258:	f000 f80e 	bl	8004278 <__malloc_unlock>
 800425c:	e797      	b.n	800418e <_malloc_r+0x22>
 800425e:	6025      	str	r5, [r4, #0]
 8004260:	e7dc      	b.n	800421c <_malloc_r+0xb0>
 8004262:	605b      	str	r3, [r3, #4]
 8004264:	deff      	udf	#255	; 0xff
 8004266:	bf00      	nop
 8004268:	2000061c 	.word	0x2000061c

0800426c <__malloc_lock>:
 800426c:	4801      	ldr	r0, [pc, #4]	; (8004274 <__malloc_lock+0x8>)
 800426e:	f7ff bf01 	b.w	8004074 <__retarget_lock_acquire_recursive>
 8004272:	bf00      	nop
 8004274:	20000618 	.word	0x20000618

08004278 <__malloc_unlock>:
 8004278:	4801      	ldr	r0, [pc, #4]	; (8004280 <__malloc_unlock+0x8>)
 800427a:	f7ff befc 	b.w	8004076 <__retarget_lock_release_recursive>
 800427e:	bf00      	nop
 8004280:	20000618 	.word	0x20000618

08004284 <__ssputs_r>:
 8004284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004288:	688e      	ldr	r6, [r1, #8]
 800428a:	461f      	mov	r7, r3
 800428c:	42be      	cmp	r6, r7
 800428e:	680b      	ldr	r3, [r1, #0]
 8004290:	4682      	mov	sl, r0
 8004292:	460c      	mov	r4, r1
 8004294:	4690      	mov	r8, r2
 8004296:	d82c      	bhi.n	80042f2 <__ssputs_r+0x6e>
 8004298:	898a      	ldrh	r2, [r1, #12]
 800429a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800429e:	d026      	beq.n	80042ee <__ssputs_r+0x6a>
 80042a0:	6965      	ldr	r5, [r4, #20]
 80042a2:	6909      	ldr	r1, [r1, #16]
 80042a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80042a8:	eba3 0901 	sub.w	r9, r3, r1
 80042ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80042b0:	1c7b      	adds	r3, r7, #1
 80042b2:	444b      	add	r3, r9
 80042b4:	106d      	asrs	r5, r5, #1
 80042b6:	429d      	cmp	r5, r3
 80042b8:	bf38      	it	cc
 80042ba:	461d      	movcc	r5, r3
 80042bc:	0553      	lsls	r3, r2, #21
 80042be:	d527      	bpl.n	8004310 <__ssputs_r+0x8c>
 80042c0:	4629      	mov	r1, r5
 80042c2:	f7ff ff53 	bl	800416c <_malloc_r>
 80042c6:	4606      	mov	r6, r0
 80042c8:	b360      	cbz	r0, 8004324 <__ssputs_r+0xa0>
 80042ca:	6921      	ldr	r1, [r4, #16]
 80042cc:	464a      	mov	r2, r9
 80042ce:	f7ff fed3 	bl	8004078 <memcpy>
 80042d2:	89a3      	ldrh	r3, [r4, #12]
 80042d4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80042d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042dc:	81a3      	strh	r3, [r4, #12]
 80042de:	6126      	str	r6, [r4, #16]
 80042e0:	6165      	str	r5, [r4, #20]
 80042e2:	444e      	add	r6, r9
 80042e4:	eba5 0509 	sub.w	r5, r5, r9
 80042e8:	6026      	str	r6, [r4, #0]
 80042ea:	60a5      	str	r5, [r4, #8]
 80042ec:	463e      	mov	r6, r7
 80042ee:	42be      	cmp	r6, r7
 80042f0:	d900      	bls.n	80042f4 <__ssputs_r+0x70>
 80042f2:	463e      	mov	r6, r7
 80042f4:	6820      	ldr	r0, [r4, #0]
 80042f6:	4632      	mov	r2, r6
 80042f8:	4641      	mov	r1, r8
 80042fa:	f7ff fe6f 	bl	8003fdc <memmove>
 80042fe:	68a3      	ldr	r3, [r4, #8]
 8004300:	1b9b      	subs	r3, r3, r6
 8004302:	60a3      	str	r3, [r4, #8]
 8004304:	6823      	ldr	r3, [r4, #0]
 8004306:	4433      	add	r3, r6
 8004308:	6023      	str	r3, [r4, #0]
 800430a:	2000      	movs	r0, #0
 800430c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004310:	462a      	mov	r2, r5
 8004312:	f000 faaf 	bl	8004874 <_realloc_r>
 8004316:	4606      	mov	r6, r0
 8004318:	2800      	cmp	r0, #0
 800431a:	d1e0      	bne.n	80042de <__ssputs_r+0x5a>
 800431c:	6921      	ldr	r1, [r4, #16]
 800431e:	4650      	mov	r0, sl
 8004320:	f7ff feb8 	bl	8004094 <_free_r>
 8004324:	230c      	movs	r3, #12
 8004326:	f8ca 3000 	str.w	r3, [sl]
 800432a:	89a3      	ldrh	r3, [r4, #12]
 800432c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004330:	81a3      	strh	r3, [r4, #12]
 8004332:	f04f 30ff 	mov.w	r0, #4294967295
 8004336:	e7e9      	b.n	800430c <__ssputs_r+0x88>

08004338 <_svfiprintf_r>:
 8004338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800433c:	4698      	mov	r8, r3
 800433e:	898b      	ldrh	r3, [r1, #12]
 8004340:	061b      	lsls	r3, r3, #24
 8004342:	b09d      	sub	sp, #116	; 0x74
 8004344:	4607      	mov	r7, r0
 8004346:	460d      	mov	r5, r1
 8004348:	4614      	mov	r4, r2
 800434a:	d50e      	bpl.n	800436a <_svfiprintf_r+0x32>
 800434c:	690b      	ldr	r3, [r1, #16]
 800434e:	b963      	cbnz	r3, 800436a <_svfiprintf_r+0x32>
 8004350:	2140      	movs	r1, #64	; 0x40
 8004352:	f7ff ff0b 	bl	800416c <_malloc_r>
 8004356:	6028      	str	r0, [r5, #0]
 8004358:	6128      	str	r0, [r5, #16]
 800435a:	b920      	cbnz	r0, 8004366 <_svfiprintf_r+0x2e>
 800435c:	230c      	movs	r3, #12
 800435e:	603b      	str	r3, [r7, #0]
 8004360:	f04f 30ff 	mov.w	r0, #4294967295
 8004364:	e0d0      	b.n	8004508 <_svfiprintf_r+0x1d0>
 8004366:	2340      	movs	r3, #64	; 0x40
 8004368:	616b      	str	r3, [r5, #20]
 800436a:	2300      	movs	r3, #0
 800436c:	9309      	str	r3, [sp, #36]	; 0x24
 800436e:	2320      	movs	r3, #32
 8004370:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004374:	f8cd 800c 	str.w	r8, [sp, #12]
 8004378:	2330      	movs	r3, #48	; 0x30
 800437a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004520 <_svfiprintf_r+0x1e8>
 800437e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004382:	f04f 0901 	mov.w	r9, #1
 8004386:	4623      	mov	r3, r4
 8004388:	469a      	mov	sl, r3
 800438a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800438e:	b10a      	cbz	r2, 8004394 <_svfiprintf_r+0x5c>
 8004390:	2a25      	cmp	r2, #37	; 0x25
 8004392:	d1f9      	bne.n	8004388 <_svfiprintf_r+0x50>
 8004394:	ebba 0b04 	subs.w	fp, sl, r4
 8004398:	d00b      	beq.n	80043b2 <_svfiprintf_r+0x7a>
 800439a:	465b      	mov	r3, fp
 800439c:	4622      	mov	r2, r4
 800439e:	4629      	mov	r1, r5
 80043a0:	4638      	mov	r0, r7
 80043a2:	f7ff ff6f 	bl	8004284 <__ssputs_r>
 80043a6:	3001      	adds	r0, #1
 80043a8:	f000 80a9 	beq.w	80044fe <_svfiprintf_r+0x1c6>
 80043ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80043ae:	445a      	add	r2, fp
 80043b0:	9209      	str	r2, [sp, #36]	; 0x24
 80043b2:	f89a 3000 	ldrb.w	r3, [sl]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	f000 80a1 	beq.w	80044fe <_svfiprintf_r+0x1c6>
 80043bc:	2300      	movs	r3, #0
 80043be:	f04f 32ff 	mov.w	r2, #4294967295
 80043c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80043c6:	f10a 0a01 	add.w	sl, sl, #1
 80043ca:	9304      	str	r3, [sp, #16]
 80043cc:	9307      	str	r3, [sp, #28]
 80043ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80043d2:	931a      	str	r3, [sp, #104]	; 0x68
 80043d4:	4654      	mov	r4, sl
 80043d6:	2205      	movs	r2, #5
 80043d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043dc:	4850      	ldr	r0, [pc, #320]	; (8004520 <_svfiprintf_r+0x1e8>)
 80043de:	f7fb feff 	bl	80001e0 <memchr>
 80043e2:	9a04      	ldr	r2, [sp, #16]
 80043e4:	b9d8      	cbnz	r0, 800441e <_svfiprintf_r+0xe6>
 80043e6:	06d0      	lsls	r0, r2, #27
 80043e8:	bf44      	itt	mi
 80043ea:	2320      	movmi	r3, #32
 80043ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80043f0:	0711      	lsls	r1, r2, #28
 80043f2:	bf44      	itt	mi
 80043f4:	232b      	movmi	r3, #43	; 0x2b
 80043f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80043fa:	f89a 3000 	ldrb.w	r3, [sl]
 80043fe:	2b2a      	cmp	r3, #42	; 0x2a
 8004400:	d015      	beq.n	800442e <_svfiprintf_r+0xf6>
 8004402:	9a07      	ldr	r2, [sp, #28]
 8004404:	4654      	mov	r4, sl
 8004406:	2000      	movs	r0, #0
 8004408:	f04f 0c0a 	mov.w	ip, #10
 800440c:	4621      	mov	r1, r4
 800440e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004412:	3b30      	subs	r3, #48	; 0x30
 8004414:	2b09      	cmp	r3, #9
 8004416:	d94d      	bls.n	80044b4 <_svfiprintf_r+0x17c>
 8004418:	b1b0      	cbz	r0, 8004448 <_svfiprintf_r+0x110>
 800441a:	9207      	str	r2, [sp, #28]
 800441c:	e014      	b.n	8004448 <_svfiprintf_r+0x110>
 800441e:	eba0 0308 	sub.w	r3, r0, r8
 8004422:	fa09 f303 	lsl.w	r3, r9, r3
 8004426:	4313      	orrs	r3, r2
 8004428:	9304      	str	r3, [sp, #16]
 800442a:	46a2      	mov	sl, r4
 800442c:	e7d2      	b.n	80043d4 <_svfiprintf_r+0x9c>
 800442e:	9b03      	ldr	r3, [sp, #12]
 8004430:	1d19      	adds	r1, r3, #4
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	9103      	str	r1, [sp, #12]
 8004436:	2b00      	cmp	r3, #0
 8004438:	bfbb      	ittet	lt
 800443a:	425b      	neglt	r3, r3
 800443c:	f042 0202 	orrlt.w	r2, r2, #2
 8004440:	9307      	strge	r3, [sp, #28]
 8004442:	9307      	strlt	r3, [sp, #28]
 8004444:	bfb8      	it	lt
 8004446:	9204      	strlt	r2, [sp, #16]
 8004448:	7823      	ldrb	r3, [r4, #0]
 800444a:	2b2e      	cmp	r3, #46	; 0x2e
 800444c:	d10c      	bne.n	8004468 <_svfiprintf_r+0x130>
 800444e:	7863      	ldrb	r3, [r4, #1]
 8004450:	2b2a      	cmp	r3, #42	; 0x2a
 8004452:	d134      	bne.n	80044be <_svfiprintf_r+0x186>
 8004454:	9b03      	ldr	r3, [sp, #12]
 8004456:	1d1a      	adds	r2, r3, #4
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	9203      	str	r2, [sp, #12]
 800445c:	2b00      	cmp	r3, #0
 800445e:	bfb8      	it	lt
 8004460:	f04f 33ff 	movlt.w	r3, #4294967295
 8004464:	3402      	adds	r4, #2
 8004466:	9305      	str	r3, [sp, #20]
 8004468:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004530 <_svfiprintf_r+0x1f8>
 800446c:	7821      	ldrb	r1, [r4, #0]
 800446e:	2203      	movs	r2, #3
 8004470:	4650      	mov	r0, sl
 8004472:	f7fb feb5 	bl	80001e0 <memchr>
 8004476:	b138      	cbz	r0, 8004488 <_svfiprintf_r+0x150>
 8004478:	9b04      	ldr	r3, [sp, #16]
 800447a:	eba0 000a 	sub.w	r0, r0, sl
 800447e:	2240      	movs	r2, #64	; 0x40
 8004480:	4082      	lsls	r2, r0
 8004482:	4313      	orrs	r3, r2
 8004484:	3401      	adds	r4, #1
 8004486:	9304      	str	r3, [sp, #16]
 8004488:	f814 1b01 	ldrb.w	r1, [r4], #1
 800448c:	4825      	ldr	r0, [pc, #148]	; (8004524 <_svfiprintf_r+0x1ec>)
 800448e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004492:	2206      	movs	r2, #6
 8004494:	f7fb fea4 	bl	80001e0 <memchr>
 8004498:	2800      	cmp	r0, #0
 800449a:	d038      	beq.n	800450e <_svfiprintf_r+0x1d6>
 800449c:	4b22      	ldr	r3, [pc, #136]	; (8004528 <_svfiprintf_r+0x1f0>)
 800449e:	bb1b      	cbnz	r3, 80044e8 <_svfiprintf_r+0x1b0>
 80044a0:	9b03      	ldr	r3, [sp, #12]
 80044a2:	3307      	adds	r3, #7
 80044a4:	f023 0307 	bic.w	r3, r3, #7
 80044a8:	3308      	adds	r3, #8
 80044aa:	9303      	str	r3, [sp, #12]
 80044ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044ae:	4433      	add	r3, r6
 80044b0:	9309      	str	r3, [sp, #36]	; 0x24
 80044b2:	e768      	b.n	8004386 <_svfiprintf_r+0x4e>
 80044b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80044b8:	460c      	mov	r4, r1
 80044ba:	2001      	movs	r0, #1
 80044bc:	e7a6      	b.n	800440c <_svfiprintf_r+0xd4>
 80044be:	2300      	movs	r3, #0
 80044c0:	3401      	adds	r4, #1
 80044c2:	9305      	str	r3, [sp, #20]
 80044c4:	4619      	mov	r1, r3
 80044c6:	f04f 0c0a 	mov.w	ip, #10
 80044ca:	4620      	mov	r0, r4
 80044cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80044d0:	3a30      	subs	r2, #48	; 0x30
 80044d2:	2a09      	cmp	r2, #9
 80044d4:	d903      	bls.n	80044de <_svfiprintf_r+0x1a6>
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d0c6      	beq.n	8004468 <_svfiprintf_r+0x130>
 80044da:	9105      	str	r1, [sp, #20]
 80044dc:	e7c4      	b.n	8004468 <_svfiprintf_r+0x130>
 80044de:	fb0c 2101 	mla	r1, ip, r1, r2
 80044e2:	4604      	mov	r4, r0
 80044e4:	2301      	movs	r3, #1
 80044e6:	e7f0      	b.n	80044ca <_svfiprintf_r+0x192>
 80044e8:	ab03      	add	r3, sp, #12
 80044ea:	9300      	str	r3, [sp, #0]
 80044ec:	462a      	mov	r2, r5
 80044ee:	4b0f      	ldr	r3, [pc, #60]	; (800452c <_svfiprintf_r+0x1f4>)
 80044f0:	a904      	add	r1, sp, #16
 80044f2:	4638      	mov	r0, r7
 80044f4:	f3af 8000 	nop.w
 80044f8:	1c42      	adds	r2, r0, #1
 80044fa:	4606      	mov	r6, r0
 80044fc:	d1d6      	bne.n	80044ac <_svfiprintf_r+0x174>
 80044fe:	89ab      	ldrh	r3, [r5, #12]
 8004500:	065b      	lsls	r3, r3, #25
 8004502:	f53f af2d 	bmi.w	8004360 <_svfiprintf_r+0x28>
 8004506:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004508:	b01d      	add	sp, #116	; 0x74
 800450a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800450e:	ab03      	add	r3, sp, #12
 8004510:	9300      	str	r3, [sp, #0]
 8004512:	462a      	mov	r2, r5
 8004514:	4b05      	ldr	r3, [pc, #20]	; (800452c <_svfiprintf_r+0x1f4>)
 8004516:	a904      	add	r1, sp, #16
 8004518:	4638      	mov	r0, r7
 800451a:	f000 f879 	bl	8004610 <_printf_i>
 800451e:	e7eb      	b.n	80044f8 <_svfiprintf_r+0x1c0>
 8004520:	0800a678 	.word	0x0800a678
 8004524:	0800a682 	.word	0x0800a682
 8004528:	00000000 	.word	0x00000000
 800452c:	08004285 	.word	0x08004285
 8004530:	0800a67e 	.word	0x0800a67e

08004534 <_printf_common>:
 8004534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004538:	4616      	mov	r6, r2
 800453a:	4699      	mov	r9, r3
 800453c:	688a      	ldr	r2, [r1, #8]
 800453e:	690b      	ldr	r3, [r1, #16]
 8004540:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004544:	4293      	cmp	r3, r2
 8004546:	bfb8      	it	lt
 8004548:	4613      	movlt	r3, r2
 800454a:	6033      	str	r3, [r6, #0]
 800454c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004550:	4607      	mov	r7, r0
 8004552:	460c      	mov	r4, r1
 8004554:	b10a      	cbz	r2, 800455a <_printf_common+0x26>
 8004556:	3301      	adds	r3, #1
 8004558:	6033      	str	r3, [r6, #0]
 800455a:	6823      	ldr	r3, [r4, #0]
 800455c:	0699      	lsls	r1, r3, #26
 800455e:	bf42      	ittt	mi
 8004560:	6833      	ldrmi	r3, [r6, #0]
 8004562:	3302      	addmi	r3, #2
 8004564:	6033      	strmi	r3, [r6, #0]
 8004566:	6825      	ldr	r5, [r4, #0]
 8004568:	f015 0506 	ands.w	r5, r5, #6
 800456c:	d106      	bne.n	800457c <_printf_common+0x48>
 800456e:	f104 0a19 	add.w	sl, r4, #25
 8004572:	68e3      	ldr	r3, [r4, #12]
 8004574:	6832      	ldr	r2, [r6, #0]
 8004576:	1a9b      	subs	r3, r3, r2
 8004578:	42ab      	cmp	r3, r5
 800457a:	dc26      	bgt.n	80045ca <_printf_common+0x96>
 800457c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004580:	1e13      	subs	r3, r2, #0
 8004582:	6822      	ldr	r2, [r4, #0]
 8004584:	bf18      	it	ne
 8004586:	2301      	movne	r3, #1
 8004588:	0692      	lsls	r2, r2, #26
 800458a:	d42b      	bmi.n	80045e4 <_printf_common+0xb0>
 800458c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004590:	4649      	mov	r1, r9
 8004592:	4638      	mov	r0, r7
 8004594:	47c0      	blx	r8
 8004596:	3001      	adds	r0, #1
 8004598:	d01e      	beq.n	80045d8 <_printf_common+0xa4>
 800459a:	6823      	ldr	r3, [r4, #0]
 800459c:	6922      	ldr	r2, [r4, #16]
 800459e:	f003 0306 	and.w	r3, r3, #6
 80045a2:	2b04      	cmp	r3, #4
 80045a4:	bf02      	ittt	eq
 80045a6:	68e5      	ldreq	r5, [r4, #12]
 80045a8:	6833      	ldreq	r3, [r6, #0]
 80045aa:	1aed      	subeq	r5, r5, r3
 80045ac:	68a3      	ldr	r3, [r4, #8]
 80045ae:	bf0c      	ite	eq
 80045b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80045b4:	2500      	movne	r5, #0
 80045b6:	4293      	cmp	r3, r2
 80045b8:	bfc4      	itt	gt
 80045ba:	1a9b      	subgt	r3, r3, r2
 80045bc:	18ed      	addgt	r5, r5, r3
 80045be:	2600      	movs	r6, #0
 80045c0:	341a      	adds	r4, #26
 80045c2:	42b5      	cmp	r5, r6
 80045c4:	d11a      	bne.n	80045fc <_printf_common+0xc8>
 80045c6:	2000      	movs	r0, #0
 80045c8:	e008      	b.n	80045dc <_printf_common+0xa8>
 80045ca:	2301      	movs	r3, #1
 80045cc:	4652      	mov	r2, sl
 80045ce:	4649      	mov	r1, r9
 80045d0:	4638      	mov	r0, r7
 80045d2:	47c0      	blx	r8
 80045d4:	3001      	adds	r0, #1
 80045d6:	d103      	bne.n	80045e0 <_printf_common+0xac>
 80045d8:	f04f 30ff 	mov.w	r0, #4294967295
 80045dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045e0:	3501      	adds	r5, #1
 80045e2:	e7c6      	b.n	8004572 <_printf_common+0x3e>
 80045e4:	18e1      	adds	r1, r4, r3
 80045e6:	1c5a      	adds	r2, r3, #1
 80045e8:	2030      	movs	r0, #48	; 0x30
 80045ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80045ee:	4422      	add	r2, r4
 80045f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80045f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80045f8:	3302      	adds	r3, #2
 80045fa:	e7c7      	b.n	800458c <_printf_common+0x58>
 80045fc:	2301      	movs	r3, #1
 80045fe:	4622      	mov	r2, r4
 8004600:	4649      	mov	r1, r9
 8004602:	4638      	mov	r0, r7
 8004604:	47c0      	blx	r8
 8004606:	3001      	adds	r0, #1
 8004608:	d0e6      	beq.n	80045d8 <_printf_common+0xa4>
 800460a:	3601      	adds	r6, #1
 800460c:	e7d9      	b.n	80045c2 <_printf_common+0x8e>
	...

08004610 <_printf_i>:
 8004610:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004614:	7e0f      	ldrb	r7, [r1, #24]
 8004616:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004618:	2f78      	cmp	r7, #120	; 0x78
 800461a:	4691      	mov	r9, r2
 800461c:	4680      	mov	r8, r0
 800461e:	460c      	mov	r4, r1
 8004620:	469a      	mov	sl, r3
 8004622:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004626:	d807      	bhi.n	8004638 <_printf_i+0x28>
 8004628:	2f62      	cmp	r7, #98	; 0x62
 800462a:	d80a      	bhi.n	8004642 <_printf_i+0x32>
 800462c:	2f00      	cmp	r7, #0
 800462e:	f000 80d4 	beq.w	80047da <_printf_i+0x1ca>
 8004632:	2f58      	cmp	r7, #88	; 0x58
 8004634:	f000 80c0 	beq.w	80047b8 <_printf_i+0x1a8>
 8004638:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800463c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004640:	e03a      	b.n	80046b8 <_printf_i+0xa8>
 8004642:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004646:	2b15      	cmp	r3, #21
 8004648:	d8f6      	bhi.n	8004638 <_printf_i+0x28>
 800464a:	a101      	add	r1, pc, #4	; (adr r1, 8004650 <_printf_i+0x40>)
 800464c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004650:	080046a9 	.word	0x080046a9
 8004654:	080046bd 	.word	0x080046bd
 8004658:	08004639 	.word	0x08004639
 800465c:	08004639 	.word	0x08004639
 8004660:	08004639 	.word	0x08004639
 8004664:	08004639 	.word	0x08004639
 8004668:	080046bd 	.word	0x080046bd
 800466c:	08004639 	.word	0x08004639
 8004670:	08004639 	.word	0x08004639
 8004674:	08004639 	.word	0x08004639
 8004678:	08004639 	.word	0x08004639
 800467c:	080047c1 	.word	0x080047c1
 8004680:	080046e9 	.word	0x080046e9
 8004684:	0800477b 	.word	0x0800477b
 8004688:	08004639 	.word	0x08004639
 800468c:	08004639 	.word	0x08004639
 8004690:	080047e3 	.word	0x080047e3
 8004694:	08004639 	.word	0x08004639
 8004698:	080046e9 	.word	0x080046e9
 800469c:	08004639 	.word	0x08004639
 80046a0:	08004639 	.word	0x08004639
 80046a4:	08004783 	.word	0x08004783
 80046a8:	682b      	ldr	r3, [r5, #0]
 80046aa:	1d1a      	adds	r2, r3, #4
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	602a      	str	r2, [r5, #0]
 80046b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80046b8:	2301      	movs	r3, #1
 80046ba:	e09f      	b.n	80047fc <_printf_i+0x1ec>
 80046bc:	6820      	ldr	r0, [r4, #0]
 80046be:	682b      	ldr	r3, [r5, #0]
 80046c0:	0607      	lsls	r7, r0, #24
 80046c2:	f103 0104 	add.w	r1, r3, #4
 80046c6:	6029      	str	r1, [r5, #0]
 80046c8:	d501      	bpl.n	80046ce <_printf_i+0xbe>
 80046ca:	681e      	ldr	r6, [r3, #0]
 80046cc:	e003      	b.n	80046d6 <_printf_i+0xc6>
 80046ce:	0646      	lsls	r6, r0, #25
 80046d0:	d5fb      	bpl.n	80046ca <_printf_i+0xba>
 80046d2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80046d6:	2e00      	cmp	r6, #0
 80046d8:	da03      	bge.n	80046e2 <_printf_i+0xd2>
 80046da:	232d      	movs	r3, #45	; 0x2d
 80046dc:	4276      	negs	r6, r6
 80046de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046e2:	485a      	ldr	r0, [pc, #360]	; (800484c <_printf_i+0x23c>)
 80046e4:	230a      	movs	r3, #10
 80046e6:	e012      	b.n	800470e <_printf_i+0xfe>
 80046e8:	682b      	ldr	r3, [r5, #0]
 80046ea:	6820      	ldr	r0, [r4, #0]
 80046ec:	1d19      	adds	r1, r3, #4
 80046ee:	6029      	str	r1, [r5, #0]
 80046f0:	0605      	lsls	r5, r0, #24
 80046f2:	d501      	bpl.n	80046f8 <_printf_i+0xe8>
 80046f4:	681e      	ldr	r6, [r3, #0]
 80046f6:	e002      	b.n	80046fe <_printf_i+0xee>
 80046f8:	0641      	lsls	r1, r0, #25
 80046fa:	d5fb      	bpl.n	80046f4 <_printf_i+0xe4>
 80046fc:	881e      	ldrh	r6, [r3, #0]
 80046fe:	4853      	ldr	r0, [pc, #332]	; (800484c <_printf_i+0x23c>)
 8004700:	2f6f      	cmp	r7, #111	; 0x6f
 8004702:	bf0c      	ite	eq
 8004704:	2308      	moveq	r3, #8
 8004706:	230a      	movne	r3, #10
 8004708:	2100      	movs	r1, #0
 800470a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800470e:	6865      	ldr	r5, [r4, #4]
 8004710:	60a5      	str	r5, [r4, #8]
 8004712:	2d00      	cmp	r5, #0
 8004714:	bfa2      	ittt	ge
 8004716:	6821      	ldrge	r1, [r4, #0]
 8004718:	f021 0104 	bicge.w	r1, r1, #4
 800471c:	6021      	strge	r1, [r4, #0]
 800471e:	b90e      	cbnz	r6, 8004724 <_printf_i+0x114>
 8004720:	2d00      	cmp	r5, #0
 8004722:	d04b      	beq.n	80047bc <_printf_i+0x1ac>
 8004724:	4615      	mov	r5, r2
 8004726:	fbb6 f1f3 	udiv	r1, r6, r3
 800472a:	fb03 6711 	mls	r7, r3, r1, r6
 800472e:	5dc7      	ldrb	r7, [r0, r7]
 8004730:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004734:	4637      	mov	r7, r6
 8004736:	42bb      	cmp	r3, r7
 8004738:	460e      	mov	r6, r1
 800473a:	d9f4      	bls.n	8004726 <_printf_i+0x116>
 800473c:	2b08      	cmp	r3, #8
 800473e:	d10b      	bne.n	8004758 <_printf_i+0x148>
 8004740:	6823      	ldr	r3, [r4, #0]
 8004742:	07de      	lsls	r6, r3, #31
 8004744:	d508      	bpl.n	8004758 <_printf_i+0x148>
 8004746:	6923      	ldr	r3, [r4, #16]
 8004748:	6861      	ldr	r1, [r4, #4]
 800474a:	4299      	cmp	r1, r3
 800474c:	bfde      	ittt	le
 800474e:	2330      	movle	r3, #48	; 0x30
 8004750:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004754:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004758:	1b52      	subs	r2, r2, r5
 800475a:	6122      	str	r2, [r4, #16]
 800475c:	f8cd a000 	str.w	sl, [sp]
 8004760:	464b      	mov	r3, r9
 8004762:	aa03      	add	r2, sp, #12
 8004764:	4621      	mov	r1, r4
 8004766:	4640      	mov	r0, r8
 8004768:	f7ff fee4 	bl	8004534 <_printf_common>
 800476c:	3001      	adds	r0, #1
 800476e:	d14a      	bne.n	8004806 <_printf_i+0x1f6>
 8004770:	f04f 30ff 	mov.w	r0, #4294967295
 8004774:	b004      	add	sp, #16
 8004776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800477a:	6823      	ldr	r3, [r4, #0]
 800477c:	f043 0320 	orr.w	r3, r3, #32
 8004780:	6023      	str	r3, [r4, #0]
 8004782:	4833      	ldr	r0, [pc, #204]	; (8004850 <_printf_i+0x240>)
 8004784:	2778      	movs	r7, #120	; 0x78
 8004786:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800478a:	6823      	ldr	r3, [r4, #0]
 800478c:	6829      	ldr	r1, [r5, #0]
 800478e:	061f      	lsls	r7, r3, #24
 8004790:	f851 6b04 	ldr.w	r6, [r1], #4
 8004794:	d402      	bmi.n	800479c <_printf_i+0x18c>
 8004796:	065f      	lsls	r7, r3, #25
 8004798:	bf48      	it	mi
 800479a:	b2b6      	uxthmi	r6, r6
 800479c:	07df      	lsls	r7, r3, #31
 800479e:	bf48      	it	mi
 80047a0:	f043 0320 	orrmi.w	r3, r3, #32
 80047a4:	6029      	str	r1, [r5, #0]
 80047a6:	bf48      	it	mi
 80047a8:	6023      	strmi	r3, [r4, #0]
 80047aa:	b91e      	cbnz	r6, 80047b4 <_printf_i+0x1a4>
 80047ac:	6823      	ldr	r3, [r4, #0]
 80047ae:	f023 0320 	bic.w	r3, r3, #32
 80047b2:	6023      	str	r3, [r4, #0]
 80047b4:	2310      	movs	r3, #16
 80047b6:	e7a7      	b.n	8004708 <_printf_i+0xf8>
 80047b8:	4824      	ldr	r0, [pc, #144]	; (800484c <_printf_i+0x23c>)
 80047ba:	e7e4      	b.n	8004786 <_printf_i+0x176>
 80047bc:	4615      	mov	r5, r2
 80047be:	e7bd      	b.n	800473c <_printf_i+0x12c>
 80047c0:	682b      	ldr	r3, [r5, #0]
 80047c2:	6826      	ldr	r6, [r4, #0]
 80047c4:	6961      	ldr	r1, [r4, #20]
 80047c6:	1d18      	adds	r0, r3, #4
 80047c8:	6028      	str	r0, [r5, #0]
 80047ca:	0635      	lsls	r5, r6, #24
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	d501      	bpl.n	80047d4 <_printf_i+0x1c4>
 80047d0:	6019      	str	r1, [r3, #0]
 80047d2:	e002      	b.n	80047da <_printf_i+0x1ca>
 80047d4:	0670      	lsls	r0, r6, #25
 80047d6:	d5fb      	bpl.n	80047d0 <_printf_i+0x1c0>
 80047d8:	8019      	strh	r1, [r3, #0]
 80047da:	2300      	movs	r3, #0
 80047dc:	6123      	str	r3, [r4, #16]
 80047de:	4615      	mov	r5, r2
 80047e0:	e7bc      	b.n	800475c <_printf_i+0x14c>
 80047e2:	682b      	ldr	r3, [r5, #0]
 80047e4:	1d1a      	adds	r2, r3, #4
 80047e6:	602a      	str	r2, [r5, #0]
 80047e8:	681d      	ldr	r5, [r3, #0]
 80047ea:	6862      	ldr	r2, [r4, #4]
 80047ec:	2100      	movs	r1, #0
 80047ee:	4628      	mov	r0, r5
 80047f0:	f7fb fcf6 	bl	80001e0 <memchr>
 80047f4:	b108      	cbz	r0, 80047fa <_printf_i+0x1ea>
 80047f6:	1b40      	subs	r0, r0, r5
 80047f8:	6060      	str	r0, [r4, #4]
 80047fa:	6863      	ldr	r3, [r4, #4]
 80047fc:	6123      	str	r3, [r4, #16]
 80047fe:	2300      	movs	r3, #0
 8004800:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004804:	e7aa      	b.n	800475c <_printf_i+0x14c>
 8004806:	6923      	ldr	r3, [r4, #16]
 8004808:	462a      	mov	r2, r5
 800480a:	4649      	mov	r1, r9
 800480c:	4640      	mov	r0, r8
 800480e:	47d0      	blx	sl
 8004810:	3001      	adds	r0, #1
 8004812:	d0ad      	beq.n	8004770 <_printf_i+0x160>
 8004814:	6823      	ldr	r3, [r4, #0]
 8004816:	079b      	lsls	r3, r3, #30
 8004818:	d413      	bmi.n	8004842 <_printf_i+0x232>
 800481a:	68e0      	ldr	r0, [r4, #12]
 800481c:	9b03      	ldr	r3, [sp, #12]
 800481e:	4298      	cmp	r0, r3
 8004820:	bfb8      	it	lt
 8004822:	4618      	movlt	r0, r3
 8004824:	e7a6      	b.n	8004774 <_printf_i+0x164>
 8004826:	2301      	movs	r3, #1
 8004828:	4632      	mov	r2, r6
 800482a:	4649      	mov	r1, r9
 800482c:	4640      	mov	r0, r8
 800482e:	47d0      	blx	sl
 8004830:	3001      	adds	r0, #1
 8004832:	d09d      	beq.n	8004770 <_printf_i+0x160>
 8004834:	3501      	adds	r5, #1
 8004836:	68e3      	ldr	r3, [r4, #12]
 8004838:	9903      	ldr	r1, [sp, #12]
 800483a:	1a5b      	subs	r3, r3, r1
 800483c:	42ab      	cmp	r3, r5
 800483e:	dcf2      	bgt.n	8004826 <_printf_i+0x216>
 8004840:	e7eb      	b.n	800481a <_printf_i+0x20a>
 8004842:	2500      	movs	r5, #0
 8004844:	f104 0619 	add.w	r6, r4, #25
 8004848:	e7f5      	b.n	8004836 <_printf_i+0x226>
 800484a:	bf00      	nop
 800484c:	0800a689 	.word	0x0800a689
 8004850:	0800a69a 	.word	0x0800a69a

08004854 <_sbrk_r>:
 8004854:	b538      	push	{r3, r4, r5, lr}
 8004856:	4d06      	ldr	r5, [pc, #24]	; (8004870 <_sbrk_r+0x1c>)
 8004858:	2300      	movs	r3, #0
 800485a:	4604      	mov	r4, r0
 800485c:	4608      	mov	r0, r1
 800485e:	602b      	str	r3, [r5, #0]
 8004860:	f7fd ff76 	bl	8002750 <_sbrk>
 8004864:	1c43      	adds	r3, r0, #1
 8004866:	d102      	bne.n	800486e <_sbrk_r+0x1a>
 8004868:	682b      	ldr	r3, [r5, #0]
 800486a:	b103      	cbz	r3, 800486e <_sbrk_r+0x1a>
 800486c:	6023      	str	r3, [r4, #0]
 800486e:	bd38      	pop	{r3, r4, r5, pc}
 8004870:	20000614 	.word	0x20000614

08004874 <_realloc_r>:
 8004874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004878:	4680      	mov	r8, r0
 800487a:	4614      	mov	r4, r2
 800487c:	460e      	mov	r6, r1
 800487e:	b921      	cbnz	r1, 800488a <_realloc_r+0x16>
 8004880:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004884:	4611      	mov	r1, r2
 8004886:	f7ff bc71 	b.w	800416c <_malloc_r>
 800488a:	b92a      	cbnz	r2, 8004898 <_realloc_r+0x24>
 800488c:	f7ff fc02 	bl	8004094 <_free_r>
 8004890:	4625      	mov	r5, r4
 8004892:	4628      	mov	r0, r5
 8004894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004898:	f000 f81b 	bl	80048d2 <_malloc_usable_size_r>
 800489c:	4284      	cmp	r4, r0
 800489e:	4607      	mov	r7, r0
 80048a0:	d802      	bhi.n	80048a8 <_realloc_r+0x34>
 80048a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80048a6:	d812      	bhi.n	80048ce <_realloc_r+0x5a>
 80048a8:	4621      	mov	r1, r4
 80048aa:	4640      	mov	r0, r8
 80048ac:	f7ff fc5e 	bl	800416c <_malloc_r>
 80048b0:	4605      	mov	r5, r0
 80048b2:	2800      	cmp	r0, #0
 80048b4:	d0ed      	beq.n	8004892 <_realloc_r+0x1e>
 80048b6:	42bc      	cmp	r4, r7
 80048b8:	4622      	mov	r2, r4
 80048ba:	4631      	mov	r1, r6
 80048bc:	bf28      	it	cs
 80048be:	463a      	movcs	r2, r7
 80048c0:	f7ff fbda 	bl	8004078 <memcpy>
 80048c4:	4631      	mov	r1, r6
 80048c6:	4640      	mov	r0, r8
 80048c8:	f7ff fbe4 	bl	8004094 <_free_r>
 80048cc:	e7e1      	b.n	8004892 <_realloc_r+0x1e>
 80048ce:	4635      	mov	r5, r6
 80048d0:	e7df      	b.n	8004892 <_realloc_r+0x1e>

080048d2 <_malloc_usable_size_r>:
 80048d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048d6:	1f18      	subs	r0, r3, #4
 80048d8:	2b00      	cmp	r3, #0
 80048da:	bfbc      	itt	lt
 80048dc:	580b      	ldrlt	r3, [r1, r0]
 80048de:	18c0      	addlt	r0, r0, r3
 80048e0:	4770      	bx	lr
	...

080048e4 <cosf>:
 80048e4:	ee10 3a10 	vmov	r3, s0
 80048e8:	b507      	push	{r0, r1, r2, lr}
 80048ea:	4a1e      	ldr	r2, [pc, #120]	; (8004964 <cosf+0x80>)
 80048ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80048f0:	4293      	cmp	r3, r2
 80048f2:	dc06      	bgt.n	8004902 <cosf+0x1e>
 80048f4:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8004968 <cosf+0x84>
 80048f8:	b003      	add	sp, #12
 80048fa:	f85d eb04 	ldr.w	lr, [sp], #4
 80048fe:	f000 b87b 	b.w	80049f8 <__kernel_cosf>
 8004902:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8004906:	db04      	blt.n	8004912 <cosf+0x2e>
 8004908:	ee30 0a40 	vsub.f32	s0, s0, s0
 800490c:	b003      	add	sp, #12
 800490e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004912:	4668      	mov	r0, sp
 8004914:	f000 f916 	bl	8004b44 <__ieee754_rem_pio2f>
 8004918:	f000 0003 	and.w	r0, r0, #3
 800491c:	2801      	cmp	r0, #1
 800491e:	d009      	beq.n	8004934 <cosf+0x50>
 8004920:	2802      	cmp	r0, #2
 8004922:	d010      	beq.n	8004946 <cosf+0x62>
 8004924:	b9b0      	cbnz	r0, 8004954 <cosf+0x70>
 8004926:	eddd 0a01 	vldr	s1, [sp, #4]
 800492a:	ed9d 0a00 	vldr	s0, [sp]
 800492e:	f000 f863 	bl	80049f8 <__kernel_cosf>
 8004932:	e7eb      	b.n	800490c <cosf+0x28>
 8004934:	eddd 0a01 	vldr	s1, [sp, #4]
 8004938:	ed9d 0a00 	vldr	s0, [sp]
 800493c:	f000 f8ba 	bl	8004ab4 <__kernel_sinf>
 8004940:	eeb1 0a40 	vneg.f32	s0, s0
 8004944:	e7e2      	b.n	800490c <cosf+0x28>
 8004946:	eddd 0a01 	vldr	s1, [sp, #4]
 800494a:	ed9d 0a00 	vldr	s0, [sp]
 800494e:	f000 f853 	bl	80049f8 <__kernel_cosf>
 8004952:	e7f5      	b.n	8004940 <cosf+0x5c>
 8004954:	eddd 0a01 	vldr	s1, [sp, #4]
 8004958:	ed9d 0a00 	vldr	s0, [sp]
 800495c:	2001      	movs	r0, #1
 800495e:	f000 f8a9 	bl	8004ab4 <__kernel_sinf>
 8004962:	e7d3      	b.n	800490c <cosf+0x28>
 8004964:	3f490fd8 	.word	0x3f490fd8
 8004968:	00000000 	.word	0x00000000

0800496c <sinf>:
 800496c:	ee10 3a10 	vmov	r3, s0
 8004970:	b507      	push	{r0, r1, r2, lr}
 8004972:	4a1f      	ldr	r2, [pc, #124]	; (80049f0 <sinf+0x84>)
 8004974:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004978:	4293      	cmp	r3, r2
 800497a:	dc07      	bgt.n	800498c <sinf+0x20>
 800497c:	eddf 0a1d 	vldr	s1, [pc, #116]	; 80049f4 <sinf+0x88>
 8004980:	2000      	movs	r0, #0
 8004982:	b003      	add	sp, #12
 8004984:	f85d eb04 	ldr.w	lr, [sp], #4
 8004988:	f000 b894 	b.w	8004ab4 <__kernel_sinf>
 800498c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8004990:	db04      	blt.n	800499c <sinf+0x30>
 8004992:	ee30 0a40 	vsub.f32	s0, s0, s0
 8004996:	b003      	add	sp, #12
 8004998:	f85d fb04 	ldr.w	pc, [sp], #4
 800499c:	4668      	mov	r0, sp
 800499e:	f000 f8d1 	bl	8004b44 <__ieee754_rem_pio2f>
 80049a2:	f000 0003 	and.w	r0, r0, #3
 80049a6:	2801      	cmp	r0, #1
 80049a8:	d00a      	beq.n	80049c0 <sinf+0x54>
 80049aa:	2802      	cmp	r0, #2
 80049ac:	d00f      	beq.n	80049ce <sinf+0x62>
 80049ae:	b9c0      	cbnz	r0, 80049e2 <sinf+0x76>
 80049b0:	eddd 0a01 	vldr	s1, [sp, #4]
 80049b4:	ed9d 0a00 	vldr	s0, [sp]
 80049b8:	2001      	movs	r0, #1
 80049ba:	f000 f87b 	bl	8004ab4 <__kernel_sinf>
 80049be:	e7ea      	b.n	8004996 <sinf+0x2a>
 80049c0:	eddd 0a01 	vldr	s1, [sp, #4]
 80049c4:	ed9d 0a00 	vldr	s0, [sp]
 80049c8:	f000 f816 	bl	80049f8 <__kernel_cosf>
 80049cc:	e7e3      	b.n	8004996 <sinf+0x2a>
 80049ce:	eddd 0a01 	vldr	s1, [sp, #4]
 80049d2:	ed9d 0a00 	vldr	s0, [sp]
 80049d6:	2001      	movs	r0, #1
 80049d8:	f000 f86c 	bl	8004ab4 <__kernel_sinf>
 80049dc:	eeb1 0a40 	vneg.f32	s0, s0
 80049e0:	e7d9      	b.n	8004996 <sinf+0x2a>
 80049e2:	eddd 0a01 	vldr	s1, [sp, #4]
 80049e6:	ed9d 0a00 	vldr	s0, [sp]
 80049ea:	f000 f805 	bl	80049f8 <__kernel_cosf>
 80049ee:	e7f5      	b.n	80049dc <sinf+0x70>
 80049f0:	3f490fd8 	.word	0x3f490fd8
 80049f4:	00000000 	.word	0x00000000

080049f8 <__kernel_cosf>:
 80049f8:	ee10 3a10 	vmov	r3, s0
 80049fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004a00:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8004a04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a08:	da05      	bge.n	8004a16 <__kernel_cosf+0x1e>
 8004a0a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8004a0e:	ee17 2a90 	vmov	r2, s15
 8004a12:	2a00      	cmp	r2, #0
 8004a14:	d03b      	beq.n	8004a8e <__kernel_cosf+0x96>
 8004a16:	ee20 7a00 	vmul.f32	s14, s0, s0
 8004a1a:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8004a94 <__kernel_cosf+0x9c>
 8004a1e:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 8004a98 <__kernel_cosf+0xa0>
 8004a22:	4a1e      	ldr	r2, [pc, #120]	; (8004a9c <__kernel_cosf+0xa4>)
 8004a24:	eea7 6a27 	vfma.f32	s12, s14, s15
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8004aa0 <__kernel_cosf+0xa8>
 8004a2e:	eee6 7a07 	vfma.f32	s15, s12, s14
 8004a32:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 8004aa4 <__kernel_cosf+0xac>
 8004a36:	eea7 6a87 	vfma.f32	s12, s15, s14
 8004a3a:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8004aa8 <__kernel_cosf+0xb0>
 8004a3e:	eee6 7a07 	vfma.f32	s15, s12, s14
 8004a42:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 8004aac <__kernel_cosf+0xb4>
 8004a46:	eea7 6a87 	vfma.f32	s12, s15, s14
 8004a4a:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 8004a4e:	ee26 6a07 	vmul.f32	s12, s12, s14
 8004a52:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8004a56:	eee7 0a06 	vfma.f32	s1, s14, s12
 8004a5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a5e:	dc04      	bgt.n	8004a6a <__kernel_cosf+0x72>
 8004a60:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8004a64:	ee36 0ae7 	vsub.f32	s0, s13, s15
 8004a68:	4770      	bx	lr
 8004a6a:	4a11      	ldr	r2, [pc, #68]	; (8004ab0 <__kernel_cosf+0xb8>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	bfda      	itte	le
 8004a70:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8004a74:	ee07 3a10 	vmovle	s14, r3
 8004a78:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 8004a7c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004a80:	ee36 0ac7 	vsub.f32	s0, s13, s14
 8004a84:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8004a88:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004a8c:	4770      	bx	lr
 8004a8e:	eeb0 0a66 	vmov.f32	s0, s13
 8004a92:	4770      	bx	lr
 8004a94:	ad47d74e 	.word	0xad47d74e
 8004a98:	310f74f6 	.word	0x310f74f6
 8004a9c:	3e999999 	.word	0x3e999999
 8004aa0:	b493f27c 	.word	0xb493f27c
 8004aa4:	37d00d01 	.word	0x37d00d01
 8004aa8:	bab60b61 	.word	0xbab60b61
 8004aac:	3d2aaaab 	.word	0x3d2aaaab
 8004ab0:	3f480000 	.word	0x3f480000

08004ab4 <__kernel_sinf>:
 8004ab4:	ee10 3a10 	vmov	r3, s0
 8004ab8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004abc:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8004ac0:	da04      	bge.n	8004acc <__kernel_sinf+0x18>
 8004ac2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8004ac6:	ee17 3a90 	vmov	r3, s15
 8004aca:	b35b      	cbz	r3, 8004b24 <__kernel_sinf+0x70>
 8004acc:	ee20 7a00 	vmul.f32	s14, s0, s0
 8004ad0:	eddf 7a15 	vldr	s15, [pc, #84]	; 8004b28 <__kernel_sinf+0x74>
 8004ad4:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8004b2c <__kernel_sinf+0x78>
 8004ad8:	eea7 6a27 	vfma.f32	s12, s14, s15
 8004adc:	eddf 7a14 	vldr	s15, [pc, #80]	; 8004b30 <__kernel_sinf+0x7c>
 8004ae0:	eee6 7a07 	vfma.f32	s15, s12, s14
 8004ae4:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8004b34 <__kernel_sinf+0x80>
 8004ae8:	eea7 6a87 	vfma.f32	s12, s15, s14
 8004aec:	eddf 7a12 	vldr	s15, [pc, #72]	; 8004b38 <__kernel_sinf+0x84>
 8004af0:	ee60 6a07 	vmul.f32	s13, s0, s14
 8004af4:	eee6 7a07 	vfma.f32	s15, s12, s14
 8004af8:	b930      	cbnz	r0, 8004b08 <__kernel_sinf+0x54>
 8004afa:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8004b3c <__kernel_sinf+0x88>
 8004afe:	eea7 6a27 	vfma.f32	s12, s14, s15
 8004b02:	eea6 0a26 	vfma.f32	s0, s12, s13
 8004b06:	4770      	bx	lr
 8004b08:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8004b0c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8004b10:	eee0 7a86 	vfma.f32	s15, s1, s12
 8004b14:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8004b18:	eddf 7a09 	vldr	s15, [pc, #36]	; 8004b40 <__kernel_sinf+0x8c>
 8004b1c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8004b20:	ee30 0a60 	vsub.f32	s0, s0, s1
 8004b24:	4770      	bx	lr
 8004b26:	bf00      	nop
 8004b28:	2f2ec9d3 	.word	0x2f2ec9d3
 8004b2c:	b2d72f34 	.word	0xb2d72f34
 8004b30:	3638ef1b 	.word	0x3638ef1b
 8004b34:	b9500d01 	.word	0xb9500d01
 8004b38:	3c088889 	.word	0x3c088889
 8004b3c:	be2aaaab 	.word	0xbe2aaaab
 8004b40:	3e2aaaab 	.word	0x3e2aaaab

08004b44 <__ieee754_rem_pio2f>:
 8004b44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b46:	ee10 6a10 	vmov	r6, s0
 8004b4a:	4b86      	ldr	r3, [pc, #536]	; (8004d64 <__ieee754_rem_pio2f+0x220>)
 8004b4c:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8004b50:	429d      	cmp	r5, r3
 8004b52:	b087      	sub	sp, #28
 8004b54:	4604      	mov	r4, r0
 8004b56:	dc05      	bgt.n	8004b64 <__ieee754_rem_pio2f+0x20>
 8004b58:	2300      	movs	r3, #0
 8004b5a:	ed80 0a00 	vstr	s0, [r0]
 8004b5e:	6043      	str	r3, [r0, #4]
 8004b60:	2000      	movs	r0, #0
 8004b62:	e020      	b.n	8004ba6 <__ieee754_rem_pio2f+0x62>
 8004b64:	4b80      	ldr	r3, [pc, #512]	; (8004d68 <__ieee754_rem_pio2f+0x224>)
 8004b66:	429d      	cmp	r5, r3
 8004b68:	dc38      	bgt.n	8004bdc <__ieee754_rem_pio2f+0x98>
 8004b6a:	2e00      	cmp	r6, #0
 8004b6c:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8004d6c <__ieee754_rem_pio2f+0x228>
 8004b70:	4b7f      	ldr	r3, [pc, #508]	; (8004d70 <__ieee754_rem_pio2f+0x22c>)
 8004b72:	f025 050f 	bic.w	r5, r5, #15
 8004b76:	dd18      	ble.n	8004baa <__ieee754_rem_pio2f+0x66>
 8004b78:	429d      	cmp	r5, r3
 8004b7a:	ee70 7a47 	vsub.f32	s15, s0, s14
 8004b7e:	bf09      	itett	eq
 8004b80:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8004d74 <__ieee754_rem_pio2f+0x230>
 8004b84:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8004d78 <__ieee754_rem_pio2f+0x234>
 8004b88:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8004b8c:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8004d7c <__ieee754_rem_pio2f+0x238>
 8004b90:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8004b94:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004b98:	edc0 6a00 	vstr	s13, [r0]
 8004b9c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004ba0:	edc0 7a01 	vstr	s15, [r0, #4]
 8004ba4:	2001      	movs	r0, #1
 8004ba6:	b007      	add	sp, #28
 8004ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004baa:	429d      	cmp	r5, r3
 8004bac:	ee70 7a07 	vadd.f32	s15, s0, s14
 8004bb0:	bf09      	itett	eq
 8004bb2:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8004d74 <__ieee754_rem_pio2f+0x230>
 8004bb6:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8004d78 <__ieee754_rem_pio2f+0x234>
 8004bba:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8004bbe:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8004d7c <__ieee754_rem_pio2f+0x238>
 8004bc2:	ee77 6a87 	vadd.f32	s13, s15, s14
 8004bc6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004bca:	edc0 6a00 	vstr	s13, [r0]
 8004bce:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004bd2:	edc0 7a01 	vstr	s15, [r0, #4]
 8004bd6:	f04f 30ff 	mov.w	r0, #4294967295
 8004bda:	e7e4      	b.n	8004ba6 <__ieee754_rem_pio2f+0x62>
 8004bdc:	4b68      	ldr	r3, [pc, #416]	; (8004d80 <__ieee754_rem_pio2f+0x23c>)
 8004bde:	429d      	cmp	r5, r3
 8004be0:	dc71      	bgt.n	8004cc6 <__ieee754_rem_pio2f+0x182>
 8004be2:	f000 f8db 	bl	8004d9c <fabsf>
 8004be6:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8004d84 <__ieee754_rem_pio2f+0x240>
 8004bea:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8004bee:	eee0 7a07 	vfma.f32	s15, s0, s14
 8004bf2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004bf6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004bfa:	ee17 0a90 	vmov	r0, s15
 8004bfe:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8004d6c <__ieee754_rem_pio2f+0x228>
 8004c02:	eea7 0a67 	vfms.f32	s0, s14, s15
 8004c06:	281f      	cmp	r0, #31
 8004c08:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8004d78 <__ieee754_rem_pio2f+0x234>
 8004c0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c10:	eeb1 6a47 	vneg.f32	s12, s14
 8004c14:	ee70 6a67 	vsub.f32	s13, s0, s15
 8004c18:	ee16 2a90 	vmov	r2, s13
 8004c1c:	dc1c      	bgt.n	8004c58 <__ieee754_rem_pio2f+0x114>
 8004c1e:	495a      	ldr	r1, [pc, #360]	; (8004d88 <__ieee754_rem_pio2f+0x244>)
 8004c20:	1e47      	subs	r7, r0, #1
 8004c22:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8004c26:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8004c2a:	428b      	cmp	r3, r1
 8004c2c:	d014      	beq.n	8004c58 <__ieee754_rem_pio2f+0x114>
 8004c2e:	6022      	str	r2, [r4, #0]
 8004c30:	ed94 7a00 	vldr	s14, [r4]
 8004c34:	ee30 0a47 	vsub.f32	s0, s0, s14
 8004c38:	2e00      	cmp	r6, #0
 8004c3a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004c3e:	ed84 0a01 	vstr	s0, [r4, #4]
 8004c42:	dab0      	bge.n	8004ba6 <__ieee754_rem_pio2f+0x62>
 8004c44:	eeb1 7a47 	vneg.f32	s14, s14
 8004c48:	eeb1 0a40 	vneg.f32	s0, s0
 8004c4c:	ed84 7a00 	vstr	s14, [r4]
 8004c50:	ed84 0a01 	vstr	s0, [r4, #4]
 8004c54:	4240      	negs	r0, r0
 8004c56:	e7a6      	b.n	8004ba6 <__ieee754_rem_pio2f+0x62>
 8004c58:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8004c5c:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 8004c60:	2908      	cmp	r1, #8
 8004c62:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8004c66:	dde2      	ble.n	8004c2e <__ieee754_rem_pio2f+0xea>
 8004c68:	eddf 5a42 	vldr	s11, [pc, #264]	; 8004d74 <__ieee754_rem_pio2f+0x230>
 8004c6c:	eef0 6a40 	vmov.f32	s13, s0
 8004c70:	eee6 6a25 	vfma.f32	s13, s12, s11
 8004c74:	ee70 7a66 	vsub.f32	s15, s0, s13
 8004c78:	eee6 7a25 	vfma.f32	s15, s12, s11
 8004c7c:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004d7c <__ieee754_rem_pio2f+0x238>
 8004c80:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8004c84:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8004c88:	ee15 2a90 	vmov	r2, s11
 8004c8c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8004c90:	1a5b      	subs	r3, r3, r1
 8004c92:	2b19      	cmp	r3, #25
 8004c94:	dc04      	bgt.n	8004ca0 <__ieee754_rem_pio2f+0x15c>
 8004c96:	edc4 5a00 	vstr	s11, [r4]
 8004c9a:	eeb0 0a66 	vmov.f32	s0, s13
 8004c9e:	e7c7      	b.n	8004c30 <__ieee754_rem_pio2f+0xec>
 8004ca0:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8004d8c <__ieee754_rem_pio2f+0x248>
 8004ca4:	eeb0 0a66 	vmov.f32	s0, s13
 8004ca8:	eea6 0a25 	vfma.f32	s0, s12, s11
 8004cac:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8004cb0:	eddf 6a37 	vldr	s13, [pc, #220]	; 8004d90 <__ieee754_rem_pio2f+0x24c>
 8004cb4:	eee6 7a25 	vfma.f32	s15, s12, s11
 8004cb8:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8004cbc:	ee30 7a67 	vsub.f32	s14, s0, s15
 8004cc0:	ed84 7a00 	vstr	s14, [r4]
 8004cc4:	e7b4      	b.n	8004c30 <__ieee754_rem_pio2f+0xec>
 8004cc6:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8004cca:	db06      	blt.n	8004cda <__ieee754_rem_pio2f+0x196>
 8004ccc:	ee70 7a40 	vsub.f32	s15, s0, s0
 8004cd0:	edc0 7a01 	vstr	s15, [r0, #4]
 8004cd4:	edc0 7a00 	vstr	s15, [r0]
 8004cd8:	e742      	b.n	8004b60 <__ieee754_rem_pio2f+0x1c>
 8004cda:	15ea      	asrs	r2, r5, #23
 8004cdc:	3a86      	subs	r2, #134	; 0x86
 8004cde:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8004ce2:	ee07 3a90 	vmov	s15, r3
 8004ce6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8004cea:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8004d94 <__ieee754_rem_pio2f+0x250>
 8004cee:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004cf2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004cf6:	ed8d 7a03 	vstr	s14, [sp, #12]
 8004cfa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004cfe:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8004d02:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004d06:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004d0a:	ed8d 7a04 	vstr	s14, [sp, #16]
 8004d0e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004d12:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d1a:	edcd 7a05 	vstr	s15, [sp, #20]
 8004d1e:	d11e      	bne.n	8004d5e <__ieee754_rem_pio2f+0x21a>
 8004d20:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8004d24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d28:	bf14      	ite	ne
 8004d2a:	2302      	movne	r3, #2
 8004d2c:	2301      	moveq	r3, #1
 8004d2e:	491a      	ldr	r1, [pc, #104]	; (8004d98 <__ieee754_rem_pio2f+0x254>)
 8004d30:	9101      	str	r1, [sp, #4]
 8004d32:	2102      	movs	r1, #2
 8004d34:	9100      	str	r1, [sp, #0]
 8004d36:	a803      	add	r0, sp, #12
 8004d38:	4621      	mov	r1, r4
 8004d3a:	f000 f837 	bl	8004dac <__kernel_rem_pio2f>
 8004d3e:	2e00      	cmp	r6, #0
 8004d40:	f6bf af31 	bge.w	8004ba6 <__ieee754_rem_pio2f+0x62>
 8004d44:	edd4 7a00 	vldr	s15, [r4]
 8004d48:	eef1 7a67 	vneg.f32	s15, s15
 8004d4c:	edc4 7a00 	vstr	s15, [r4]
 8004d50:	edd4 7a01 	vldr	s15, [r4, #4]
 8004d54:	eef1 7a67 	vneg.f32	s15, s15
 8004d58:	edc4 7a01 	vstr	s15, [r4, #4]
 8004d5c:	e77a      	b.n	8004c54 <__ieee754_rem_pio2f+0x110>
 8004d5e:	2303      	movs	r3, #3
 8004d60:	e7e5      	b.n	8004d2e <__ieee754_rem_pio2f+0x1ea>
 8004d62:	bf00      	nop
 8004d64:	3f490fd8 	.word	0x3f490fd8
 8004d68:	4016cbe3 	.word	0x4016cbe3
 8004d6c:	3fc90f80 	.word	0x3fc90f80
 8004d70:	3fc90fd0 	.word	0x3fc90fd0
 8004d74:	37354400 	.word	0x37354400
 8004d78:	37354443 	.word	0x37354443
 8004d7c:	2e85a308 	.word	0x2e85a308
 8004d80:	43490f80 	.word	0x43490f80
 8004d84:	3f22f984 	.word	0x3f22f984
 8004d88:	0800a6ac 	.word	0x0800a6ac
 8004d8c:	2e85a300 	.word	0x2e85a300
 8004d90:	248d3132 	.word	0x248d3132
 8004d94:	43800000 	.word	0x43800000
 8004d98:	0800a72c 	.word	0x0800a72c

08004d9c <fabsf>:
 8004d9c:	ee10 3a10 	vmov	r3, s0
 8004da0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004da4:	ee00 3a10 	vmov	s0, r3
 8004da8:	4770      	bx	lr
	...

08004dac <__kernel_rem_pio2f>:
 8004dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004db0:	ed2d 8b04 	vpush	{d8-d9}
 8004db4:	b0d9      	sub	sp, #356	; 0x164
 8004db6:	4688      	mov	r8, r1
 8004db8:	9002      	str	r0, [sp, #8]
 8004dba:	49b8      	ldr	r1, [pc, #736]	; (800509c <__kernel_rem_pio2f+0x2f0>)
 8004dbc:	9866      	ldr	r0, [sp, #408]	; 0x198
 8004dbe:	9301      	str	r3, [sp, #4]
 8004dc0:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8004dc4:	9901      	ldr	r1, [sp, #4]
 8004dc6:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 8004dc8:	f101 3bff 	add.w	fp, r1, #4294967295
 8004dcc:	1d11      	adds	r1, r2, #4
 8004dce:	db25      	blt.n	8004e1c <__kernel_rem_pio2f+0x70>
 8004dd0:	1ed0      	subs	r0, r2, #3
 8004dd2:	bf48      	it	mi
 8004dd4:	1d10      	addmi	r0, r2, #4
 8004dd6:	10c0      	asrs	r0, r0, #3
 8004dd8:	1c45      	adds	r5, r0, #1
 8004dda:	00e9      	lsls	r1, r5, #3
 8004ddc:	eba0 070b 	sub.w	r7, r0, fp
 8004de0:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 80050ac <__kernel_rem_pio2f+0x300>
 8004de4:	9103      	str	r1, [sp, #12]
 8004de6:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8004dea:	eb0a 0c0b 	add.w	ip, sl, fp
 8004dee:	ae1c      	add	r6, sp, #112	; 0x70
 8004df0:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 8004df4:	2400      	movs	r4, #0
 8004df6:	4564      	cmp	r4, ip
 8004df8:	dd12      	ble.n	8004e20 <__kernel_rem_pio2f+0x74>
 8004dfa:	9901      	ldr	r1, [sp, #4]
 8004dfc:	ac1c      	add	r4, sp, #112	; 0x70
 8004dfe:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8004e02:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 8004e06:	f04f 0c00 	mov.w	ip, #0
 8004e0a:	45d4      	cmp	ip, sl
 8004e0c:	dc27      	bgt.n	8004e5e <__kernel_rem_pio2f+0xb2>
 8004e0e:	f8dd e008 	ldr.w	lr, [sp, #8]
 8004e12:	eddf 7aa6 	vldr	s15, [pc, #664]	; 80050ac <__kernel_rem_pio2f+0x300>
 8004e16:	4627      	mov	r7, r4
 8004e18:	2600      	movs	r6, #0
 8004e1a:	e016      	b.n	8004e4a <__kernel_rem_pio2f+0x9e>
 8004e1c:	2000      	movs	r0, #0
 8004e1e:	e7db      	b.n	8004dd8 <__kernel_rem_pio2f+0x2c>
 8004e20:	42e7      	cmn	r7, r4
 8004e22:	bf5d      	ittte	pl
 8004e24:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 8004e28:	ee07 1a90 	vmovpl	s15, r1
 8004e2c:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8004e30:	eef0 7a47 	vmovmi.f32	s15, s14
 8004e34:	ece6 7a01 	vstmia	r6!, {s15}
 8004e38:	3401      	adds	r4, #1
 8004e3a:	e7dc      	b.n	8004df6 <__kernel_rem_pio2f+0x4a>
 8004e3c:	ecfe 6a01 	vldmia	lr!, {s13}
 8004e40:	ed97 7a00 	vldr	s14, [r7]
 8004e44:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004e48:	3601      	adds	r6, #1
 8004e4a:	455e      	cmp	r6, fp
 8004e4c:	f1a7 0704 	sub.w	r7, r7, #4
 8004e50:	ddf4      	ble.n	8004e3c <__kernel_rem_pio2f+0x90>
 8004e52:	ece9 7a01 	vstmia	r9!, {s15}
 8004e56:	f10c 0c01 	add.w	ip, ip, #1
 8004e5a:	3404      	adds	r4, #4
 8004e5c:	e7d5      	b.n	8004e0a <__kernel_rem_pio2f+0x5e>
 8004e5e:	a908      	add	r1, sp, #32
 8004e60:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004e64:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8004e68:	eddf 8a8f 	vldr	s17, [pc, #572]	; 80050a8 <__kernel_rem_pio2f+0x2fc>
 8004e6c:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 80050a4 <__kernel_rem_pio2f+0x2f8>
 8004e70:	9105      	str	r1, [sp, #20]
 8004e72:	9304      	str	r3, [sp, #16]
 8004e74:	4656      	mov	r6, sl
 8004e76:	00b3      	lsls	r3, r6, #2
 8004e78:	9306      	str	r3, [sp, #24]
 8004e7a:	ab58      	add	r3, sp, #352	; 0x160
 8004e7c:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8004e80:	ac08      	add	r4, sp, #32
 8004e82:	ab44      	add	r3, sp, #272	; 0x110
 8004e84:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8004e88:	46a4      	mov	ip, r4
 8004e8a:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8004e8e:	4637      	mov	r7, r6
 8004e90:	2f00      	cmp	r7, #0
 8004e92:	f1a0 0004 	sub.w	r0, r0, #4
 8004e96:	dc4a      	bgt.n	8004f2e <__kernel_rem_pio2f+0x182>
 8004e98:	4628      	mov	r0, r5
 8004e9a:	9207      	str	r2, [sp, #28]
 8004e9c:	f000 f9f8 	bl	8005290 <scalbnf>
 8004ea0:	eeb0 8a40 	vmov.f32	s16, s0
 8004ea4:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8004ea8:	ee28 0a00 	vmul.f32	s0, s16, s0
 8004eac:	f000 fa56 	bl	800535c <floorf>
 8004eb0:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8004eb4:	eea0 8a67 	vfms.f32	s16, s0, s15
 8004eb8:	2d00      	cmp	r5, #0
 8004eba:	9a07      	ldr	r2, [sp, #28]
 8004ebc:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8004ec0:	ee17 9a90 	vmov	r9, s15
 8004ec4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ec8:	ee38 8a67 	vsub.f32	s16, s16, s15
 8004ecc:	dd41      	ble.n	8004f52 <__kernel_rem_pio2f+0x1a6>
 8004ece:	f106 3cff 	add.w	ip, r6, #4294967295
 8004ed2:	ab08      	add	r3, sp, #32
 8004ed4:	f1c5 0e08 	rsb	lr, r5, #8
 8004ed8:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8004edc:	fa47 f00e 	asr.w	r0, r7, lr
 8004ee0:	4481      	add	r9, r0
 8004ee2:	fa00 f00e 	lsl.w	r0, r0, lr
 8004ee6:	1a3f      	subs	r7, r7, r0
 8004ee8:	f1c5 0007 	rsb	r0, r5, #7
 8004eec:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8004ef0:	4107      	asrs	r7, r0
 8004ef2:	2f00      	cmp	r7, #0
 8004ef4:	dd3c      	ble.n	8004f70 <__kernel_rem_pio2f+0x1c4>
 8004ef6:	f04f 0e00 	mov.w	lr, #0
 8004efa:	f109 0901 	add.w	r9, r9, #1
 8004efe:	4671      	mov	r1, lr
 8004f00:	4576      	cmp	r6, lr
 8004f02:	dc67      	bgt.n	8004fd4 <__kernel_rem_pio2f+0x228>
 8004f04:	2d00      	cmp	r5, #0
 8004f06:	dd03      	ble.n	8004f10 <__kernel_rem_pio2f+0x164>
 8004f08:	2d01      	cmp	r5, #1
 8004f0a:	d074      	beq.n	8004ff6 <__kernel_rem_pio2f+0x24a>
 8004f0c:	2d02      	cmp	r5, #2
 8004f0e:	d07b      	beq.n	8005008 <__kernel_rem_pio2f+0x25c>
 8004f10:	2f02      	cmp	r7, #2
 8004f12:	d12d      	bne.n	8004f70 <__kernel_rem_pio2f+0x1c4>
 8004f14:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004f18:	ee30 8a48 	vsub.f32	s16, s0, s16
 8004f1c:	b341      	cbz	r1, 8004f70 <__kernel_rem_pio2f+0x1c4>
 8004f1e:	4628      	mov	r0, r5
 8004f20:	9207      	str	r2, [sp, #28]
 8004f22:	f000 f9b5 	bl	8005290 <scalbnf>
 8004f26:	9a07      	ldr	r2, [sp, #28]
 8004f28:	ee38 8a40 	vsub.f32	s16, s16, s0
 8004f2c:	e020      	b.n	8004f70 <__kernel_rem_pio2f+0x1c4>
 8004f2e:	ee60 7a28 	vmul.f32	s15, s0, s17
 8004f32:	3f01      	subs	r7, #1
 8004f34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f3c:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8004f40:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004f44:	ecac 0a01 	vstmia	ip!, {s0}
 8004f48:	ed90 0a00 	vldr	s0, [r0]
 8004f4c:	ee37 0a80 	vadd.f32	s0, s15, s0
 8004f50:	e79e      	b.n	8004e90 <__kernel_rem_pio2f+0xe4>
 8004f52:	d105      	bne.n	8004f60 <__kernel_rem_pio2f+0x1b4>
 8004f54:	1e70      	subs	r0, r6, #1
 8004f56:	ab08      	add	r3, sp, #32
 8004f58:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8004f5c:	11ff      	asrs	r7, r7, #7
 8004f5e:	e7c8      	b.n	8004ef2 <__kernel_rem_pio2f+0x146>
 8004f60:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8004f64:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8004f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f6c:	da30      	bge.n	8004fd0 <__kernel_rem_pio2f+0x224>
 8004f6e:	2700      	movs	r7, #0
 8004f70:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8004f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f78:	f040 809a 	bne.w	80050b0 <__kernel_rem_pio2f+0x304>
 8004f7c:	1e74      	subs	r4, r6, #1
 8004f7e:	46a4      	mov	ip, r4
 8004f80:	2100      	movs	r1, #0
 8004f82:	45d4      	cmp	ip, sl
 8004f84:	da47      	bge.n	8005016 <__kernel_rem_pio2f+0x26a>
 8004f86:	2900      	cmp	r1, #0
 8004f88:	d063      	beq.n	8005052 <__kernel_rem_pio2f+0x2a6>
 8004f8a:	ab08      	add	r3, sp, #32
 8004f8c:	3d08      	subs	r5, #8
 8004f8e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d07f      	beq.n	8005096 <__kernel_rem_pio2f+0x2ea>
 8004f96:	4628      	mov	r0, r5
 8004f98:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004f9c:	f000 f978 	bl	8005290 <scalbnf>
 8004fa0:	1c63      	adds	r3, r4, #1
 8004fa2:	aa44      	add	r2, sp, #272	; 0x110
 8004fa4:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80050a8 <__kernel_rem_pio2f+0x2fc>
 8004fa8:	0099      	lsls	r1, r3, #2
 8004faa:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8004fae:	4623      	mov	r3, r4
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	f280 80ad 	bge.w	8005110 <__kernel_rem_pio2f+0x364>
 8004fb6:	4623      	mov	r3, r4
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	f2c0 80cb 	blt.w	8005154 <__kernel_rem_pio2f+0x3a8>
 8004fbe:	aa44      	add	r2, sp, #272	; 0x110
 8004fc0:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8004fc4:	4e36      	ldr	r6, [pc, #216]	; (80050a0 <__kernel_rem_pio2f+0x2f4>)
 8004fc6:	eddf 7a39 	vldr	s15, [pc, #228]	; 80050ac <__kernel_rem_pio2f+0x300>
 8004fca:	2000      	movs	r0, #0
 8004fcc:	1ae2      	subs	r2, r4, r3
 8004fce:	e0b6      	b.n	800513e <__kernel_rem_pio2f+0x392>
 8004fd0:	2702      	movs	r7, #2
 8004fd2:	e790      	b.n	8004ef6 <__kernel_rem_pio2f+0x14a>
 8004fd4:	6820      	ldr	r0, [r4, #0]
 8004fd6:	b949      	cbnz	r1, 8004fec <__kernel_rem_pio2f+0x240>
 8004fd8:	b118      	cbz	r0, 8004fe2 <__kernel_rem_pio2f+0x236>
 8004fda:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8004fde:	6020      	str	r0, [r4, #0]
 8004fe0:	2001      	movs	r0, #1
 8004fe2:	f10e 0e01 	add.w	lr, lr, #1
 8004fe6:	3404      	adds	r4, #4
 8004fe8:	4601      	mov	r1, r0
 8004fea:	e789      	b.n	8004f00 <__kernel_rem_pio2f+0x154>
 8004fec:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8004ff0:	6020      	str	r0, [r4, #0]
 8004ff2:	4608      	mov	r0, r1
 8004ff4:	e7f5      	b.n	8004fe2 <__kernel_rem_pio2f+0x236>
 8004ff6:	1e74      	subs	r4, r6, #1
 8004ff8:	ab08      	add	r3, sp, #32
 8004ffa:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004ffe:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8005002:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005006:	e783      	b.n	8004f10 <__kernel_rem_pio2f+0x164>
 8005008:	1e74      	subs	r4, r6, #1
 800500a:	ab08      	add	r3, sp, #32
 800500c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8005010:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8005014:	e7f5      	b.n	8005002 <__kernel_rem_pio2f+0x256>
 8005016:	ab08      	add	r3, sp, #32
 8005018:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 800501c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005020:	4301      	orrs	r1, r0
 8005022:	e7ae      	b.n	8004f82 <__kernel_rem_pio2f+0x1d6>
 8005024:	3001      	adds	r0, #1
 8005026:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 800502a:	2f00      	cmp	r7, #0
 800502c:	d0fa      	beq.n	8005024 <__kernel_rem_pio2f+0x278>
 800502e:	9b06      	ldr	r3, [sp, #24]
 8005030:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8005034:	eb0d 0403 	add.w	r4, sp, r3
 8005038:	9b01      	ldr	r3, [sp, #4]
 800503a:	18f7      	adds	r7, r6, r3
 800503c:	ab1c      	add	r3, sp, #112	; 0x70
 800503e:	f106 0c01 	add.w	ip, r6, #1
 8005042:	3c4c      	subs	r4, #76	; 0x4c
 8005044:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005048:	4430      	add	r0, r6
 800504a:	4560      	cmp	r0, ip
 800504c:	da04      	bge.n	8005058 <__kernel_rem_pio2f+0x2ac>
 800504e:	4606      	mov	r6, r0
 8005050:	e711      	b.n	8004e76 <__kernel_rem_pio2f+0xca>
 8005052:	9c05      	ldr	r4, [sp, #20]
 8005054:	2001      	movs	r0, #1
 8005056:	e7e6      	b.n	8005026 <__kernel_rem_pio2f+0x27a>
 8005058:	9b04      	ldr	r3, [sp, #16]
 800505a:	f8dd e008 	ldr.w	lr, [sp, #8]
 800505e:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8005062:	9306      	str	r3, [sp, #24]
 8005064:	ee07 3a90 	vmov	s15, r3
 8005068:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800506c:	2600      	movs	r6, #0
 800506e:	ece7 7a01 	vstmia	r7!, {s15}
 8005072:	eddf 7a0e 	vldr	s15, [pc, #56]	; 80050ac <__kernel_rem_pio2f+0x300>
 8005076:	46b9      	mov	r9, r7
 8005078:	455e      	cmp	r6, fp
 800507a:	dd04      	ble.n	8005086 <__kernel_rem_pio2f+0x2da>
 800507c:	ece4 7a01 	vstmia	r4!, {s15}
 8005080:	f10c 0c01 	add.w	ip, ip, #1
 8005084:	e7e1      	b.n	800504a <__kernel_rem_pio2f+0x29e>
 8005086:	ecfe 6a01 	vldmia	lr!, {s13}
 800508a:	ed39 7a01 	vldmdb	r9!, {s14}
 800508e:	3601      	adds	r6, #1
 8005090:	eee6 7a87 	vfma.f32	s15, s13, s14
 8005094:	e7f0      	b.n	8005078 <__kernel_rem_pio2f+0x2cc>
 8005096:	3c01      	subs	r4, #1
 8005098:	e777      	b.n	8004f8a <__kernel_rem_pio2f+0x1de>
 800509a:	bf00      	nop
 800509c:	0800aa70 	.word	0x0800aa70
 80050a0:	0800aa44 	.word	0x0800aa44
 80050a4:	43800000 	.word	0x43800000
 80050a8:	3b800000 	.word	0x3b800000
 80050ac:	00000000 	.word	0x00000000
 80050b0:	9b03      	ldr	r3, [sp, #12]
 80050b2:	eeb0 0a48 	vmov.f32	s0, s16
 80050b6:	1a98      	subs	r0, r3, r2
 80050b8:	f000 f8ea 	bl	8005290 <scalbnf>
 80050bc:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 80050a4 <__kernel_rem_pio2f+0x2f8>
 80050c0:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80050c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050c8:	db19      	blt.n	80050fe <__kernel_rem_pio2f+0x352>
 80050ca:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 80050a8 <__kernel_rem_pio2f+0x2fc>
 80050ce:	ee60 7a27 	vmul.f32	s15, s0, s15
 80050d2:	aa08      	add	r2, sp, #32
 80050d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80050d8:	1c74      	adds	r4, r6, #1
 80050da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050de:	3508      	adds	r5, #8
 80050e0:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80050e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80050e8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80050ec:	ee10 3a10 	vmov	r3, s0
 80050f0:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80050f4:	ee17 3a90 	vmov	r3, s15
 80050f8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80050fc:	e74b      	b.n	8004f96 <__kernel_rem_pio2f+0x1ea>
 80050fe:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005102:	aa08      	add	r2, sp, #32
 8005104:	ee10 3a10 	vmov	r3, s0
 8005108:	4634      	mov	r4, r6
 800510a:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800510e:	e742      	b.n	8004f96 <__kernel_rem_pio2f+0x1ea>
 8005110:	a808      	add	r0, sp, #32
 8005112:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8005116:	9001      	str	r0, [sp, #4]
 8005118:	ee07 0a90 	vmov	s15, r0
 800511c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005120:	3b01      	subs	r3, #1
 8005122:	ee67 7a80 	vmul.f32	s15, s15, s0
 8005126:	ee20 0a07 	vmul.f32	s0, s0, s14
 800512a:	ed62 7a01 	vstmdb	r2!, {s15}
 800512e:	e73f      	b.n	8004fb0 <__kernel_rem_pio2f+0x204>
 8005130:	ecf6 6a01 	vldmia	r6!, {s13}
 8005134:	ecb5 7a01 	vldmia	r5!, {s14}
 8005138:	eee6 7a87 	vfma.f32	s15, s13, s14
 800513c:	3001      	adds	r0, #1
 800513e:	4550      	cmp	r0, sl
 8005140:	dc01      	bgt.n	8005146 <__kernel_rem_pio2f+0x39a>
 8005142:	4290      	cmp	r0, r2
 8005144:	ddf4      	ble.n	8005130 <__kernel_rem_pio2f+0x384>
 8005146:	a858      	add	r0, sp, #352	; 0x160
 8005148:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800514c:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 8005150:	3b01      	subs	r3, #1
 8005152:	e731      	b.n	8004fb8 <__kernel_rem_pio2f+0x20c>
 8005154:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8005156:	2b02      	cmp	r3, #2
 8005158:	dc09      	bgt.n	800516e <__kernel_rem_pio2f+0x3c2>
 800515a:	2b00      	cmp	r3, #0
 800515c:	dc2b      	bgt.n	80051b6 <__kernel_rem_pio2f+0x40a>
 800515e:	d044      	beq.n	80051ea <__kernel_rem_pio2f+0x43e>
 8005160:	f009 0007 	and.w	r0, r9, #7
 8005164:	b059      	add	sp, #356	; 0x164
 8005166:	ecbd 8b04 	vpop	{d8-d9}
 800516a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800516e:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8005170:	2b03      	cmp	r3, #3
 8005172:	d1f5      	bne.n	8005160 <__kernel_rem_pio2f+0x3b4>
 8005174:	aa30      	add	r2, sp, #192	; 0xc0
 8005176:	1f0b      	subs	r3, r1, #4
 8005178:	4413      	add	r3, r2
 800517a:	461a      	mov	r2, r3
 800517c:	4620      	mov	r0, r4
 800517e:	2800      	cmp	r0, #0
 8005180:	f1a2 0204 	sub.w	r2, r2, #4
 8005184:	dc52      	bgt.n	800522c <__kernel_rem_pio2f+0x480>
 8005186:	4622      	mov	r2, r4
 8005188:	2a01      	cmp	r2, #1
 800518a:	f1a3 0304 	sub.w	r3, r3, #4
 800518e:	dc5d      	bgt.n	800524c <__kernel_rem_pio2f+0x4a0>
 8005190:	ab30      	add	r3, sp, #192	; 0xc0
 8005192:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 80050ac <__kernel_rem_pio2f+0x300>
 8005196:	440b      	add	r3, r1
 8005198:	2c01      	cmp	r4, #1
 800519a:	dc67      	bgt.n	800526c <__kernel_rem_pio2f+0x4c0>
 800519c:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 80051a0:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 80051a4:	2f00      	cmp	r7, #0
 80051a6:	d167      	bne.n	8005278 <__kernel_rem_pio2f+0x4cc>
 80051a8:	edc8 6a00 	vstr	s13, [r8]
 80051ac:	ed88 7a01 	vstr	s14, [r8, #4]
 80051b0:	edc8 7a02 	vstr	s15, [r8, #8]
 80051b4:	e7d4      	b.n	8005160 <__kernel_rem_pio2f+0x3b4>
 80051b6:	ab30      	add	r3, sp, #192	; 0xc0
 80051b8:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 80050ac <__kernel_rem_pio2f+0x300>
 80051bc:	440b      	add	r3, r1
 80051be:	4622      	mov	r2, r4
 80051c0:	2a00      	cmp	r2, #0
 80051c2:	da24      	bge.n	800520e <__kernel_rem_pio2f+0x462>
 80051c4:	b34f      	cbz	r7, 800521a <__kernel_rem_pio2f+0x46e>
 80051c6:	eef1 7a47 	vneg.f32	s15, s14
 80051ca:	edc8 7a00 	vstr	s15, [r8]
 80051ce:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 80051d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80051d6:	aa31      	add	r2, sp, #196	; 0xc4
 80051d8:	2301      	movs	r3, #1
 80051da:	429c      	cmp	r4, r3
 80051dc:	da20      	bge.n	8005220 <__kernel_rem_pio2f+0x474>
 80051de:	b10f      	cbz	r7, 80051e4 <__kernel_rem_pio2f+0x438>
 80051e0:	eef1 7a67 	vneg.f32	s15, s15
 80051e4:	edc8 7a01 	vstr	s15, [r8, #4]
 80051e8:	e7ba      	b.n	8005160 <__kernel_rem_pio2f+0x3b4>
 80051ea:	ab30      	add	r3, sp, #192	; 0xc0
 80051ec:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 80050ac <__kernel_rem_pio2f+0x300>
 80051f0:	440b      	add	r3, r1
 80051f2:	2c00      	cmp	r4, #0
 80051f4:	da05      	bge.n	8005202 <__kernel_rem_pio2f+0x456>
 80051f6:	b10f      	cbz	r7, 80051fc <__kernel_rem_pio2f+0x450>
 80051f8:	eef1 7a67 	vneg.f32	s15, s15
 80051fc:	edc8 7a00 	vstr	s15, [r8]
 8005200:	e7ae      	b.n	8005160 <__kernel_rem_pio2f+0x3b4>
 8005202:	ed33 7a01 	vldmdb	r3!, {s14}
 8005206:	3c01      	subs	r4, #1
 8005208:	ee77 7a87 	vadd.f32	s15, s15, s14
 800520c:	e7f1      	b.n	80051f2 <__kernel_rem_pio2f+0x446>
 800520e:	ed73 7a01 	vldmdb	r3!, {s15}
 8005212:	3a01      	subs	r2, #1
 8005214:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005218:	e7d2      	b.n	80051c0 <__kernel_rem_pio2f+0x414>
 800521a:	eef0 7a47 	vmov.f32	s15, s14
 800521e:	e7d4      	b.n	80051ca <__kernel_rem_pio2f+0x41e>
 8005220:	ecb2 7a01 	vldmia	r2!, {s14}
 8005224:	3301      	adds	r3, #1
 8005226:	ee77 7a87 	vadd.f32	s15, s15, s14
 800522a:	e7d6      	b.n	80051da <__kernel_rem_pio2f+0x42e>
 800522c:	edd2 7a00 	vldr	s15, [r2]
 8005230:	edd2 6a01 	vldr	s13, [r2, #4]
 8005234:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8005238:	3801      	subs	r0, #1
 800523a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800523e:	ed82 7a00 	vstr	s14, [r2]
 8005242:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005246:	edc2 7a01 	vstr	s15, [r2, #4]
 800524a:	e798      	b.n	800517e <__kernel_rem_pio2f+0x3d2>
 800524c:	edd3 7a00 	vldr	s15, [r3]
 8005250:	edd3 6a01 	vldr	s13, [r3, #4]
 8005254:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8005258:	3a01      	subs	r2, #1
 800525a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800525e:	ed83 7a00 	vstr	s14, [r3]
 8005262:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005266:	edc3 7a01 	vstr	s15, [r3, #4]
 800526a:	e78d      	b.n	8005188 <__kernel_rem_pio2f+0x3dc>
 800526c:	ed33 7a01 	vldmdb	r3!, {s14}
 8005270:	3c01      	subs	r4, #1
 8005272:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005276:	e78f      	b.n	8005198 <__kernel_rem_pio2f+0x3ec>
 8005278:	eef1 6a66 	vneg.f32	s13, s13
 800527c:	eeb1 7a47 	vneg.f32	s14, s14
 8005280:	edc8 6a00 	vstr	s13, [r8]
 8005284:	ed88 7a01 	vstr	s14, [r8, #4]
 8005288:	eef1 7a67 	vneg.f32	s15, s15
 800528c:	e790      	b.n	80051b0 <__kernel_rem_pio2f+0x404>
 800528e:	bf00      	nop

08005290 <scalbnf>:
 8005290:	ee10 3a10 	vmov	r3, s0
 8005294:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8005298:	d02b      	beq.n	80052f2 <scalbnf+0x62>
 800529a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800529e:	d302      	bcc.n	80052a6 <scalbnf+0x16>
 80052a0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80052a4:	4770      	bx	lr
 80052a6:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 80052aa:	d123      	bne.n	80052f4 <scalbnf+0x64>
 80052ac:	4b24      	ldr	r3, [pc, #144]	; (8005340 <scalbnf+0xb0>)
 80052ae:	eddf 7a25 	vldr	s15, [pc, #148]	; 8005344 <scalbnf+0xb4>
 80052b2:	4298      	cmp	r0, r3
 80052b4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80052b8:	db17      	blt.n	80052ea <scalbnf+0x5a>
 80052ba:	ee10 3a10 	vmov	r3, s0
 80052be:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80052c2:	3a19      	subs	r2, #25
 80052c4:	f24c 3150 	movw	r1, #50000	; 0xc350
 80052c8:	4288      	cmp	r0, r1
 80052ca:	dd15      	ble.n	80052f8 <scalbnf+0x68>
 80052cc:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8005348 <scalbnf+0xb8>
 80052d0:	eddf 6a1e 	vldr	s13, [pc, #120]	; 800534c <scalbnf+0xbc>
 80052d4:	ee10 3a10 	vmov	r3, s0
 80052d8:	eeb0 7a67 	vmov.f32	s14, s15
 80052dc:	2b00      	cmp	r3, #0
 80052de:	bfb8      	it	lt
 80052e0:	eef0 7a66 	vmovlt.f32	s15, s13
 80052e4:	ee27 0a87 	vmul.f32	s0, s15, s14
 80052e8:	4770      	bx	lr
 80052ea:	eddf 7a19 	vldr	s15, [pc, #100]	; 8005350 <scalbnf+0xc0>
 80052ee:	ee27 0a80 	vmul.f32	s0, s15, s0
 80052f2:	4770      	bx	lr
 80052f4:	0dd2      	lsrs	r2, r2, #23
 80052f6:	e7e5      	b.n	80052c4 <scalbnf+0x34>
 80052f8:	4410      	add	r0, r2
 80052fa:	28fe      	cmp	r0, #254	; 0xfe
 80052fc:	dce6      	bgt.n	80052cc <scalbnf+0x3c>
 80052fe:	2800      	cmp	r0, #0
 8005300:	dd06      	ble.n	8005310 <scalbnf+0x80>
 8005302:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005306:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800530a:	ee00 3a10 	vmov	s0, r3
 800530e:	4770      	bx	lr
 8005310:	f110 0f16 	cmn.w	r0, #22
 8005314:	da09      	bge.n	800532a <scalbnf+0x9a>
 8005316:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8005350 <scalbnf+0xc0>
 800531a:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8005354 <scalbnf+0xc4>
 800531e:	ee10 3a10 	vmov	r3, s0
 8005322:	eeb0 7a67 	vmov.f32	s14, s15
 8005326:	2b00      	cmp	r3, #0
 8005328:	e7d9      	b.n	80052de <scalbnf+0x4e>
 800532a:	3019      	adds	r0, #25
 800532c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005330:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8005334:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8005358 <scalbnf+0xc8>
 8005338:	ee07 3a90 	vmov	s15, r3
 800533c:	e7d7      	b.n	80052ee <scalbnf+0x5e>
 800533e:	bf00      	nop
 8005340:	ffff3cb0 	.word	0xffff3cb0
 8005344:	4c000000 	.word	0x4c000000
 8005348:	7149f2ca 	.word	0x7149f2ca
 800534c:	f149f2ca 	.word	0xf149f2ca
 8005350:	0da24260 	.word	0x0da24260
 8005354:	8da24260 	.word	0x8da24260
 8005358:	33000000 	.word	0x33000000

0800535c <floorf>:
 800535c:	ee10 3a10 	vmov	r3, s0
 8005360:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8005364:	3a7f      	subs	r2, #127	; 0x7f
 8005366:	2a16      	cmp	r2, #22
 8005368:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800536c:	dc2a      	bgt.n	80053c4 <floorf+0x68>
 800536e:	2a00      	cmp	r2, #0
 8005370:	da11      	bge.n	8005396 <floorf+0x3a>
 8005372:	eddf 7a18 	vldr	s15, [pc, #96]	; 80053d4 <floorf+0x78>
 8005376:	ee30 0a27 	vadd.f32	s0, s0, s15
 800537a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800537e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005382:	dd05      	ble.n	8005390 <floorf+0x34>
 8005384:	2b00      	cmp	r3, #0
 8005386:	da23      	bge.n	80053d0 <floorf+0x74>
 8005388:	4a13      	ldr	r2, [pc, #76]	; (80053d8 <floorf+0x7c>)
 800538a:	2900      	cmp	r1, #0
 800538c:	bf18      	it	ne
 800538e:	4613      	movne	r3, r2
 8005390:	ee00 3a10 	vmov	s0, r3
 8005394:	4770      	bx	lr
 8005396:	4911      	ldr	r1, [pc, #68]	; (80053dc <floorf+0x80>)
 8005398:	4111      	asrs	r1, r2
 800539a:	420b      	tst	r3, r1
 800539c:	d0fa      	beq.n	8005394 <floorf+0x38>
 800539e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80053d4 <floorf+0x78>
 80053a2:	ee30 0a27 	vadd.f32	s0, s0, s15
 80053a6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80053aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053ae:	ddef      	ble.n	8005390 <floorf+0x34>
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	bfbe      	ittt	lt
 80053b4:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 80053b8:	fa40 f202 	asrlt.w	r2, r0, r2
 80053bc:	189b      	addlt	r3, r3, r2
 80053be:	ea23 0301 	bic.w	r3, r3, r1
 80053c2:	e7e5      	b.n	8005390 <floorf+0x34>
 80053c4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80053c8:	d3e4      	bcc.n	8005394 <floorf+0x38>
 80053ca:	ee30 0a00 	vadd.f32	s0, s0, s0
 80053ce:	4770      	bx	lr
 80053d0:	2300      	movs	r3, #0
 80053d2:	e7dd      	b.n	8005390 <floorf+0x34>
 80053d4:	7149f2ca 	.word	0x7149f2ca
 80053d8:	bf800000 	.word	0xbf800000
 80053dc:	007fffff 	.word	0x007fffff

080053e0 <_init>:
 80053e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053e2:	bf00      	nop
 80053e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053e6:	bc08      	pop	{r3}
 80053e8:	469e      	mov	lr, r3
 80053ea:	4770      	bx	lr

080053ec <_fini>:
 80053ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053ee:	bf00      	nop
 80053f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053f2:	bc08      	pop	{r3}
 80053f4:	469e      	mov	lr, r3
 80053f6:	4770      	bx	lr
